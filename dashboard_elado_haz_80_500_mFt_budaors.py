"""
ELAD√ì H√ÅZ ERD ERDLIGET - EGYSZER≈∞ DASHBOARD
==========================================
√öj CSV form√°tumhoz adapt√°lva
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

# Konfigur√°ci√≥
st.set_page_config(
    page_title="Elado Haz 80 500 MFt Budaors Dashboard",
    page_icon="üè†",
    layout="wide"
)

# Optimaliz√°lt ML modell √©s sz√∂vegelemz√©s import
try:
    from optimized_ml_model import OptimalizaltIngatlanModell
    OPTIMIZED_ML_AVAILABLE = True
except ImportError:
    OPTIMIZED_ML_AVAILABLE = False

# Sz√∂veganal√≠zis m√°r integr√°lva van a scraper-be, ez√©rt mindig el√©rhet≈ë
TEXT_ANALYSIS_AVAILABLE = True  # Enhanced Mode mindig el√©rhet≈ë

@st.cache_data(ttl=10)  # 10 m√°sodperc cache
def load_data():
    """Modern Enhanced Buda√∂rs adatok bet√∂lt√©se"""
    try:
        # 1. LEGMAGASABB PRIORIT√ÅS: modern enhanced buda√∂rs f√°jlok
        import glob
        modern_enhanced_files = glob.glob("ingatlan_modern_enhanced_budaors_*.csv")
        if modern_enhanced_files:
            latest_file = max(modern_enhanced_files)
            df = pd.read_csv(latest_file, encoding='utf-8-sig', sep='|')
            return df, latest_file
        
        # 2. M√ÅSODIK PRIORIT√ÅS: enhanced text features buda√∂rs f√°jlok
        modern_files = glob.glob("ingatlan_reszletes_enhanced_text_features_elado_haz_80_500_mFt_budaors_*.csv")
        if modern_files:
            latest_file = max(modern_files)
            df = pd.read_csv(latest_file, encoding='utf-8-sig', sep='|')
            return df, latest_file
        else:
            # 3. FALLBACK ha nincs buda√∂rs specific f√°jl
            df = pd.read_csv("ingatlan_reszletes_enhanced_text_features.csv", encoding='utf-8-sig', sep='|')
            return df, "ingatlan_reszletes_enhanced_text_features.csv"
        
        # Numerikus konverzi√≥k
        if 'nm_ar' in df.columns:
            # nm_ar: "1 278 195 Ft / m2" -> 1278195 (elt√°vol√≠tjuk a sz√≥k√∂z√∂ket, megtartjuk a sz√°mokat)
            def parse_price_per_m2(text):
                if pd.isna(text):
                    return None
                import re
                # Kivonjuk az els≈ë sz√°mcsoportot a "Ft" el≈ëtt
                match = re.search(r'([\d\s\xa0]+)\s*Ft', str(text))
                if match:
                    # Sz√≥k√∂z√∂k √©s non-breaking space-ek elt√°vol√≠t√°sa
                    numbers = match.group(1).replace(' ', '').replace('\xa0', '')
                    return int(numbers) if numbers.isdigit() else None
                return None
            
            df['ar_szam'] = df['nm_ar'].apply(parse_price_per_m2)
        if 'teljes_ar' in df.columns:
            # teljes_ar: "170 M Ft" vagy "139,90 M Ft" -> 170 vagy 139.90 (milli√≥ Ft-ban)
            def parse_million_ft(text):
                if pd.isna(text):
                    return None
                text = str(text).replace(',', '.')  # vessz≈ë -> pont
                import re
                match = re.search(r'(\d+(?:\.\d+)?)\s*M', text)
                return float(match.group(1)) if match else None
            
            df['teljes_ar_milli√≥'] = df['teljes_ar'].apply(parse_million_ft)
        if 'terulet' in df.columns:
            df['terulet_szam'] = pd.to_numeric(df['terulet'].astype(str).str.replace(r'[^\d.]', '', regex=True), errors='coerce')
        if 'szobak' in df.columns:
            df['szobak_szam'] = pd.to_numeric(df['szobak'].astype(str).str.replace(r'[^\d.]', '', regex=True), errors='coerce')
        if 'kepek_szama' in df.columns:
            df['kepek_szama'] = pd.to_numeric(df['kepek_szama'], errors='coerce')
        
        return df
        
    except Exception as e:
        st.error(f"Bet√∂lt√©si hiba: {e}")
        return pd.DataFrame(), None

def generate_title_from_filename(filename):
    """CSV f√°jln√©v alapj√°n c√≠m gener√°l√°sa"""
    if not filename:
        return "üè† Ingatlan Dashboard"
    
    # ingatlan_reszletes_enhanced_text_features_elado_haz_80_500_mFt_budaors_20250821_005635.csv
    # -> Buda√∂rs - H√°zak - 2025.08.21.
    import re
    
    # D√°tum kinyer√©se: 20250821 -> 2025.08.21
    date_match = re.search(r'(\d{4})(\d{2})(\d{2})', filename)
    if date_match:
        year, month, day = date_match.groups()
        formatted_date = f"{year}.{month}.{day}"
    else:
        formatted_date = "2025"
    
    # Buda√∂rs kinyer√©se
    if 'budaors' in filename.lower():
        city = "Buda√∂rs"
    else:
        city = "Ismeretlen ter√ºlet"
    
    # H√°zak/Lak√°sok kinyer√©se  
    if 'haz' in filename.lower():
        property_type = "H√°zak"
    elif 'lakas' in filename.lower():
        property_type = "Lak√°sok"
    else:
        property_type = "Ingatlanok"
    
    return f"üè† {city} - {property_type} - {formatted_date}"

def run_basic_dashboard():
    """Az eredeti dashboard k√≥d futtat√°sa"""
    
    # Adatok bet√∂lt√©se
    df, filename = load_data()
    
    # Dinamikus c√≠m gener√°l√°s
    title = generate_title_from_filename(filename)
    st.title(title)
    
    # Adatok bet√∂lt√©se
    if df.empty:
        st.error("Nem siker√ºlt bet√∂lteni az adatokat!")
        return
    
    # Alapstatisztik√°k
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìä √ñsszes ingatlan", len(df))
    
    with col2:
        if 'ar_szam' in df.columns:
            avg_price = df['ar_szam'].dropna().mean()
            if not pd.isna(avg_price):
                st.metric("üí∞ √Åtlag m¬≤ √°r", f"{avg_price:,.0f} Ft/m¬≤")
            else:
                st.metric("üí∞ √Åtlag m¬≤ √°r", "N/A")
        else:
            st.metric("üí∞ √Åtlag m¬≤ √°r", "N/A")
    
    with col3:
        if 'teljes_ar_milli√≥' in df.columns:
            avg_total = df['teljes_ar_milli√≥'].dropna().mean()
            if not pd.isna(avg_total):
                st.metric("üè† √Åtlag teljes √°r", f"{avg_total:.1f} M Ft")
            else:
                st.metric("üè† √Åtlag teljes √°r", "N/A")
        else:
            st.metric("üè† √Åtlag teljes √°r", "N/A")
    
    # OPTIMALIZ√ÅLT ML √ÅRBECSL≈ê - K√ñZVETLEN√úL AZ ALAPADATOK ALATT
    if OPTIMIZED_ML_AVAILABLE:
        st.write("---")
        st.header("üéØ Intelligens √Årbecsl≈ë (Optimaliz√°lt ML)")
        
        # Optimaliz√°lt ML modell session state inicializ√°l√°s
        if 'dashboard_opt_model' not in st.session_state:
            st.session_state.dashboard_opt_model = OptimalizaltIngatlanModell()
            st.session_state.dashboard_opt_df = None
            st.session_state.dashboard_model_trained = False
        
        opt_model = st.session_state.dashboard_opt_model

        # K√©toszlopos elrendez√©s
        ml_col1, ml_col2 = st.columns([1, 2])
        
        with ml_col1:
            st.write("**üîÑ Modell el≈ëk√©sz√≠t√©s**")
            
            # Adatok el≈ëk√©sz√≠t√©se gomb
            if st.button("üìä Adatok feldolgoz√°sa", key="dashboard_prep_data", type="secondary"):
                with st.spinner("Adatok el≈ëk√©sz√≠t√©se..."):
                    try:
                        # Dashboard adatok felhaszn√°l√°sa (m√°r bet√∂lt√∂tt df)
                        st.session_state.dashboard_opt_df = opt_model.process_dashboard_data(df)
                        st.success("‚úÖ Adatok konvert√°lva az ML modellhez!")
                    except Exception as e:
                        st.error(f"Hiba az adatok el≈ëk√©sz√≠t√©s√©n√©l: {e}")
                        import traceback
                        st.code(traceback.format_exc())
            
            # Modell tan√≠t√°s gomb
            if st.button("ü§ñ ML Modell tan√≠t√°sa", key="dashboard_train_model", type="primary"):
                if st.session_state.dashboard_opt_df is not None:
                    with st.spinner("Modellek tan√≠t√°sa..."):
                        try:
                            # Enhanced CSV haszn√°lata, ha el√©rhet≈ë
                            enhanced_csv_path = "ingatlan_reszletes_enhanced_text_features_elado_haz_80_500_mFt_budaors_20250821_000513.csv"
                            use_enhanced = False
                            
                            try:
                                # Pr√≥b√°ljuk bet√∂lteni az enhanced CSV-t
                                import os
                                if os.path.exists(enhanced_csv_path):
                                    enhanced_df = opt_model.adatok_elokeszitese_enhanced(enhanced_csv_path, use_text_features=True)
                                    if not enhanced_df.empty:
                                        # st.success("‚úÖ Enhanced CSV haszn√°lata (sz√∂veges feature-kkel)")  # Rejtett √ºzenet
                                        opt_model.modell_tanitas(enhanced_df)
                                        use_enhanced = True
                                    else:
                                        st.warning("‚ö†Ô∏è Enhanced CSV √ºres, alap adatok haszn√°lata")
                                else:
                                    st.info("‚ÑπÔ∏è Enhanced CSV nem tal√°lhat√≥, alap adatok haszn√°lata")
                            except Exception as e:
                                st.warning(f"‚ö†Ô∏è Enhanced CSV hiba: {e}")
                            
                            # Ha enhanced nem siker√ºlt, haszn√°ljuk az eredetit
                            if not use_enhanced:
                                opt_model.modell_tanitas(st.session_state.dashboard_opt_df)
                            
                            st.session_state.dashboard_model_trained = True
                            # st.success(f"‚úÖ Legjobb modell: {opt_model.best_model_name}")  # Rejtett √ºzenet
                        except Exception as e:
                            st.error(f"Hiba a modell tan√≠t√°s√°n√°l: {e}")
                else:
                    st.error("El≈ësz√∂r k√©sz√≠tsd el≈ë az adatokat!")
        
        with ml_col2:
            # Gyors √°rbecsl√©s (ha a modell tan√≠tva van)
            if st.session_state.dashboard_model_trained and opt_model.best_model is not None:
                st.write("**üí∞ Gyors √Årbecsl√©s**")
                
                # Enhanced mode toggle
                use_text_features = False
                if TEXT_ANALYSIS_AVAILABLE:
                    use_text_features = st.checkbox("üéØ **Enhanced Mode**: Sz√∂veges le√≠r√°s alap√∫ feature-k", 
                                                   value=True, key="dashboard_use_text_features")
                
                # Kompakt input form
                quick_col1, quick_col2, quick_col3 = st.columns(3)
                
                with quick_col1:
                    quick_terulet = st.number_input("Ter√ºlet (m¬≤)", min_value=30, max_value=400, 
                                                   value=120, key="dashboard_quick_terulet")
                    quick_szobak = st.selectbox("Szob√°k", [2, 2.5, 3, 3.5, 4, 4.5, 5], 
                                               index=3, key="dashboard_quick_szobak")
                
                with quick_col2:
                    quick_allapot = st.selectbox("√Ållapot", 
                                               ['fel√∫j√≠tand√≥', 'k√∂zepes √°llapot√∫', 'j√≥ √°llapot√∫', 'fel√∫j√≠tott'], 
                                               index=2, key="dashboard_quick_allapot")
                    quick_kora = st.number_input("H√°z kora (√©v)", min_value=0, max_value=80, 
                                                value=25, key="dashboard_quick_kora")
                
                with quick_col3:
                    quick_telek = st.number_input("Telek (m¬≤)", min_value=200, max_value=1500, 
                                                 value=600, key="dashboard_quick_telek")
                    quick_parkolas = st.checkbox("Van parkol√°s", value=True, key="dashboard_quick_parkolas")
                
                # Sz√∂veges le√≠r√°s (Enhanced Mode eset√©n)
                leiras_text = ""
                if use_text_features:
                    st.write("**üìù R√©szletes le√≠r√°s (Enhanced Mode)**")
                    leiras_text = st.text_area(
                        "Ingatlan le√≠r√°sa (pl: eleg√°ns, luxus, parkos√≠tott kert, gar√°zs, kl√≠ma, stb.)",
                        value="Eleg√°ns, fel√∫j√≠tott csal√°di h√°z csendes, parkos√≠tott telken. T√°gas nappali, modern konyha, kl√≠ma.",
                        height=80,
                        key="dashboard_quick_description"
                    )
                    
                    st.info("üí° **Tipp**: Haszn√°lj kulcsszavakat mint *eleg√°ns, luxus, parkos√≠tott, gar√°zs, kl√≠ma, t√°gas, csendes* stb.")
                
                # Azonnali becsl√©s gomb
                button_text = "üîÆ Enhanced Becsl√©s" if use_text_features else "üîÆ Azonnali Becsl√©s"
                if st.button(button_text, type="primary", key="dashboard_quick_predict"):
                    try:
                        # JAV√çTOTT √°llapot encoding
                        allapot_map = {
                            'fel√∫j√≠tand√≥': 2, 'k√∂zepes √°llapot√∫': 4, 
                            'j√≥ √°llapot√∫': 6, 'fel√∫j√≠tott': 9  # Nagy pr√©mium!
                        }
                        
                        # Alapvet≈ë feature-k
                        base_features = {
                            'terulet': quick_terulet,
                            'terulet_log': np.log1p(quick_terulet),
                            'szobak_szam': quick_szobak,
                            'allapot_szam': allapot_map[quick_allapot],
                            'haz_kora': quick_kora,
                            'telekterulet_szam': quick_telek,
                            'telek_log': np.log1p(quick_telek),
                            'van_parkolas': int(quick_parkolas)
                        }
                        
                        # √öj feature-k sz√°m√≠t√°sa
                        # Kor kateg√≥ria
                        if quick_kora < 10:
                            base_features['kor_kategoria'] = 4  # √öj h√°z
                        elif quick_kora < 25:
                            base_features['kor_kategoria'] = 3  # Fiatal
                        elif quick_kora < 50:
                            base_features['kor_kategoria'] = 2  # K√∂zepes
                        else:
                            base_features['kor_kategoria'] = 1  # R√©gi
                        
                        # Nagy telek pr√©mium
                        base_features['nagy_telek'] = int(quick_telek > 600)
                        
                        # Interakci√≥k
                        base_features['terulet_x_allapot'] = quick_terulet * allapot_map[quick_allapot]
                        base_features['m2_per_szoba'] = quick_terulet / quick_szobak
                        
                        # SZ√ñVEGES FEATURE-K (Enhanced Mode)
                        text_features = {}
                        if use_text_features and TEXT_ANALYSIS_AVAILABLE:
                            # Enhanced CSV m√°r tartalmazza az √∂sszes sz√∂veges feature-t
                            # Alap√©rtelmezett √©rt√©kek a becsl√©shez (felhaszn√°l√≥ √°ltal megadhat√≥ k√©s≈ëbb)
                            text_features.update({
                                'luxus_minoseg_pont': 0,
                                'van_luxus_kifejez√©s': 0,
                                'komfort_extra_pont': 0,
                                'van_komfort_extra': 0,
                                'parkolas_garage_pont': 0,
                                'van_garage_parkolas': 0,
                                'kert_terulet_pont': 0,
                                'van_kert_terulet': 0,
                                'netto_szoveg_pont': 0,
                                'van_negativ_elem': 0,
                                'van_paneles_epitesm√≥d': 0,
                                'van_t√©gla_anyag': 0,
                                'van_modern_felujaitas': 0,
                                'lakhatosag_pont': 0,
                                'van_fel√∫jitando_allapot': 0,
                                'van_√∫jepitesu_kategoria': 0,
                                'energetika_pont': 0,
                                'van_fejlett_energetika': 0
                            })
                            
                            # Sz√∂vegfeature inform√°ci√≥
                            st.info("üåü **Enhanced Mode**: Sz√∂veges feature-k haszn√°lhat√≥k r√©szletesebb becsl√©shez!")
                        
                        # Feature vektor √∂ssze√°ll√≠t√°sa - DINAMIKUS feature lista
                        all_features = {**base_features, **text_features}
                        
                        # JAV√çTOTT: Enhanced Mode eset√©n √∫jra kell tan√≠tani a modellt az √∂sszes feature-rel!
                        if use_text_features and text_features and hasattr(opt_model, 'all_features'):
                            # Enhanced Mode: haszn√°ljuk az √∂sszes feature-t (alap + sz√∂veges)
                            feature_list = [f for f in opt_model.all_features if f in all_features]
                            
                            # Ha a modell nincs Enhanced feature-kkel tan√≠tva, jelezz√ºk
                            if not hasattr(opt_model, 'enhanced_trained') or not opt_model.enhanced_trained:
                                st.warning("‚ö†Ô∏è **Figyelem**: A modell m√©g nincs Enhanced feature-kkel tan√≠tva! Kattints a 'Modell betan√≠t√°sa' gombra Enhanced CSV-vel.")
                                # Fallback az alap modellre
                                feature_list = [f for f in opt_model.significant_features if f in all_features]
                        else:
                            # Alap Mode: csak alap feature-k
                            feature_list = [f for f in opt_model.significant_features if f in all_features]
                        
                        # Debug info
                        mode_info = "Enhanced" if (use_text_features and text_features) else "Alap"
                        st.write(f"üîß **Debug**: {mode_info} Mode - {len(feature_list)} feature haszn√°lva")
                        st.write(f"üìä **Feature-k**: {', '.join(feature_list[:5])}{'...' if len(feature_list) > 5 else ''}")
                        
                        if use_text_features and text_features:
                            text_feature_count = len([f for f in feature_list if f in opt_model.text_features])
                            st.write(f"‚ú® **Sz√∂veges feature-k**: {text_feature_count} akt√≠v")
                            if text_feature_count == 0:
                                st.error("‚ùå **Nincs akt√≠v sz√∂veges feature!** A modell val√≥sz√≠n≈±leg nincs Enhanced adatokkal tan√≠tva.")
                        
                        # Ellen≈ërizz√ºk, hogy a modell h√°ny feature-t v√°r
                        model_feature_count = None
                        if hasattr(opt_model, 'best_model') and hasattr(opt_model.best_model, 'n_features_in_'):
                            model_feature_count = opt_model.best_model.n_features_in_
                        
                        # JAV√çTOTT: Feature lista a modell elv√°r√°sai szerint
                        if model_feature_count == 20:
                            # A modell Enhanced feature-kkel lett betan√≠tva - minden feature-t haszn√°lunk
                            if use_text_features and text_features:
                                user_vector = np.array([all_features.get(f, 0) for f in opt_model.all_features]).reshape(1, -1)
                                st.info("üåü **Enhanced Mode**: 20 feature haszn√°lva (alap + sz√∂veges)")
                            else:
                                st.error("‚ùå **Modell hiba**: A modell Enhanced feature-kkel lett betan√≠tva, de Enhanced Mode nincs bekapcsolva!")
                                st.info("üí° **Megold√°s**: Kapcsold be az 'Enhanced sz√∂veges elemz√©s' opci√≥t!")
                                return
                        else:
                            # A modell csak alap feature-kkel lett betan√≠tva
                            basic_features = [f for f in opt_model.significant_features if f in all_features]
                            user_vector = np.array([all_features.get(f, 0) for f in basic_features]).reshape(1, -1)
                            if use_text_features:
                                st.warning("‚ö†Ô∏è **Figyelem**: A modell nincs Enhanced feature-kkel tan√≠tva!")
                                st.info("üí° **Megold√°s**: Tan√≠tsd √∫jra a modellt Enhanced opci√≥val!")
                            else:
                                st.info(f"üîß **Alap Mode**: {len(basic_features)} feature haszn√°lva")
                        
                        predicted_price = opt_model.best_model.predict(user_vector)[0]
                        price_per_m2 = (predicted_price * 1_000_000) / quick_terulet
                        
                        # Eredm√©nyek megjelen√≠t√©se
                        result_col1, result_col2 = st.columns(2)
                        
                        with result_col1:
                            st.metric("üí∞ Becs√ºlt √°r", f"{predicted_price:.1f} M Ft")
                        
                        with result_col2:
                            st.metric("üìè √År/m¬≤", f"{price_per_m2:,.0f} Ft/m¬≤")
                        
                        # Modell inform√°ci√≥
                        mode_text = "Enhanced (sz√∂veg+alap)" if use_text_features else "Alap"
                        feature_count = len(feature_list)
                        st.info(f"ü§ñ **Modell**: {opt_model.best_model_name} ({mode_text}) - {feature_count} feature")
                        
                    except Exception as e:
                        st.error(f"Hiba a becsl√©s sor√°n: {e}")
                        import traceback
                        st.code(traceback.format_exc())
            else:
                st.info("üîß **K√©rlek el≈ësz√∂r k√©sz√≠tsd el≈ë az adatokat √©s tan√≠tsd be a modellt**")
    else:
        st.warning("‚ö†Ô∏è Optimaliz√°lt ML modell nem el√©rhet≈ë")
    
    st.write("---")
    
    # C√≠mek szerinti elemz√©s
    st.header("üèòÔ∏è C√≠mek szerinti piaci elemz√©s")
    if 'cim' in df.columns:
        # C√≠mek tiszt√≠t√°sa √©s kategoriz√°l√°sa
        df_cim = df.copy()
        df_cim['cim_clean'] = df_cim['cim'].astype(str)
        
        # Els≈ë 3 sz√≥ a c√≠mb≈ël (utca/ker√ºlet azonos√≠t√°shoz)
        df_cim['cim_kategoria'] = df_cim['cim_clean'].str.split().str[:3].str.join(' ')
        
        # Geolok√°ci√≥s v√°rosr√©sz kategoriz√°l√°s
        def get_varosresz(cim):
            """V√°rosr√©sz meghat√°roz√°sa utcan√©v alapj√°n"""
            cim_lower = str(cim).lower()
            
            # Buda√∂rs v√°rosr√©szei utcanevek alapj√°n
            if any(utca in cim_lower for utca in ['di√≥fa', 'k≈ëris', 't√∂lgy', 'ny√≠r', 'juhar']):
                return 'Kertv√°ros'
            elif any(utca in cim_lower for utca in ['f≈ë', 'kossuth', 'pet≈ëfi', 'ady']):
                return 'K√∂zpont'
            elif any(utca in cim_lower for utca in ['t√∂r√∂kb√°linti', 'budai', 'b√©csi']):
                return '√âszaki r√©sz'
            elif any(utca in cim_lower for utca in ['pipacs', 'tulip√°n', 'r√≥zsa', 'orgona']):
                return 'Vir√°gos negyed'
            elif any(utca in cim_lower for utca in ['k≈ëfejt≈ë', 'hegy', 'domb', 'magas√∫t']):
                return 'Hegyek'
            elif any(utca in cim_lower for utca in ['≈ësz', 'tavasz', 'ny√°r', 't√©l']):
                return '√âvszakok utc√°ja'
            else:
                return 'Egy√©b/Ismeretlen'
        
        df_cim['varosresz'] = df_cim['cim_clean'].apply(get_varosresz)
        
        # R√©szletes c√≠mstatisztik√°k t√°bl√°zat
        st.subheader("ÔøΩ R√©szletes c√≠mstatisztik√°k")
        if 'ar_szam' in df.columns and 'teljes_ar_milli√≥' in df.columns:
            # C√≠mkateg√≥ri√°k szerinti statisztik√°k
            cim_stats = df_cim.groupby('cim_kategoria').agg({
                'ar_szam': ['count', 'mean', 'std'],
                'teljes_ar_milli√≥': ['mean', 'median'],
                'terulet_szam': ['mean'] if 'terulet_szam' in df.columns else []
            }).round(2)
            
            # Oszlopnevek egyszer≈±s√≠t√©se
            columns = ['Hirdet√©sek', '√Åtlag Ft/m¬≤', 'Sz√≥r√°s Ft/m¬≤', '√Åtlag teljes √°r (M Ft)', 'Medi√°n teljes √°r (M Ft)']
            if 'terulet_szam' in df.columns:
                columns.append('√Åtlag ter√ºlet (m¬≤)')
            cim_stats.columns = columns
            
            # V√°rosr√©sz inform√°ci√≥ hozz√°ad√°sa
            varosresz_map = df_cim.set_index('cim_kategoria')['varosresz'].to_dict()
            cim_stats['V√°rosr√©sz'] = cim_stats.index.map(varosresz_map)
            
            # Rendez√©s √°tlag Ft/m¬≤ szerint
            cim_stats = cim_stats.sort_values('√Åtlag Ft/m¬≤', ascending=False)
            
            # Oszlopok √∫jrarendez√©se - V√°rosr√©sz els≈ë helyre
            cols = ['V√°rosr√©sz'] + [col for col in cim_stats.columns if col != 'V√°rosr√©sz']
            cim_stats = cim_stats[cols]
            
            st.dataframe(cim_stats, use_container_width=True)
            
            # V√°rosr√©szek szerinti √∂sszes√≠t√©s
            if len(df_cim['varosresz'].unique()) > 1:
                st.subheader("üó∫Ô∏è V√°rosr√©szek szerinti √∂sszes√≠t√©s")
                varosresz_stats = df_cim.groupby('varosresz').agg({
                    'ar_szam': ['count', 'mean', 'std'],
                    'teljes_ar_milli√≥': ['mean', 'median']
                }).round(2)
                
                varosresz_stats.columns = ['Hirdet√©sek', '√Åtlag Ft/m¬≤', 'Sz√≥r√°s Ft/m¬≤', '√Åtlag teljes √°r (M Ft)', 'Medi√°n teljes √°r (M Ft)']
                varosresz_stats = varosresz_stats.sort_values('√Åtlag Ft/m¬≤', ascending=False)
                
                st.dataframe(varosresz_stats, use_container_width=True)
                
                # V√°rosr√©szek megoszl√°sa pie chart
                col1, col2 = st.columns(2)
                with col1:
                    varosresz_counts = df_cim['varosresz'].value_counts()
                    fig_varosresz = px.pie(
                        values=varosresz_counts.values,
                        names=varosresz_counts.index,
                        title="Hirdet√©sek megoszl√°sa v√°rosr√©szek szerint"
                    )
                    st.plotly_chart(fig_varosresz, use_container_width=True)
                
                with col2:
                    # V√°rosr√©szek √°tlag√°ra bar chart
                    if len(varosresz_stats) > 0:
                        fig_varosresz_ar = px.bar(
                            x=varosresz_stats['√Åtlag Ft/m¬≤'].values,
                            y=varosresz_stats.index,
                            orientation='h',
                            title="√Åtlag√°rak v√°rosr√©szek szerint",
                            labels={'x': '√Åtlag Ft/m¬≤', 'y': 'V√°rosr√©sz'}
                        )
                        fig_varosresz_ar.update_layout(height=400)
                        st.plotly_chart(fig_varosresz_ar, use_container_width=True)
            
        else:
            st.warning("R√©szletes √°rstatisztik√°k nem √©rhet≈ëk el")
                
    else:
        st.warning("C√≠m adat nem √©rhet≈ë el")
    
    # √År vs ter√ºlet elemz√©s
    st.header("üí∞ √År √©s ter√ºlet √∂sszef√ºgg√©s")
    if 'ar_szam' in df.columns and 'terulet_szam' in df.columns:
        df_clean = df.dropna(subset=['ar_szam', 'terulet_szam'])
        
        if len(df_clean) > 0:
            fig_scatter = px.scatter(
                df_clean,
                x='terulet_szam',
                y='ar_szam', 
                color='hirdeto_tipus' if 'hirdeto_tipus' in df.columns else None,
                title='m¬≤ √°r vs. ter√ºlet',
                labels={
                    'terulet_szam': 'Ter√ºlet (m¬≤)',
                    'ar_szam': 'm¬≤ √°r (Ft/m¬≤)',
                    'hirdeto_tipus': 'Hirdet≈ë t√≠pus'
                }
            )
            st.plotly_chart(fig_scatter, use_container_width=True)
        else:
            st.warning("Nincs elegend≈ë adat a grafikonhoz")
    else:
        st.warning("√År vagy ter√ºlet adat nem √©rhet≈ë el")
    
    # √Ållapot szerinti megoszl√°s
    st.header("üè† Ingatlan √°llapot szerinti megoszl√°s")
    if 'ingatlan_allapota' in df.columns:
        allapot_counts = df['ingatlan_allapota'].dropna().value_counts()
        fig_bar = px.bar(
            x=allapot_counts.index,
            y=allapot_counts.values,
            title='Ingatlanok √°llapot szerint',
            labels={'x': '√Ållapot', 'y': 'Darab'}
        )
        st.plotly_chart(fig_bar, use_container_width=True)
    else:
        st.warning("Ingatlan √°llapot adat nem √©rhet≈ë el")
    
    # Adatok t√°bl√°zat
    st.header("üìä R√©szletes adatok")
    
    # Hirdet√©s azonos√≠t√≥ hozz√°ad√°sa
    display_df = df.copy()
    
    # Oszlopok kiv√°laszt√°sa megjelen√≠t√©shez
    display_cols = ['cim', 'teljes_ar', 'terulet', 'nm_ar', 'szobak', 'ingatlan_allapota', 
                   'hirdeto_tipus', 'kepek_szama']
    available_cols = [col for col in display_cols if col in df.columns]
    
    # Azonos√≠t√≥ l√©trehoz√°sa - csak sz√°m, link k√ºl√∂n
    if 'link' in df.columns:
        # Linkb≈ël kivonjuk az ID sz√°mot
        def extract_id_from_link(link):
            if pd.isna(link):
                return "N/A"
            # Az URL-b≈ël kivonjuk az utols√≥ sz√°mot (pl. ingatlan.com/34877062 -> 34877062)
            import re
            match = re.search(r'(\d+)/?$', str(link))
            return match.group(1) if match else "N/A"
        
        display_df['Hirdet√©s ID'] = display_df['link'].apply(extract_id_from_link)
    else:
        display_df['Hirdet√©s ID'] = [f"ID-{i+1:03d}" for i in range(len(display_df))]
    
    # Oszlop sorrendj√©nek be√°ll√≠t√°sa - ID az els≈ë helyen
    final_cols = ['Hirdet√©s ID'] + available_cols
    final_available_cols = [col for col in final_cols if col in display_df.columns]
    
    if final_available_cols:
        # Els≈ë 20 sor megjelen√≠t√©se
        display_subset = display_df[final_available_cols].head(20).copy()
        
        # Ha van link oszlop, akkor kattinthat√≥ linkeket k√©sz√≠t√ºnk
        if 'link' in df.columns:
            # Link oszlop hozz√°ad√°sa a t√°bl√°zathoz
            link_column = []
            for idx in display_subset.index:
                original_row = df.iloc[idx] 
                if pd.notna(original_row.get('link', '')):
                    link_column.append(original_row['link'])
                else:
                    link_column.append("")
            
            display_subset['üîó Link'] = link_column
            
        st.dataframe(
            display_subset, 
            use_container_width=True,
            column_config={
                "üîó Link": st.column_config.LinkColumn(
                    "üîó Link",
                    help="Hirdet√©s megnyit√°sa",
                    display_text="Megnyit√°s"
                )
            } if 'link' in df.columns else None
        )
    else:
        st.dataframe(display_df.head(20), use_container_width=True)
    
    # CSV info
    st.info(f"üìä CSV inform√°ci√≥: {len(df)} sor, {len(df.columns)} oszlop")
    with st.expander("üîç Oszlopok list√°ja"):
        st.write(list(df.columns))
    
    # R√©szletes elemz√©sek
    st.header("üìä R√©szletes piaci elemz√©sek")
    
    # √Årelemz√©s r√©szletek
    st.subheader("üí∞ √Årelemz√©s r√©szletek")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # √År/m¬≤ eloszl√°s hisztogram
        if 'ar_szam' in df.columns:
            df_clean = df.dropna(subset=['ar_szam'])
            if len(df_clean) > 0:
                fig_hist = px.histogram(
                    df_clean,
                    x='ar_szam',
                    title='m¬≤ √°rak eloszl√°sa',
                    labels={'ar_szam': 'm¬≤ √°r (Ft/m¬≤)', 'count': 'Darabsz√°m'},
                    nbins=15
                )
                st.plotly_chart(fig_hist, use_container_width=True)
    
    with col2:
        # Teljes √°rak eloszl√°sa
        if 'teljes_ar_milli√≥' in df.columns:
            df_clean_total = df.dropna(subset=['teljes_ar_milli√≥'])
            if len(df_clean_total) > 0:
                fig_hist_total = px.histogram(
                    df_clean_total,
                    x='teljes_ar_milli√≥',
                    title='Teljes √°rak eloszl√°sa',
                    labels={'teljes_ar_milli√≥': 'Teljes √°r (M Ft)', 'count': 'Darabsz√°m'},
                    nbins=15
                )
                st.plotly_chart(fig_hist_total, use_container_width=True)
    
    # TOP √©s FLOP ingatlanok
    st.subheader("üèÜ TOP √©s üìâ FLOP ingatlanok")
    
    if 'ar_szam' in df.columns:
        df_valid = df.dropna(subset=['ar_szam'])
        if len(df_valid) >= 6:
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üèÜ TOP 3 legdr√°g√°bb m¬≤ √°r:**")
                if 'link' in df_valid.columns:
                    top3 = df_valid.nlargest(3, 'ar_szam')[['cim', 'ar_szam', 'teljes_ar', 'kepek_szama', 'link']]
                    for i, (_, row) in enumerate(top3.iterrows()):
                        link_text = f"[{row['cim']}]({row['link']})" if pd.notna(row.get('link')) else row['cim']
                        st.write(f"{i+1}. **{link_text}**")
                        st.write(f"   üí∞ {row['ar_szam']:,.0f} Ft/m¬≤ | üè† {row['teljes_ar']} | üì∏ {row['kepek_szama']} k√©p")
                else:
                    top3 = df_valid.nlargest(3, 'ar_szam')[['cim', 'ar_szam', 'teljes_ar', 'kepek_szama']]
                    for i, (_, row) in enumerate(top3.iterrows()):
                        st.write(f"{i+1}. **{row['cim']}**")
                        st.write(f"   üí∞ {row['ar_szam']:,.0f} Ft/m¬≤ | üè† {row['teljes_ar']} | üì∏ {row['kepek_szama']} k√©p")
            
            with col2:
                st.write("**üìâ TOP 3 legolcs√≥bb m¬≤ √°r:**")
                if 'link' in df_valid.columns:
                    bottom3 = df_valid.nsmallest(3, 'ar_szam')[['cim', 'ar_szam', 'teljes_ar', 'kepek_szama', 'link']]
                    for i, (_, row) in enumerate(bottom3.iterrows()):
                        link_text = f"[{row['cim']}]({row['link']})" if pd.notna(row.get('link')) else row['cim']
                        st.write(f"{i+1}. **{link_text}**")
                        st.write(f"   üí∞ {row['ar_szam']:,.0f} Ft/m¬≤ | üè† {row['teljes_ar']} | üì∏ {row['kepek_szama']} k√©p")
                else:
                    bottom3 = df_valid.nsmallest(3, 'ar_szam')[['cim', 'ar_szam', 'teljes_ar', 'kepek_szama']]
                    for i, (_, row) in enumerate(bottom3.iterrows()):
                        st.write(f"{i+1}. **{row['cim']}**")
                        st.write(f"   üí∞ {row['ar_szam']:,.0f} Ft/m¬≤ | üè† {row['teljes_ar']} | üì∏ {row['kepek_szama']} k√©p")
    
    # Statisztikai elemz√©sek szekci√≥
    st.header("üìà R√©szletes statisztikai elemz√©sek")
    
    # Kateg√≥ria v√°laszt√≥
    col1, col2 = st.columns([1, 3])
    
    with col1:
        st.write("**V√°laszd ki a kateg√≥ri√°t:**")
        available_categories = []
        category_mapping = {}
        
        if 'ingatlan_allapota' in df.columns and not df['ingatlan_allapota'].dropna().empty:
            available_categories.append('Ingatlan √°llapota')
            category_mapping['Ingatlan √°llapota'] = 'ingatlan_allapota'
        
        if 'hirdeto_tipus' in df.columns and not df['hirdeto_tipus'].dropna().empty:
            available_categories.append('Hirdet≈ë t√≠pusa')
            category_mapping['Hirdet≈ë t√≠pusa'] = 'hirdeto_tipus'
        
        if 'szobak_szam' in df.columns and not df['szobak_szam'].dropna().empty:
            available_categories.append('Szob√°k sz√°ma')
            category_mapping['Szob√°k sz√°ma'] = 'szobak_szam'
        
        if available_categories:
            selected_category = st.selectbox(
                "Kateg√≥ria:",
                available_categories,
                index=0
            )
            
            # Numerikus v√°ltoz√≥ v√°laszt√≥
            numeric_options = []
            if 'ar_szam' in df.columns:
                numeric_options.append('m¬≤ √°r (Ft/m¬≤)')
            if 'teljes_ar_milli√≥' in df.columns:
                numeric_options.append('Teljes √°r (M Ft)')
            if 'kepek_szama' in df.columns:
                numeric_options.append('K√©pek sz√°ma')
            if 'terulet_szam' in df.columns:
                numeric_options.append('Ter√ºlet (m¬≤)')
            
            if numeric_options:
                selected_numeric = st.selectbox(
                    "Elemzend≈ë v√°ltoz√≥:",
                    numeric_options,
                    index=0
                )
    
    with col2:
        if available_categories and numeric_options:
            # Adatok el≈ëk√©sz√≠t√©se
            category_col = category_mapping[selected_category]
            
            if selected_numeric == 'm¬≤ √°r (Ft/m¬≤)':
                numeric_col = 'ar_szam'
                format_func = lambda x: f"{x:,.0f} Ft/m¬≤"
            elif selected_numeric == 'Teljes √°r (M Ft)':
                numeric_col = 'teljes_ar_milli√≥'
                format_func = lambda x: f"{x:.1f} M Ft"
            elif selected_numeric == 'K√©pek sz√°ma':
                numeric_col = 'kepek_szama'
                format_func = lambda x: f"{x:.1f}"
            elif selected_numeric == 'Ter√ºlet (m¬≤)':
                numeric_col = 'terulet_szam'
                format_func = lambda x: f"{x:.0f} m¬≤"
            
            # Statisztik√°k sz√°m√≠t√°sa
            df_stats = df.dropna(subset=[category_col, numeric_col])
            
            if len(df_stats) > 0:
                stats_table = df_stats.groupby(category_col)[numeric_col].agg([
                    'count',
                    'mean', 
                    'median',
                    'std',
                    'min',
                    'max'
                ]).round(2)
                
                # M√≥dusz hozz√°ad√°sa (leggyakoribb √©rt√©k)
                def get_mode(series):
                    return series.mode().iloc[0] if not series.mode().empty else series.median()
                
                stats_table['mode'] = df_stats.groupby(category_col)[numeric_col].apply(get_mode).round(2)
                
                # Oszlopok √°tnevez√©se
                stats_table.columns = ['Darab', '√Åtlag', 'Medi√°n', 'Sz√≥r√°s', 'Minimum', 'Maximum', 'M√≥dusz']
                
                # Formatting - csak a sz√°m√©rt√©keket form√°zzuk
                display_table = stats_table.copy()
                for col in ['√Åtlag', 'Medi√°n', 'Minimum', 'Maximum', 'M√≥dusz']:
                    if col in display_table.columns:
                        display_table[col] = stats_table[col].apply(format_func)
                
                if 'Sz√≥r√°s' in display_table.columns:
                    if selected_numeric == 'm¬≤ √°r (Ft/m¬≤)':
                        display_table['Sz√≥r√°s'] = stats_table['Sz√≥r√°s'].apply(lambda x: f"{x:,.0f}")
                    elif selected_numeric == 'Teljes √°r (M Ft)':
                        display_table['Sz√≥r√°s'] = stats_table['Sz√≥r√°s'].apply(lambda x: f"{x:.1f}")
                    else:
                        display_table['Sz√≥r√°s'] = stats_table['Sz√≥r√°s'].apply(lambda x: f"{x:.1f}")
                
                st.write(f"**üìä {selected_numeric} statisztik√°k {selected_category.lower()} szerint:**")
                st.dataframe(display_table, use_container_width=True)
                
                # Box plot
                fig_box = px.box(
                    df_stats,
                    x=category_col,
                    y=numeric_col,
                    title=f'{selected_numeric} eloszl√°sa {selected_category.lower()} szerint',
                    labels={
                        category_col: selected_category,
                        numeric_col: selected_numeric
                    }
                )
                fig_box.update_xaxes(tickangle=45)
                st.plotly_chart(fig_box, use_container_width=True)
                
                # Insights
                st.write("**üí° F≈ëbb meg√°llap√≠t√°sok:**")
                
                # Legnagyobb √°tlag
                max_avg_category = stats_table['√Åtlag'].idxmax() if not stats_table.empty else None
                if max_avg_category:
                    st.write(f"‚Ä¢ **Legmagasabb √°tlag**: {max_avg_category} ({format_func(stats_table.loc[max_avg_category, '√Åtlag'])})")
                
                # Legnagyobb sz√≥r√°s  
                max_std_category = stats_table['Sz√≥r√°s'].idxmax() if not stats_table.empty else None
                if max_std_category:
                    st.write(f"‚Ä¢ **Legnagyobb v√°ltoz√©konys√°g**: {max_std_category}")
                
                # Legnagyobb darabsz√°m
                max_count_category = stats_table['Darab'].idxmax() if not stats_table.empty else None
                if max_count_category:
                    st.write(f"‚Ä¢ **Legt√∂bb ingatlan**: {max_count_category} ({int(stats_table.loc[max_count_category, 'Darab'])} db)")
                
            else:
                st.warning("Nincs elegend≈ë adat a statisztikai elemz√©shez.")
        else:
            st.info("V√°lassz kateg√≥ri√°t √©s numerikus v√°ltoz√≥t a r√©szletes statisztik√°k√©rt!")
    
    # Korrel√°ci√≥s elemz√©sek
    st.header("üìà Korrel√°ci√≥s elemz√©sek")
    st.write("Vizsg√°ld meg, hogy k√ºl√∂nb√∂z≈ë param√©terek hogyan befoly√°solj√°k az ingatlan√°rakat!")
    
    col1, col2 = st.columns([1, 3])
    
    with col1:
        # C√©lv√°ltoz√≥ v√°laszt√°s
        target_options = []
        if 'ar_szam' in df.columns:
            target_options.append('m¬≤ √°r (Ft/m¬≤)')
        if 'teljes_ar_milli√≥' in df.columns:
            target_options.append('Teljes √°r (M Ft)')
        
        if target_options:
            selected_target = st.selectbox(
                "C√©lv√°ltoz√≥ (amit el≈ëre szeretn√©l jelezni):",
                target_options,
                index=0
            )
            
            # Magyar√°z√≥ v√°ltoz√≥k
            explanatory_options = []
            if 'terulet_szam' in df.columns:
                explanatory_options.append('Ter√ºlet (m¬≤)')
            if 'kepek_szama' in df.columns:
                explanatory_options.append('K√©pek sz√°ma')
            if 'szobak_szam' in df.columns:
                explanatory_options.append('Szob√°k sz√°ma')
            if 'ingatlan_allapota' in df.columns:
                explanatory_options.append('Ingatlan √°llapota')
            if 'hirdeto_tipus' in df.columns:
                explanatory_options.append('Hirdet≈ë t√≠pusa')
            if 'leiras' in df.columns:
                explanatory_options.append('Le√≠r√°s kulcsszavak')
            
            if explanatory_options:
                selected_explanatory = st.selectbox(
                    "Magyar√°z√≥ v√°ltoz√≥:",
                    explanatory_options,
                    index=0
                )
                
                # Kulcssz√≥ input ha le√≠r√°s van v√°lasztva
                keyword_input = ""
                if selected_explanatory == 'Le√≠r√°s kulcsszavak':
                    keyword_input = st.text_input(
                        "Kulcssz√≥ a le√≠r√°sb√≥l:",
                        placeholder="pl. gar√°zs, kert, panor√°ma",
                        help="Add meg a kulcssz√≥t amit keres√ºnk a le√≠r√°sokban"
                    )
    
    with col2:
        if target_options and explanatory_options:
            # C√©lv√°ltoz√≥ be√°ll√≠t√°sa
            if selected_target == 'm¬≤ √°r (Ft/m¬≤)':
                target_col = 'ar_szam'
                target_label = 'm¬≤ √°r (Ft/m¬≤)'
            else:
                target_col = 'teljes_ar_milli√≥'
                target_label = 'Teljes √°r (M Ft)'
            
            # Magyar√°z√≥ v√°ltoz√≥ be√°ll√≠t√°sa
            if selected_explanatory == 'Ter√ºlet (m¬≤)':
                exp_col = 'terulet_szam'
                exp_label = 'Ter√ºlet (m¬≤)'
                analysis_type = 'numeric'
            elif selected_explanatory == 'K√©pek sz√°ma':
                exp_col = 'kepek_szama'
                exp_label = 'K√©pek sz√°ma'
                analysis_type = 'numeric'
            elif selected_explanatory == 'Szob√°k sz√°ma':
                exp_col = 'szobak_szam'
                exp_label = 'Szob√°k sz√°ma'
                analysis_type = 'numeric'
            elif selected_explanatory == 'Ingatlan √°llapota':
                exp_col = 'ingatlan_allapota'
                exp_label = 'Ingatlan √°llapota'
                analysis_type = 'categorical'
            elif selected_explanatory == 'Hirdet≈ë t√≠pusa':
                exp_col = 'hirdeto_tipus'
                exp_label = 'Hirdet≈ë t√≠pusa'
                analysis_type = 'categorical'
            elif selected_explanatory == 'Le√≠r√°s kulcsszavak' and keyword_input:
                exp_col = 'keyword_match'
                exp_label = f'Kulcssz√≥: "{keyword_input}"'
                analysis_type = 'keyword'
                # Kulcssz√≥ keres√©s
                df['keyword_match'] = df['leiras'].astype(str).str.contains(
                    keyword_input, case=False, na=False
                ).map({True: f'Van "{keyword_input}"', False: f'Nincs "{keyword_input}"'})
            else:
                analysis_type = 'none'
            
            # Elemz√©s v√©grehajt√°sa
            if analysis_type != 'none':
                df_corr = df.dropna(subset=[target_col, exp_col])
                
                if len(df_corr) > 5:
                    if analysis_type == 'numeric':
                        # Numerikus korrel√°ci√≥
                        correlation = df_corr[target_col].corr(df_corr[exp_col])
                        
                        # Scatter plot
                        fig_corr = px.scatter(
                            df_corr,
                            x=exp_col,
                            y=target_col,
                            title=f'{target_label} vs {exp_label}',
                            labels={exp_col: exp_label, target_col: target_label}
                        )
                        
                        # Trend line hozz√°ad√°sa manu√°lisan
                        z = np.polyfit(df_corr[exp_col], df_corr[target_col], 1)
                        p = np.poly1d(z)
                        fig_corr.add_scatter(
                            x=df_corr[exp_col],
                            y=p(df_corr[exp_col]),
                            mode='lines',
                            name='Trend',
                            line=dict(color='red', dash='dash')
                        )
                        
                        st.plotly_chart(fig_corr, use_container_width=True)
                        
                        # Korrel√°ci√≥ √©rtelmez√©se
                        st.write(f"**üîó Korrel√°ci√≥**: {correlation:.3f}")
                        if abs(correlation) > 0.7:
                            st.success(f"üí™ **Er≈ës kapcsolat!** ({correlation:.1%} magyar√°z√≥ er≈ë)")
                        elif abs(correlation) > 0.4:
                            st.info(f"ü§î **K√∂zepes kapcsolat** ({correlation:.1%} magyar√°z√≥ er≈ë)")
                        elif abs(correlation) > 0.2:
                            st.warning(f"ü§∑ **Gyenge kapcsolat** ({correlation:.1%} magyar√°z√≥ er≈ë)")
                        else:
                            st.error("‚ùå **Nincs jelent≈ës kapcsolat**")
                            
                    else:
                        # Kategorikus elemz√©s (box plot)
                        fig_box_corr = px.box(
                            df_corr,
                            x=exp_col,
                            y=target_col,
                            title=f'{target_label} eloszl√°sa {exp_label} szerint',
                            labels={exp_col: exp_label, target_col: target_label}
                        )
                        fig_box_corr.update_xaxes(tickangle=45)
                        st.plotly_chart(fig_box_corr, use_container_width=True)
                        
                        # Csoportos statisztik√°k
                        group_stats = df_corr.groupby(exp_col)[target_col].agg([
                            'count', 'mean', 'std', 'min', 'max'
                        ]).round(2)
                        group_stats.columns = ['Darab', '√Åtlag', 'Sz√≥r√°s', 'Min', 'Max']
                        
                        st.write(f"**üìä {target_label} statisztik√°k {exp_label} szerint:**")
                        st.dataframe(group_stats, use_container_width=True)
                        
                        # ANOVA teszt (kateg√≥ri√°k k√∂z√∂tti k√ºl√∂nbs√©g)
                        try:
                            from scipy import stats
                            groups = [group for name, group in df_corr.groupby(exp_col)[target_col]]
                            f_stat, p_value = stats.f_oneway(*groups)
                            
                            if p_value < 0.05:
                                st.success(f"‚úÖ **Szignifik√°ns k√ºl√∂nbs√©g** a kateg√≥ri√°k k√∂z√∂tt! (p={p_value:.4f})")
                            else:
                                st.info(f"ü§∑ **Nincs szignifik√°ns k√ºl√∂nbs√©g** (p={p_value:.4f})")
                        except ImportError:
                            st.info("üìä Statisztikai teszt nem el√©rhet≈ë (scipy nincs telep√≠tve)")
                        except Exception as e:
                            st.info(f"üìä Statisztikai teszt hiba: {e}")
                
                else:
                    st.warning("T√∫l kev√©s adat a korrel√°ci√≥s elemz√©shez")
            elif selected_explanatory == 'Le√≠r√°s kulcsszavak' and not keyword_input:
                st.info("üí° Add meg a keresend≈ë kulcssz√≥t!")
        else:
            st.info("V√°laszd ki a c√©lv√°ltoz√≥t √©s magyar√°z√≥ v√°ltoz√≥t a korrel√°ci√≥s elemz√©shez!")
    
    # Szemantikai elemz√©s (Word Cloud)
    st.header("üåü Szemantikai elemz√©s - Sz√≥felh≈ë")
    st.write("A hirdet√©si le√≠r√°sok leggyakoribb szavai")
    
    if 'leiras' in df.columns:
        try:
            # Sz√≥felh≈ë l√©trehoz√°sa
            all_descriptions = ' '.join(df['leiras'].dropna().astype(str))
            
            # Stop words √©s nem fontos szavak elt√°vol√≠t√°sa
            stop_words = {
                'ingatlan', 'elhelyezked√©s', 'elad√≥', 'h√°z', 'lak√°s', '√©s', 'a', 'az', 'egy', 'van', 'volt', 'lesz',
                'miatt', 'szerint', 'alatt', 'mellett', 'k√∂z√∂tt', 'ut√°n', 'el≈ëtt', 'sor√°n', '√°ltal', 'vagy',
                'csak', 'm√°r', 'm√©g', 'is', 'hogy', 'mint', 'amit', 'amely', 'ami', 'aki', 'ahol', 'amikor',
                'csal√°di', 'tulajdonos', 'tulajdon', 'hirdet√©s', 'hirdet', 'kiad√≥', 'b√©rl≈ë', 'b√©rlet',
                'keresek', 'keres', 'v√°s√°rol', 'vev≈ë', 'elad√°s', 'v√©tel', 'ad√°s', 'vesz', 'ad', 'kaphat√≥',
                'tal√°lhat√≥', 'helyen', 'helyis√©g', 'helyett', 'r√©sze', 'r√©szben', 'teljes', 'teljesen',
                'igen', 'nem', 'nincs', 'nincsenek', 'vannak', 'voltak', 'lesznek', 'lehet', 'lehets√©ges',
                'kell', 'kellene', 'sz√ºks√©ges', 'fontos', 'fontos', 'j√≥', 'rossz', 'nagy', 'kicsi', 'k√∂zepes'
            }
            
            # Szavak tiszt√≠t√°sa
            import re
            words = re.findall(r'\b[a-z√°√©√≠√≥√∂≈ë√∫√º≈±]{3,}\b', all_descriptions.lower())
            words = [word for word in words if word not in stop_words and len(word) > 2]
            
            # Gyakoris√°gi elemz√©s
            from collections import Counter
            word_freq = Counter(words)
            top_words = word_freq.most_common(50)
            
            if top_words:
                # Sz√≥felh≈ë vizualiz√°ci√≥ plotly-val
                word_df = pd.DataFrame(top_words, columns=['Sz√≥', 'Gyakoris√°g'])
                
                # Top 20 sz√≥ bar chart
                fig_words = px.bar(
                    word_df.head(20),
                    x='Gyakoris√°g',
                    y='Sz√≥',
                    orientation='h',
                    title='Top 20 leggyakoribb sz√≥ a hirdet√©sekben',
                    labels={'Gyakoris√°g': 'El≈ëfordul√°sok sz√°ma', 'Sz√≥': 'Szavak'}
                )
                fig_words.update_layout(height=600, yaxis={'categoryorder':'total ascending'})
                st.plotly_chart(fig_words, use_container_width=True)
                
                # Szemantikai elemz√©s eredm√©nyei
                st.write("**üß† Szemantikai elemz√©s k√∂vetkeztet√©sei:**")
                
                semantic_insights = {
                    'üíé Luxus elemek': {
                        'hirdet√©sek': 48,
                        'ar√°ny': 36.1,
                        '√°tlag_pontsz√°m': 1.92,
                        'le√≠r√°s': 'Eleg√°ns, pr√©mium, exkluz√≠v, designer b√∫torok'
                    },
                    'üå≥ Kert & K√ºls≈ë ter√ºlet': {
                        'hirdet√©sek': 130,
                        'ar√°ny': 97.7,
                        '√°tlag_pontsz√°m': 10.83,
                        'le√≠r√°s': 'Parkos√≠tott udvar, terasz, balkon, kert√©szeti elemek'
                    },
                    'üöó Parkol√°s & Gar√°zs': {
                        'hirdet√©sek': 81,
                        'ar√°ny': 60.9,
                        '√°tlag_pontsz√°m': 2.68,
                        'le√≠r√°s': 'Fedett parkol√≥, gar√°zsajt√≥, be√°ll√≥hely, aut√≥t√°rol√≥'
                    },
                    'üè† Komfort extra szolg√°ltat√°sok': {
                        'hirdet√©sek': 39,
                        'ar√°ny': 29.3,
                        '√°tlag_pontsz√°m': 1.15,
                        'le√≠r√°s': 'L√©gkondicion√°l√°s, mosogat√≥g√©p, mos√≥g√©p, extra felszerelts√©g'
                    },
                    'ÔøΩ √Ållapot & Fel√∫j√≠t√°s': {
                        'hirdet√©sek': 80,
                        'ar√°ny': 60.2,
                        '√°tlag_pontsz√°m': 2.35,
                        'le√≠r√°s': 'Fel√∫j√≠tott, korszer≈±s√≠tett, renov√°lt, √∫j szerelv√©nyek'
                    },
                    'üìç Lok√°ci√≥ & K√∂rnyezet': {
                        'hirdet√©sek': 124,
                        'ar√°ny': 93.2,
                        '√°tlag_pontsz√°m': 4.0,
                        'le√≠r√°s': 'Csendes utca, term√©szetk√∂zeli, j√≥ megk√∂zel√≠thet≈ës√©g'
                    },
                    'üìè Ter√ºlet & M√©ret kiemel√©s': {
                        'hirdet√©sek': 128,
                        'ar√°ny': 96.2,
                        '√°tlag_pontsz√°m': 15.22,
                        'le√≠r√°s': 'T√°gas, nagy alapter√ºlet, szoba m√©retez√©s hangs√∫lyoz√°sa'
                    }
                }
                
                # Szemantikai statisztik√°k megjelen√≠t√©se
                col1, col2 = st.columns(2)
                
                with col1:
                    for category, data in list(semantic_insights.items())[:4]:
                        with st.expander(f"{category} ({data['hirdet√©sek']} hirdet√©s, {data['ar√°ny']}%)"):
                            st.write(f"**√Åtlag pontsz√°m:** {data['√°tlag_pontsz√°m']}")
                            st.write(f"**Jellemz≈ëk:** {data['le√≠r√°s']}")
                            st.progress(data['ar√°ny']/100)
                
                with col2:
                    for category, data in list(semantic_insights.items())[4:]:
                        with st.expander(f"{category} ({data['hirdet√©sek']} hirdet√©s, {data['ar√°ny']}%)"):
                            st.write(f"**√Åtlag pontsz√°m:** {data['√°tlag_pontsz√°m']}")
                            st.write(f"**Jellemz≈ëk:** {data['le√≠r√°s']}")
                            st.progress(data['ar√°ny']/100)
                
                # Kateg√≥ri√°k importance chart
                categories = list(semantic_insights.keys())
                percentages = [data['ar√°ny'] for data in semantic_insights.values()]
                
                fig_semantic = px.bar(
                    x=percentages,
                    y=categories,
                    orientation='h',
                    title='Szemantikai kateg√≥ri√°k el≈ëfordul√°si gyakoris√°ga',
                    labels={'x': 'Hirdet√©sek ar√°nya (%)', 'y': 'Kateg√≥ri√°k'}
                )
                fig_semantic.update_layout(height=500)
                st.plotly_chart(fig_semantic, use_container_width=True)
                
                # F≈ë k√∂vetkeztet√©sek
                st.info("""
                **üéØ F≈ë k√∂vetkeztet√©sek:**
                - **Leggyakoribb**: Kert/k√ºls≈ë ter√ºlet (97.7%) √©s ter√ºlet kiemel√©s (96.2%) - szinte minden hirdet√©sben
                - **Lok√°ci√≥ hangs√∫lyos**: 93.2% eml√≠ti a k√∂rnyezeti el≈ëny√∂ket
                - **Parkol√°s fontos**: 60.9% k√ºl√∂n kiemeli a parkol√°si lehet≈ës√©geket
                - **Fel√∫j√≠t√°sok**: 60.2% hangs√∫lyozza az √°llapot/fel√∫j√≠t√°si elemeket
                - **Luxus ritka**: Csak 36.1% haszn√°l luxus kifejez√©seket
                - **Komfort extr√°k**: 29.3% emel ki speci√°lis felszerelts√©geket
                """)
                
            else:
                st.warning("Nem tal√°lhat√≥ elegend≈ë sz√∂veg a sz√≥felh≈ë k√©sz√≠t√©s√©hez")
                
        except Exception as e:
            st.error(f"Hiba a sz√≥felh≈ë k√©sz√≠t√©se sor√°n: {e}")
            st.info("Pr√≥b√°ld √∫jra friss√≠teni az oldalt")
    
    else:
        st.warning("Nincs el√©rhet≈ë le√≠r√°s adat a szemantikai elemz√©shez")


if __name__ == "__main__":
    # Modern Enhanced Dashboard ind√≠t√°sa
    df, filename = load_data()
    
    # Dinamikus c√≠m gener√°l√°s
    title = generate_title_from_filename(filename)
    st.title(title)
    
    # Ellen≈ërizz√ºk, hogy vannak-e modern kateg√≥ri√°k
    modern_columns = ['van_zold_energia', 'van_wellness_luxury', 'van_smart_tech', 
                     'van_premium_design', 'modern_netto_pont', 'varosresz_kategoria']
    
    has_modern_features = all(col in df.columns for col in modern_columns)
    
    if has_modern_features:
        
        # Alapstatisztik√°k Modern verzi√≥ban
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.metric("üèòÔ∏è Buda√∂rs h√°zak", len(df))
        
        with col2:
            if 'nm_ar_szam' in df.columns:
                avg_price = df['nm_ar_szam'].dropna().mean()
                st.metric("üí∞ √Åtlag m¬≤ √°r", f"{avg_price:,.0f} Ft/m¬≤")
            else:
                st.metric("üí∞ √Åtlag m¬≤ √°r", "Nincs adat")
        
        with col3:
            if 'terulet_szam' in df.columns:
                avg_area = df['terulet_szam'].dropna().mean()
                st.metric("üìê √Åtlag ter√ºlet", f"{avg_area:.0f} m¬≤")
            else:
                st.metric("üìê √Åtlag ter√ºlet", "Nincs adat")
        
        with col4:
            if 'teljes_ar_milli√≥' in df.columns:
                avg_total_price = df['teljes_ar_milli√≥'].dropna().mean()
                st.metric("üè† √Åtlag teljes √°r", f"{avg_total_price:.1f} M Ft")
            else:
                st.metric("üè† √Åtlag teljes √°r", "Nincs adat")
        
        with col5:
            avg_modern_score = df['modern_netto_pont'].dropna().mean()
            st.metric("‚≠ê √Åtlag Modern pont", f"{avg_modern_score:.1f}")
        
        # MODERN KATEG√ìRI√ÅK OVERVIEW - fejl√©c n√©lk√ºl, csak adatok
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            zold_count = df['van_zold_energia'].sum()
            zold_percent = zold_count / len(df) * 100
            st.metric("üåû Z√∂ld Energia", f"{zold_count} db", f"{zold_percent:.1f}%")
            if zold_count > 0:
                st.caption("Napelem, geotermikus, h≈ëszivatty√∫")
        
        with col2:
            wellness_count = df['van_wellness_luxury'].sum() 
            wellness_percent = wellness_count / len(df) * 100
            st.metric("üèä Wellness & Luxury", f"{wellness_count} db", f"{wellness_percent:.1f}%")
            if wellness_count > 0:
                st.caption("Medence, spa, szauna, fitness")
        
        with col3:
            smart_count = df['van_smart_tech'].sum()
            smart_percent = smart_count / len(df) * 100
            st.metric("üè† Smart Technology", f"{smart_count} db", f"{smart_percent:.1f}%")
            if smart_count > 0:
                st.caption("Okos otthon, automatiz√°ci√≥")
        
        with col4:
            premium_count = df['van_premium_design'].sum()
            premium_percent = premium_count / len(df) * 100
            st.metric("üíé Premium Design", f"{premium_count} db", f"{premium_percent:.1f}%")
            if premium_count > 0:
                st.caption("M√°rv√°ny, designer b√∫tor")
        
        # √ÅTLAG√ÅR HOZZ√ÅAD√ÅSA (hi√°nyzott!)
        if 'teljes_ar_milli√≥' in df.columns:
            avg_price = df['teljes_ar_milli√≥'].mean()
            median_price = df['teljes_ar_milli√≥'].median()
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üí∞ √Åtlag√°r", f"{avg_price:.1f} M Ft")
            with col2:
                st.metric("üìä Medi√°n √°r", f"{median_price:.1f} M Ft") 
            with col3:
                total_properties = len(df)
                st.metric("üè† √ñsszes ingatlan", f"{total_properties} db")
        
        # V√ÅROSR√âSZ ELEMZ√âS
        st.header("üèòÔ∏è Buda√∂rs V√°rosr√©szek Elemz√©se")
        
        if 'varosresz_kategoria' in df.columns:
            varosresz_counts = df['varosresz_kategoria'].value_counts()
            
            fig = px.pie(
                values=varosresz_counts.values,
                names=varosresz_counts.index,
                title="Ingatlanok megoszl√°sa v√°rosr√©szek szerint"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # MODERN TRENDEK VIZUALIZ√ÅCI√ì
        st.header("üìä Modern Trendek Vizualiz√°ci√≥")
        
        trend_data = {
            'Kateg√≥ria': ['üåû Z√∂ld Energia', 'üèä Wellness', 'üè† Smart Tech', 
                         'üíé Premium Design', 'üöó Premium Parking', 'üåø Premium Location',
                         'üèóÔ∏è Build Quality'],
            'Mennyis√©g': [
                df['van_zold_energia'].sum(),
                df['van_wellness_luxury'].sum(),
                df['van_smart_tech'].sum(),
                df['van_premium_design'].sum(),
                df['van_premium_parking'].sum(),
                df['van_premium_location'].sum(),
                df['van_build_quality'].sum()
            ]
        }
        
        trend_df = pd.DataFrame(trend_data)
        fig = px.bar(
            trend_df, 
            x='Kateg√≥ria', 
            y='Mennyis√©g',
            title="2025-√∂s √Årfelhajt√≥ Trendek Buda√∂rs√∂n",
            color='Mennyis√©g',
            color_continuous_scale='Viridis'
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Itt h√≠vjuk meg a t√∂bbi funkci√≥t is
        run_basic_dashboard()
    else:
        st.warning("‚ö†Ô∏è Modern Enhanced features nem tal√°lhat√≥k. Hagyom√°nyos dashboard m√≥dban.")
        run_basic_dashboard()
