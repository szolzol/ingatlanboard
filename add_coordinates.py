#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INGATLAN CSV KOORDIN√ÅTA B≈êV√çT≈ê
==============================

üéØ HASZN√ÅLAT:
python add_coordinates.py <csv_filename>

üìã P√âLDA:
python add_coordinates.py ingatlan_reszletes_kobany    # Koordin√°t√°k hozz√°ad√°sa
    result = add_coordinates_to_csv(csv_filename, api_key)
    
    if result:
        print(f"\nüéâ SIKERES KOORDIN√ÅTA HOZZ√ÅAD√ÅS!")
        print(f"üìÑ Eredeti f√°jl: {csv_filename}")
        print(f"üìÑ Koordin√°t√°s f√°jl: {result}")
        print(f"\nüí° Most m√°r haszn√°lhatod a dashboard gener√°l√°shoz:")
        print(f"   python generate_dashboard.py {result}")
    else:
        print("‚ùå Koordin√°ta hozz√°ad√°s sikertelen!")
        sys.exit(1)telep_20250822_093251.csv

‚ö° A script automatikusan:
1. Hozz√°adja a Google Maps koordin√°t√°kat (geo_latitude, geo_longitude, geo_address_from_api)
2. L√©trehozza a koordin√°t√°kkal b≈ëv√≠tett CSV f√°jlt
3. Megtartja az eredeti f√°jlstrukt√∫r√°t √©s oszlopsorrendet
"""

import pandas as pd
import googlemaps
import os
import sys
import time
import glob
from datetime import datetime

def load_env_file():
    """Egyszer≈± .env f√°jl bet√∂lt√©s dotenv n√©lk√ºl"""
    env_vars = {}
    try:
        if os.path.exists('.env'):
            with open('.env', 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        env_vars[key.strip()] = value.strip()
        return env_vars
    except Exception as e:
        print(f"‚ö†Ô∏è  .env f√°jl bet√∂lt√©si hiba: {e}")
        return {}

def verify_csv_exists(csv_filename):
    """CSV f√°jl l√©tez√©s√©nek ellen≈ërz√©se"""
    if not os.path.exists(csv_filename):
        print(f"‚ùå CSV f√°jl nem tal√°lhat√≥: {csv_filename}")
        
        # Keress√ºnk hasonl√≥ f√°jlokat
        base_name = csv_filename.split('_')[0] if '_' in csv_filename else csv_filename[:15]
        similar_files = glob.glob(f"ingatlan_*{base_name}*.csv")[:5]
        if similar_files:
            print(f"üîç Hasonl√≥ f√°jlok tal√°lhat√≥k:")
            for file in similar_files:
                print(f"   - {file}")
        return False
    return True

def check_existing_coordinates(df):
    """Ellen≈ërzi, hogy van-e m√°r koordin√°ta adat a CSV-ben"""
    coord_columns = ['geo_latitude', 'geo_longitude', 'geo_address_from_api']
    has_coords = all(col in df.columns for col in coord_columns)
    
    if has_coords:
        existing_coords = df['geo_latitude'].notna().sum()
        print(f"üìç Megl√©v≈ë koordin√°t√°k: {existing_coords}/{len(df)} rekord")
        return existing_coords
    else:
        print(f"üìç Nincs megl√©v≈ë koordin√°ta adat")
        return 0

def add_coordinates_to_csv(csv_file, api_key):
    """Koordin√°t√°k hozz√°ad√°sa a megadott CSV-hez - JAV√çTOTT verzi√≥"""
    
    print("üåç INGATLAN CSV KOORDIN√ÅTA B≈êV√çT≈ê")
    print("="*50)
    print(f"üìä CSV f√°jl: {csv_file}")
    
    # Google Maps API inicializ√°l√°s
    gmaps = googlemaps.Client(key=api_key)
    print("‚úÖ Google Maps API inicializ√°lva")
    
    # CSV f√°jl ellen≈ërz√©se
    if not verify_csv_exists(csv_file):
        return False
    
    # CSV bet√∂lt√©se
    try:
        df = pd.read_csv(csv_file, sep='|', encoding='utf-8-sig', on_bad_lines='skip')
        print(f"‚úÖ CSV bet√∂ltve: {len(df)} rekord")
        
        if df.empty:
            print("‚ùå A CSV f√°jl √ºres!")
            return False
            
    except Exception as e:
        print(f"‚ùå CSV bet√∂lt√©si hiba: {e}")
        return False
    
    # Megl√©v≈ë koordin√°t√°k ellen≈ërz√©se
    existing_coords = check_existing_coordinates(df)
    
    # Koordin√°ta oszlopok hozz√°ad√°sa, ha m√©g nincsenek
    if 'geo_latitude' not in df.columns:
        df['geo_latitude'] = None
    if 'geo_longitude' not in df.columns:
        df['geo_longitude'] = None
    if 'geo_address_from_api' not in df.columns:
        df['geo_address_from_api'] = None
    
    # C√≠met tartalmaz√≥ oszlop ellen≈ërz√©se
    if 'cim' not in df.columns:
        print("‚ùå Nincs 'cim' oszlop a CSV-ben!")
        return False
    
    # Koordin√°t√°k hozz√°ad√°sa
    successful_geocodes = 0
    failed_geocodes = 0
    skipped_geocodes = existing_coords
    
    print(f"\nüó∫Ô∏è Koordin√°ta geocoding ind√≠t√°sa...")
    print(f"   üìã Feldolgozand√≥ rekordok: {len(df)}")
    print(f"   üìç M√°r megl√©v≈ë koordin√°t√°k: {existing_coords}")
    print(f"   üÜï √öj geocoding sz√ºks√©ges: {len(df) - existing_coords}")
    
    for i, row in df.iterrows():
        # Ha m√°r van koordin√°ta, akkor kihagy√°s
        if pd.notna(row.get('geo_latitude')) and pd.notna(row.get('geo_longitude')):
            continue
            
        address = row['cim']
        print(f"   {i+1:3d}/{len(df)}: {address[:60]:<60}", end="")
        
        try:
            # Geocoding - Hungary-t hozz√°adjuk a pontoss√°g √©rdek√©ben
            search_address = f"{address}, Hungary"
            result = gmaps.geocode(search_address)
            
            if result and len(result) > 0:
                location = result[0]['geometry']['location']
                formatted_addr = result[0]['formatted_address']
                
                # Koordin√°t√°k ment√©se
                df.at[i, 'geo_latitude'] = location['lat']
                df.at[i, 'geo_longitude'] = location['lng'] 
                df.at[i, 'geo_address_from_api'] = formatted_addr
                
                print(f" ‚úÖ ({location['lat']:.6f}, {location['lng']:.6f})")
                successful_geocodes += 1
                
            else:
                print(f" ‚ùå Nincs tal√°lat")
                failed_geocodes += 1
                
        except Exception as e:
            print(f" ‚ùå Hiba: {str(e)[:30]}...")
            failed_geocodes += 1
        
        # Rate limiting - max 50 k√©r√©s/m√°sodperc (Google Maps limit)
        time.sleep(0.05)  # 20ms k√©sleltet√©s
        
        # Progressz jelent√©s minden 10. elemn√©l
        if (i + 1) % 10 == 0:
            progress = (i + 1) / len(df) * 100
            print(f"   üìä Halad√°s: {progress:.1f}% ({successful_geocodes} siker, {failed_geocodes} sikertelen)")
    
    print(f"\nÔøΩ GEOCODING EREDM√âNY:")
    print(f"   ‚úÖ Sikeres geocoding: {successful_geocodes}")
    print(f"   ‚ùå Sikertelen geocoding: {failed_geocodes}")
    print(f"   ‚è≠Ô∏è  Kihagyott (m√°r volt): {skipped_geocodes}")
    print(f"   üìà Sikeress√©gi ar√°ny: {successful_geocodes/(len(df)-skipped_geocodes)*100:.1f}%" if len(df)-skipped_geocodes > 0 else "   üìà Minden rekordnak m√°r volt koordin√°t√°ja")
    
    # Koordin√°t√°kkal b≈ëv√≠tett CSV ment√©se
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Output f√°jl n√©v gener√°l√°sa az input alapj√°n
    base_name = os.path.splitext(os.path.basename(csv_file))[0]
    
    # Ha m√°r koordin√°t√°s, akkor √∫j timestamp-pel
    if "_koordinatak_" in base_name:
        base_name = base_name.split("_koordinatak_")[0]
    
    output_file = f"{base_name}_koordinatak_{timestamp}.csv"
    
    try:
        # Eredeti oszlopsorrend megtart√°sa + koordin√°ta oszlopok a v√©g√©n
        original_columns = [col for col in df.columns if col not in ['geo_latitude', 'geo_longitude', 'geo_address_from_api']]
        coord_columns = ['geo_latitude', 'geo_longitude', 'geo_address_from_api']
        final_columns = original_columns + coord_columns
        
        # CSV ment√©se az eredeti form√°tumban (pipe separator)
        df[final_columns].to_csv(output_file, sep='|', encoding='utf-8-sig', index=False)
        print(f"\nüíæ Koordin√°t√°kkal b≈ëv√≠tett CSV mentve: {output_file}")
        
        # Ellen≈ërz√©s
        coord_count = df['geo_latitude'].notna().sum()
        success_rate = coord_count / len(df) * 100
        print(f"‚úÖ Ellen≈ërz√©s: {coord_count}/{len(df)} rekordban van koordin√°ta ({success_rate:.1f}%)")
        
        # F√°jlm√©ret info
        file_size = os.path.getsize(output_file) / 1024 / 1024  # MB
        print(f"üìÅ F√°jlm√©ret: {file_size:.2f} MB")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå CSV ment√©si hiba: {e}")
        return False

def main():
    """F≈ëalkalmaz√°s"""
    print("üåç GPS KOORDIN√ÅTA HOZZ√ÅAD√ì")
    print("=" * 50)
    
    # Argumentum ellen≈ërz√©s
    if len(sys.argv) != 2:
        print("‚ùå Haszn√°lat: python add_coordinates.py <csv_filename>")
        print("\nüìã P√©lda:")
        print("   python add_coordinates.py ingatlan_reszletes_kobanya_hegyi_lakotelep_20250822_093251.csv")
        print("\nüí° Megjegyz√©sek:")
        print("   - A GOOGLE_MAPS_API_KEY automatikusan bet√∂lt≈ëdik a .env f√°jlb√≥l")
        print("   - A script pipe (|) separ√°tor√∫ CSV f√°jlokat dolgoz fel")
        print("   - Csak azokhoz a rekordokhoz ad koordin√°t√°kat, amelyekhez m√©g nincs")
        sys.exit(1)
    
    csv_filename = sys.argv[1]
    
    # .env f√°jl bet√∂lt√©se
    env_vars = load_env_file()
    api_key = env_vars.get('GOOGLE_MAPS_API_KEY') or os.environ.get('GOOGLE_MAPS_API_KEY')
    
    if not api_key:
        print("‚ùå GOOGLE_MAPS_API_KEY nincs be√°ll√≠tva!")
        print("\nüîß Megold√°sok:")
        print("1. Hozz l√©tre .env f√°jlt a k√∂vetkez≈ë tartalommal:")
        print("   GOOGLE_MAPS_API_KEY=your_api_key_here")
        print("2. Vagy √°ll√≠tsd be environment v√°ltoz√≥ban:")
        print('   $env:GOOGLE_MAPS_API_KEY="your_api_key_here"')
        sys.exit(1)
    
    print(f"üóùÔ∏è  Google Maps API kulcs bet√∂ltve (.env f√°jlb√≥l: {'igen' if 'GOOGLE_MAPS_API_KEY' in env_vars else 'nem'})")
    
    # Koordin√°t√°k hozz√°ad√°sa
    result = add_coordinates_to_csv(csv_filename, api_key)
    
    if result:
        print(f"\nüéâ SIKERES KOORDIN√ÅTA HOZZ√ÅAD√ÅS!")
        print(f"üìÑ Eredeti f√°jl: {csv_filename}")
        print(f"ÔøΩ Koordin√°t√°s f√°jl: {result}")
        print(f"\nüí° Most m√°r haszn√°lhatod a dashboard gener√°l√°shoz:")
        print(f"   python generate_dashboard.py {result}")
    else:
        print("‚ùå Koordin√°ta hozz√°ad√°s sikertelen!")
        sys.exit(1)
if __name__ == "__main__":
    main()
