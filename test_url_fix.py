#!/usr/bin/env python3

import re
from urllib.parse import urlparse

# Tesztelj√ºk az URL tiszt√≠t√°si logik√°t
test_url = 'https://ingatlan.com/lista/elado+haz+budaors+4-szoba+80-500-mFt'

def _extract_location(url):
    """Lok√°ci√≥ kinyer√©se URL-b≈ël f√°jln√©v gener√°l√°s√°hoz - CSAK F√ñLDRAJZI HELYS√âG"""
    try:
        path = urlparse(url).path
        # Keres√©si r√©sz megtal√°l√°sa
        path_parts = path.split('/')
        search_part = ""
        
        for part in path_parts:
            if any(word in part for word in ['elado', 'kiado', 'berlet']):
                search_part = part
                break
        
        if not search_part and path_parts:
            search_part = path_parts[-1]
        
        # F√ñLDRAJZI LOK√ÅCI√ì KINYER√âSE
        # Elt√°vol√≠tjuk a t√≠pus √©s √°llapot sz≈±r≈ëket, csak a helys√©get hagyjuk meg
        location_only = search_part
        
        # Elt√°vol√≠tjuk az ingatlan t√≠pust (elado+haz, elado+lakas, stb.)
        location_only = re.sub(r'(elado|kiado|berlet)\+[^+]*\+?', '', location_only)
        
        # Elt√°vol√≠tjuk az √°llapot sz≈±r≈ëket
        allapot_szurok = [
            'uj_epitesu', 'ujszeru', 'felujitott', 'jo_allapot', 'kituno_allapot', 
            'kozepes_allapot', 'felujitando', 'rossz_allapot', 'bonthato',
            'uj-epitesu', 'jo-allapot', 'kituno-allapot', 'kozepes-allapot',
            'epitesu', 'ujszeru', 'felujitott', 'jo', 'allapot'
        ]
        
        for szuro in allapot_szurok:
            location_only = location_only.replace(f'+{szuro}', '').replace(f'{szuro}+', '').replace(szuro, '')
        
        # Speci√°lis "allapotu" kezel√©s - teljes elt√°vol√≠t√°s
        location_only = location_only.replace('jo-allapotu', '').replace('-allapotu', '').replace('allapotu', '')
        
        # Speci√°lis "uj" kezel√©s - csak akkor t√°vol√≠tsuk el, ha √∂n√°ll√≥ vagy √°llapot kontextusban
        # Ne t√°vol√≠tsuk el, ha r√©sze egy nagyobb sz√≥nak (pl. "ujorszagut")
        location_only = re.sub(r'(\+|^)uj(\+|$)', r'\1\2', location_only)  # Csak √∂n√°ll√≥ "uj"
        location_only = re.sub(r'\+uj(?=\+[a-z])', '+', location_only)  # "uj" + k√∂vetkez≈ë sz√≥ elej√©n
        
        # Marad√≥ "u" bet≈±k elt√°vol√≠t√°sa ha √∂n√°ll√≥ak
        location_only = re.sub(r'(\+|^)u(\+)', r'\1\2', location_only)  # √ñn√°ll√≥ "u" bet≈±
        
        # √År sz≈±r≈ëk elt√°vol√≠t√°sa (pl: 80-500-mFt, 80-500-mft, 100_200_m_ft)
        location_only = re.sub(r'\+?\d+[\-_]\d+[\-_]?m?[Ff]t\+?', '', location_only)
        location_only = re.sub(r'\+?\d+_\d+_m_ft\+?', '', location_only)
        location_only = re.sub(r'\+?\d+\-\d+\-m\-?ft\+?', '', location_only)
        location_only = re.sub(r'\+?\d+\-\d+\-mft\+?', '', location_only)
        
        # Szobasz√°m sz≈±r≈ëk elt√°vol√≠t√°sa (pl: 3-szoba, 4-szoba, 3-szoba-felett, 2-szoba-alatt)
        location_only = re.sub(r'\+?\d+[\-_]szoba[\-_]?(felett|alatt)?\+?', '', location_only)
        location_only = re.sub(r'\+?szoba[\-_]?(felett|alatt)?\+?', '', location_only)
        location_only = re.sub(r'\+?(felett|alatt)\+?', '', location_only)  # Marad√©k "felett", "alatt" szavak
        
        # Alapter√ºlet sz≈±r≈ëk elt√°vol√≠t√°sa (pl: 60-120-m2, 80-nm)
        location_only = re.sub(r'\+?\d+[\-_]\d+[\-_]?m2?\+?', '', location_only)
        location_only = re.sub(r'\+?\d+[\-_]nm\+?', '', location_only)
        location_only = re.sub(r'\+?\d+nm\+?', '', location_only)
        
        # √Ållapot-specifikus sz√°mok elt√°vol√≠t√°sa (pl. "20" csak ha √°r/m√©ret kontextusban)
        # DE: ne t√°vol√≠tsunk el minden sz√°mot, mert ker√ºletek is sz√°mok lehetnek
        # Helyette csak akkor t√°vol√≠tsunk el, ha m2, ft, szoba, nm kontextusban van
        location_only = re.sub(r'\+?\d{1,3}(?=[+_]?(m2?|ft|szoba|nm))\+?', '', location_only)
        
        # Dupla + jelek elt√°vol√≠t√°sa √©s tiszt√≠t√°s
        location_only = re.sub(r'\+{2,}', '+', location_only)
        location_only = location_only.strip('+')
        
        # Ha √ºres, akkor pr√≥b√°ljunk kivenni budapest/helys√©g r√©szeket
        if not location_only or len(location_only) < 3:
            # Eredeti search_part-b√≥l keress√ºk a budapest, ker√ºlet, vagy helys√©g r√©szeket
            helyseg_reszek = []
            parts = search_part.replace('+', ' ').replace('-', ' ').split()
            
            budapest_found = False
            for i, part in enumerate(parts):
                part_lower = part.lower()
                # Budapest vagy ker√ºlet
                if part_lower in ['budapest', 'bp']:
                    helyseg_reszek.append('budapest')
                    budapest_found = True
                elif 'kerulet' in part_lower or 'ker' in part_lower:
                    # El≈ëz≈ë r√©sz keres√©se (pl: ii, xiii, 12, stb.)
                    if i > 0:
                        prev_part = parts[i-1].lower()
                        if prev_part in ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii'] or prev_part.isdigit():
                            helyseg_reszek.append(f'{prev_part}_ker')
                    elif not budapest_found:
                        helyseg_reszek.append('kerulet')
                elif part_lower in ['budaors', 'buda√∂rs', 'erd', 'torokbalint', 't√∂r√∂kb√°lint', 'szentendre', 'godllo', 'g√∂d√∂ll≈ë', 'vac', 'v√°c', 'dunakeszi', 'pilisvorosvar', 'piliscsaba']:
                    helyseg_reszek.append(part_lower.replace('√∂', 'o').replace('≈ë', 'o').replace('√°', 'a').replace('√©', 'e'))
            
            if helyseg_reszek:
                location_only = '_'.join(helyseg_reszek)
            else:
                # Utols√≥ es√©ly: els≈ë 2-3 √©rtelmesnek t≈±n≈ë r√©sz
                meaningful_parts = []
                for part in parts[:4]:  # Els≈ë 4 r√©szt n√©zz√ºk
                    part_lower = part.lower()
                    if part_lower not in ['elado', 'kiado', 'berlet', 'haz', 'lakas', 'telek', 'iroda', 'uzlet'] and len(part) > 2:
                        meaningful_parts.append(part_lower)
                    if len(meaningful_parts) >= 2:  # Max 2 r√©sz
                        break
                location_only = '_'.join(meaningful_parts) if meaningful_parts else 'ingatlan_kereses'
        
        # Biztons√°gos f√°jln√©v k√©sz√≠t√©se - JAV√çTOTT VERZI√ì
        safe_name = re.sub(r'[^\w\-_]', '_', location_only)
        safe_name = safe_name.replace('-', '_')
        safe_name = re.sub(r'_{2,}', '_', safe_name)
        safe_name = safe_name.strip('_')
        
        # XXII ker√ºlet speci√°lis kezel√©s - "muxxii" helyett "xxii"
        if 'muxxii' in safe_name:
            safe_name = safe_name.replace('muxxii', 'xxii')
        
        return safe_name[:50] if safe_name else "ingatlan_kereses"
        
    except Exception as e:
        print(f"URL parse hiba: {e}")
        return "ingatlan_kereses"

# Tesztel√©s
print("üß™ URL tiszt√≠t√°s tesztel√©se...")
print(f"Eredeti URL: {test_url}")

result = _extract_location(test_url)
print(f"Kinyert lok√°ci√≥: '{result}'")
print(f"V√°rt eredm√©ny: 'budaors'")

if result == 'budaors':
    print("‚úÖ Sikeres - szobasz√°m sz≈±r≈ëk elt√°vol√≠tva")
else:
    print(f"‚ùå Hiba - v√°rt 'budaors', kapott '{result}'")

# Tov√°bbi tesztek
test_cases = [
    'https://ingatlan.com/lista/elado+haz+budaors+4-szoba+80-500-mFt',
    'https://ingatlan.com/lista/elado+lakas+budapest+xi+kerulet+2-szoba',
    'https://ingatlan.com/lista/elado+haz+torokbalint+felujitott+100-200-mFt',
    'https://ingatlan.com/lista/elado+lakas+uj-epitesu+ujszeru+felujitott+jo-allapotu+3-szoba-felett+orszagut+vizivaros-ii+krisztinavaros-xii',
    'https://ingatlan.com/lista/elado+haz+budaors+2-szoba-alatt+uj-epitesu'
]

print("\nüß™ Tov√°bbi tesztek:")
for test_case in test_cases:
    result = _extract_location(test_case)
    print(f"URL: {test_case}")
    print(f"  -> '{result}'\n")
