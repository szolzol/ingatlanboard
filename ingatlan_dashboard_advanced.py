"""
K≈êB√ÅNYA-√öJHEGYI LAK√ìTELEP - ADVANCED INGATLAN DASHBOARD
======================================================
Szemantikai le√≠r√°s-elemz√©ssel √©s m√©lyebb insights-okkal
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import re
from collections import Counter
import seaborn as sns
import matplotlib.pyplot as plt

# Oldal konfigur√°ci√≥
st.set_page_config(
    page_title="üè† K≈ëb√°nya-√öjhegy Ingatlan Piaci Elemz√©s",
    page_icon="üè†",
    layout="wide"
)

@st.cache_data
def load_data():
    """Adatok bet√∂lt√©se"""
    try:
        # Megpr√≥b√°ljuk bet√∂lteni a f√°jlt
        import os
        csv_path = "ingatlan_reszletes_20250819_123937.csv"
        if not os.path.exists(csv_path):
            st.error(f"‚ùå Az adatf√°jl nem tal√°lhat√≥: {csv_path}")
            st.info("üìÅ El√©rhet≈ë f√°jlok a k√∂nyvt√°rban:")
            for file in os.listdir("."):
                if file.endswith(".csv"):
                    st.write(f"- {file}")
            st.stop()
            
        df = pd.read_csv(csv_path)
        
        # Ellen≈ërizz√ºk hogy van-e adat
        if df.empty:
            st.error("‚ùå Az adatf√°jl √ºres!")
            st.stop()
        
        st.info(f"‚úÖ Sikeresen bet√∂ltve: {len(df)} ingatlan")
        
        # Numerikus √°r konvert√°l√°s - tiszt√≠tjuk a speci√°lis karaktereket
        df['ar_szam'] = df['nm_ar'].str.extract(r'([0-9,\s\xa0]+)').iloc[:, 0]
        df['ar_szam'] = df['ar_szam'].str.replace(',', '').str.replace('\xa0', '').str.replace(' ', '')
        df['ar_szam'] = pd.to_numeric(df['ar_szam'], errors='coerce')
        
        # Teljes √°r numerikus konvert√°l√°s - tiszt√≠tjuk a speci√°lis karaktereket
        # A form√°tum: "58,50 M Ft" vagy hasonl√≥
        df['teljes_ar_szam'] = df['teljes_ar'].str.extract(r'([0-9,]+)').iloc[:, 0]
        df['teljes_ar_szam'] = df['teljes_ar_szam'].str.replace(',', '.').astype(float, errors='ignore')
        df['teljes_ar_szam'] = pd.to_numeric(df['teljes_ar_szam'], errors='coerce')
        
        # Ter√ºlet numerikus
        df['terulet_szam'] = pd.to_numeric(df['terulet'].str.extract(r'(\d+)').iloc[:, 0], errors='coerce')
        
        # Szoba numerikus - biztos√≠tjuk hogy legyen √©rt√©k a plothoz
        df['szobak'] = pd.to_numeric(df['szobak'], errors='coerce').fillna(2)  # Default 2 szoba ha nincs adat
        
        # Emelet kategoriz√°l√°s
        def categorize_floor(szint):
            if pd.isna(szint) or szint == '':
                return 'Ismeretlen'
            szint = str(szint).lower()
            if 'f√∂ldszint' in szint or szint == '0':
                return 'F√∂ldszint'
            elif 'magasf√∂ldszint' in szint:
                return 'Magasf√∂ldszint'
            elif szint.isdigit():
                floor_num = int(szint)
                if floor_num <= 3:
                    return 'Als√≥ (1-3)'
                elif floor_num <= 7:
                    return 'K√∂z√©ps≈ë (4-7)'
                else:
                    return 'Fels≈ë (8+)'
            return 'Egy√©b'
        
        df['emelet_kategoria'] = df['szint'].apply(categorize_floor)
        
        return df
    except Exception as e:
        st.error(f"Adatok bet√∂lt√©si hiba: {e}")
        return pd.DataFrame()

def semantic_description_analysis(descriptions):
    """Szemantikai le√≠r√°s elemz√©s"""
    if descriptions.empty:
        return {}
    
    # Sz√∂veg tiszt√≠t√°sa √©s egyes√≠t√©se
    all_text = ' '.join(descriptions.fillna('').astype(str))
    all_text = re.sub(r'[^\w\s]', ' ', all_text.lower())
    
    # Kulcssz√≥ kateg√≥ri√°k
    keywords_categories = {
        'üè† √Ållapot': {
            'fel√∫j√≠tott': ['fel√∫j√≠tott', 'fel√∫j√≠tva', 'renov√°lt', 'korszer≈±', 'modern'],
            '√∫j': ['√∫j', '√∫jszer≈±', 'friss', 'vadonat√∫j'],
            'j√≥ √°llapot': ['j√≥ √°llapot', 'kiv√°l√≥ √°llapot', 'rendezett'],
            'fel√∫j√≠tand√≥': ['fel√∫j√≠tand√≥', 'fel√∫j√≠t√°sra szorul', '√∂ner≈ës']
        },
        'üåü Kiemel√©sek': {
            'panor√°ma': ['panor√°ma', 'kil√°t√°s', 'l√°tv√°nyos', 'sz√©p kil√°t√°s'],
            'csendes': ['csendes', 'nyugodt', 'b√©k√©s', 'zajtalan'],
            'vil√°gos': ['vil√°gos', 'napf√©nyes', 'f√©nyes', 'napos'],
            'lift': ['lift', 'liftes', 'felvon√≥']
        },
        'üöó Parkol√°s': {
            'ingyenes': ['ingyenes parkol√°s', 'ingyen parkol', 'd√≠jtalan'],
            'garazs': ['gar√°zs', 'z√°rt parkol√≥', 'be√°ll√≥hely'],
            'utcai': ['utcai parkol', 'utc√°n parkol']
        },
        'üí∞ √ârt√©kes√≠t√©s': {
            's√ºrg≈ës': ['s√ºrg≈ës', 'gyors', 'azonnali', 'r√∂gt√∂n'],
            'tehermentes': ['tehermentes', 'per mentes', 'tiszta pap√≠r'],
            'k√∂lt√∂zhet≈ë': ['k√∂lt√∂zhet≈ë', 'bek√∂lt√∂zhet', 'azonnal']
        },
        'üèóÔ∏è Felszerelts√©g': {
            'kl√≠ma': ['kl√≠ma', 'l√©gkondicion√°l√≥', 'kl√≠m√°s'],
            'm≈±anyag ablak': ['m≈±anyag ablak', '√∫j ablak', 'korszer≈± ablak'],
            'g√©pes√≠tett': ['g√©pes√≠tett', 'be√©p√≠tett', 'szerelt konyha']
        }
    }
    
    # Kulcssz√≥ sz√°mol√°s
    keyword_stats = {}
    for category, subcats in keywords_categories.items():
        keyword_stats[category] = {}
        for subcat, keywords in subcats.items():
            count = sum(all_text.count(kw) for kw in keywords)
            keyword_stats[category][subcat] = count
    
    # Hossz√∫s√°g elemz√©s
    desc_lengths = descriptions.str.len()
    length_stats = {
        '√°tlag': desc_lengths.mean(),
        'median': desc_lengths.median(),
        'm√≥dusz': desc_lengths.mode().iloc[0] if not desc_lengths.mode().empty else 0,
        'sz√≥r√°s': desc_lengths.std(),
        'min': desc_lengths.min(),
        'max': desc_lengths.max()
    }
    
    # Leggyakoribb szavak
    words = re.findall(r'\b[a-z√°√©√≠√≥√∂≈ë√º≈±]{3,}\b', all_text)
    stop_words = {'lak√°s', 'ingatlan', 'elad√≥', 'ker√ºlet', 'budapest', 'szoba', 'van', 'lett', 'egy', 'alatt', 'ut√°n', 'mellett', 'k√∂z√∂tt', '√°ltal', 'mivel', 'amely', 'ahol'}
    filtered_words = [w for w in words if w not in stop_words]
    word_freq = Counter(filtered_words).most_common(20)
    
    return {
        'keywords': keyword_stats,
        'length_stats': length_stats,
        'word_frequency': word_freq,
        'total_descriptions': len(descriptions[descriptions.notna()])
    }

def analyze_price_text_correlation(df):
    """√År √©s sz√∂veg k√∂z√∂tti √∂sszef√ºgg√©sek elemz√©se"""
    if df.empty or 'leiras' not in df.columns:
        return {}
    
    # Csak azokat az ingatlanokat n√©zz√ºk, ahol van le√≠r√°s √©s √°r
    df_clean = df.dropna(subset=['leiras', 'ar_szam']).copy()
    
    if len(df_clean) < 5:
        return {}
    
    # Sz√∂veg jellemz≈ëk sz√°m√≠t√°sa
    df_clean['leiras_hossz'] = df_clean['leiras'].str.len()
    df_clean['szavak_szama'] = df_clean['leiras'].str.split().str.len()
    
    # Pr√©mium kulcsszavak keres√©se
    premium_keywords = {
        'panor√°ma': ['panor√°ma', 'kil√°t√°s', 'l√°tv√°nyos'],
        'lift': ['lift', 'liftes', 'felvon√≥'],
        'fel√∫j√≠tott': ['fel√∫j√≠tott', 'renov√°lt', 'korszer≈±'],
        'csendes': ['csendes', 'nyugodt', 'b√©k√©s'],
        'vil√°gos': ['vil√°gos', 'napf√©nyes', 'f√©nyes'],
        'parkol√≥': ['parkol√≥', 'gar√°zs', 'be√°ll√≥hely']
    }
    
    keyword_price_effects = {}
    
    for keyword, synonyms in premium_keywords.items():
        # Van-e ilyen kulcssz√≥ a le√≠r√°sban
        has_keyword = df_clean['leiras'].str.lower().str.contains('|'.join(synonyms), na=False)
        
        if has_keyword.sum() > 2:  # Ha legal√°bb 3 hirdet√©sben szerepel
            with_keyword = df_clean[has_keyword]['ar_szam'].mean()
            without_keyword = df_clean[~has_keyword]['ar_szam'].mean()
            
            if not pd.isna(with_keyword) and not pd.isna(without_keyword):
                price_diff = with_keyword - without_keyword
                price_diff_pct = (price_diff / without_keyword) * 100
                
                keyword_price_effects[keyword] = {
                    'with_keyword': with_keyword,
                    'without_keyword': without_keyword,
                    'difference': price_diff,
                    'difference_pct': price_diff_pct,
                    'count_with': has_keyword.sum(),
                    'count_without': (~has_keyword).sum()
                }
    
    # Sz√∂veg hossz √©s √°r korrel√°ci√≥ja
    length_price_corr = df_clean['leiras_hossz'].corr(df_clean['ar_szam'])
    words_price_corr = df_clean['szavak_szama'].corr(df_clean['ar_szam'])
    
    return {
        'keyword_effects': keyword_price_effects,
        'correlations': {
            'length_price': length_price_corr,
            'words_price': words_price_corr
        },
        'sample_size': len(df_clean)
    }

def calculate_comprehensive_stats(df):
    """√Åtfog√≥ statisztikai mutat√≥k sz√°m√≠t√°sa"""
    stats = {}
    
    # Numerikus oszlopok
    numeric_cols = ['ar_szam', 'teljes_ar_szam', 'terulet_szam', 'szobak']
    
    for col in numeric_cols:
        if col in df.columns:
            series = pd.to_numeric(df[col], errors='coerce').dropna()
            if len(series) > 0:
                stats[col] = {
                    '√°tlag': series.mean(),
                    'medi√°n': series.median(),
                    'm√≥dusz': series.mode().iloc[0] if not series.mode().empty else 'N/A',
                    'sz√≥r√°s': series.std(),
                    'min': series.min(),
                    'max': series.max(),
                    'q25': series.quantile(0.25),
                    'q75': series.quantile(0.75),
                    'iqr': series.quantile(0.75) - series.quantile(0.25),
                    'vari√°ci√≥s_egy√ºtthat√≥': (series.std() / series.mean()) * 100 if series.mean() != 0 else 0
                }
    
    return stats

def seller_specific_analysis(df, target_area=50, target_rooms=2, target_condition='k√∂zepes √°llapot√∫', target_floor=6):
    """Specifikus lak√°s tulajdonos sz√°m√°ra k√©sz√≠tett elemz√©s"""
    
    # Hasonl√≥ ingatlanok sz≈±r√©se
    similar_properties = df[
        (abs(df['terulet_szam'] - target_area) <= 5) &  # +/- 5 m¬≤
        (df['szobak'] == target_rooms) |  # Ugyanannyi szoba
        (df['ingatlan_allapota'].str.contains('k√∂zepes|j√≥', case=False, na=False))  # Hasonl√≥ √°llapot
    ].copy()
    
    # Emelet kategoriz√°l√°s a c√©lhoz
    floor_category = 'K√∂z√©ps≈ë (4-7)' if 4 <= target_floor <= 7 else 'Fels≈ë (8+)' if target_floor > 7 else 'Als√≥ (1-3)'
    similar_floor = df[df['emelet_kategoria'] == floor_category].copy()
    
    analysis = {
        'hasonl√≥_ingatlanok': {
            'darab': len(similar_properties),
            '√°tlag_√°r': similar_properties['ar_szam'].mean() if len(similar_properties) > 0 else 0,
            '√°r_tartom√°ny': {
                'min': similar_properties['ar_szam'].min() if len(similar_properties) > 0 else 0,
                'max': similar_properties['ar_szam'].max() if len(similar_properties) > 0 else 0
            }
        },
        'emelet_hat√°s': {
            'ugyanaz_emelet_kateg√≥ria': len(similar_floor),
            '√°tlag_√°r_emelet': similar_floor['ar_szam'].mean() if len(similar_floor) > 0 else 0
        },
        'piaci_poz√≠ci√≥': {},
        'elad√°si_taktik√°k': {},
        'verseny_elemz√©s': {}
    }
    
    # Piaci poz√≠ci√≥ meghat√°roz√°sa
    if len(similar_properties) > 0:
        avg_similar = similar_properties['ar_szam'].mean()
        all_avg = df['ar_szam'].mean()
        
        position = '√°tlag feletti' if avg_similar > all_avg else '√°tlag alatti' if avg_similar < all_avg else '√°tlagos'
        analysis['piaci_poz√≠ci√≥'] = {
            'kateg√≥ria': position,
            'hasonl√≥_√°tlag': avg_similar,
            'piaci_√°tlag': all_avg,
            'elt√©r√©s_sz√°zal√©k': ((avg_similar - all_avg) / all_avg) * 100
        }
    
    # Verseny elemz√©s
    advertiser_types = df['hirdeto_tipus'].value_counts()
    condition_competition = df['ingatlan_allapota'].value_counts()
    
    analysis['verseny_elemz√©s'] = {
        'hirdet≈ë_t√≠pusok': advertiser_types.to_dict(),
        '√°llapot_konkurencia': condition_competition.to_dict(),
        'teljes_k√≠n√°lat': len(df)
    }
    
    # Elad√°si taktik√°k javaslata
    premium_features = []
    if target_floor >= 6:
        premium_features.append('magasabb emelet - kil√°t√°s kiemel√©se')
    if target_rooms == 2:
        premium_features.append('optim√°lis m√©ret fiatal p√°rok/egyed√ºl√°ll√≥k sz√°m√°ra')
    
    analysis['elad√°si_taktik√°k'] = {
        'kiemelend≈ë_tulajdons√°gok': premium_features,
        'javasolt_√°r_strat√©gia': 'versenyk√©pes' if len(similar_properties) > 5 else 'pr√©mium',
        'c√©lcsoport': 'fiatal p√°rok, els≈ë lak√°sv√°s√°rl√≥k' if target_rooms <= 2 else 'csal√°dok'
    }
    
    return analysis

def create_price_prediction_model(df):
    """Egyszer≈± √°r predikci√≥s modell"""
    # Sz≈±rj√ºk ki a hi√°nyos adatokat
    clean_df = df.dropna(subset=['ar_szam', 'terulet_szam', 'szobak'])
    
    if len(clean_df) < 5:
        return None
    
    # Egyszer≈± line√°ris kapcsolatok
    area_price_corr = clean_df['ar_szam'].corr(clean_df['terulet_szam'])
    room_price_corr = clean_df['ar_szam'].corr(clean_df['szobak'])
    
    # √Åtlag√°rak kateg√≥ri√°nk√©nt
    floor_prices = clean_df.groupby('emelet_kategoria')['ar_szam'].mean()
    condition_prices = clean_df.groupby('ingatlan_allapota')['ar_szam'].mean()
    advertiser_prices = clean_df.groupby('hirdeto_tipus')['ar_szam'].mean()
    
    return {
        'correlations': {
            'ter√ºlet_√°r': area_price_corr,
            'szoba_√°r': room_price_corr
        },
        'category_prices': {
            'emelet': floor_prices.to_dict(),
            '√°llapot': condition_prices.to_dict(),
            'hirdet≈ë': advertiser_prices.to_dict()
        }
    }
    """Egyszer≈± √°r predikci√≥s modell"""
    # Sz≈±rj√ºk ki a hi√°nyos adatokat
    clean_df = df.dropna(subset=['ar_szam', 'terulet_szam', 'szobak'])
    
    if len(clean_df) < 5:
        return None
    
    # Egyszer≈± line√°ris kapcsolatok
    area_price_corr = clean_df['ar_szam'].corr(clean_df['terulet_szam'])
    room_price_corr = clean_df['ar_szam'].corr(clean_df['szobak'])
    
    # √Åtlag√°rak kateg√≥ri√°nk√©nt
    floor_prices = clean_df.groupby('emelet_kategoria')['ar_szam'].mean()
    condition_prices = clean_df.groupby('ingatlan_allapota')['ar_szam'].mean()
    advertiser_prices = clean_df.groupby('hirdeto_tipus')['ar_szam'].mean()
    
    return {
        'correlations': {
            'ter√ºlet_√°r': area_price_corr,
            'szoba_√°r': room_price_corr
        },
        'category_prices': {
            'emelet': floor_prices.to_dict(),
            '√°llapot': condition_prices.to_dict(),
            'hirdet≈ë': advertiser_prices.to_dict()
        }
    }

    # F≈ë dashboard
def main():
    st.title("üè† K≈ëb√°nya-√öjhegyi Lak√≥telep - R√©szletes Piaci Elemz√©s")
    st.markdown("### üîç Szemantikai le√≠r√°s-elemz√©ssel kieg√©sz√≠tett ingatlan dashboard")
    
    # Dashboard haszn√°lati √∫tmutat√≥
    with st.expander("üìñ Dashboard haszn√°lati √∫tmutat√≥ - ELS≈ê OLVAS√ÅS AJ√ÅNLOTT"):
        st.markdown("""
        **üéØ Mit csin√°l ez a dashboard?**
        
        Ez egy **professzion√°lis ingatlan piaci elemz≈ë eszk√∂z**, amely:
        - ‚úÖ **57 val√≥s hirdet√©st** elemez a K≈ëb√°nya-√öjhegyi lak√≥telepr≈ël
        - ‚úÖ **Szemantikai sz√∂veganal√≠zist** v√©gez a hirdet√©si le√≠r√°sokban
        - ‚úÖ **Befektet√©si javaslatokat** ad √°r/√©rt√©k ar√°ny alapj√°n
        - ‚úÖ **Interakt√≠v sz≈±r≈ëkkel** seg√≠t a keres√©sben
        
        **üìä Hogyan navig√°ljak?**
        1. **Alapstatisztik√°k**: Gyors piaci √°ttekint√©s
        2. **Szemantikai elemz√©s**: Mi fontos a vev≈ëknek?
        3. **√Årelemz√©sek**: Hol vannak a j√≥ v√©telek?
        4. **Emelet & √Ållapot**: Milyen pr√©miumok/diszkontok vannak?
        5. **Befektet√©si elemz√©s**: Konkr√©t aj√°nl√°sok
        6. **Sz≈±r≈ëk**: Szem√©lyre szabott keres√©s
        
        **üîç Pro tippek:**
        - Kattints a **"‚ÑπÔ∏è" gombokra** minden szekci√≥n√°l r√©szletes magyar√°zat√©rt
        - A **gr√°fikokon hover-elj** a pontokon tov√°bbi adatok√©rt
        - Haszn√°ld a **sz≈±r≈ëket** alul a c√©lzott keres√©shez
        - A **befektet√©si pontsz√°m** alapj√°n sorold a lehet≈ës√©geket
        
        **‚ö†Ô∏è Fontos figyelmeztet√©s:**
        Ez egy elemz≈ë eszk√∂z - v√©gs≈ë d√∂nt√©s el≈ëtt mindig n√©zd meg szem√©lyesen az ingatlant!
        """)
    
    # Adatok bet√∂lt√©se
    df = load_data()
    
    if df.empty:
        st.error("Nem siker√ºlt bet√∂lteni az adatokat!")
        return
    
    # Alapstatisztik√°k
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìä Ingatlanok", len(df))
    with col2:
        avg_price = df['ar_szam'].mean()
        st.metric("üí∞ √Åtlag m¬≤ √°r", f"{avg_price:,.0f} Ft/m¬≤")
    with col3:
        avg_total = df['teljes_ar_szam'].mean()
        if not pd.isna(avg_total):
            st.metric("üè† √Åtlag teljes √°r", f"{avg_total:.1f} M Ft")
        else:
            st.metric("üè† √Åtlag teljes √°r", "N/A")
    with col4:
        desc_pct = (df['leiras'].notna().sum() / len(df)) * 100
        st.metric("üìù Le√≠r√°s lefedetts√©g", f"{desc_pct:.0f}%")
    
    # Gyors piaci √°ttekint√©s
    st.info("""
    **üéØ GYORS PIACI √ñSSZEFOGLAL√ì:**
    A K≈ëb√°nya-√öjhegyi lak√≥telepen jelenleg v√°ltozatos k√≠n√°lat tal√°lhat√≥. Az √°rak sz√©les sk√°l√°n mozognak, 
    ami j√≥ lehet≈ës√©geket teremt mind befektet≈ëk, mind lak√°sv√°s√°rl√≥k sz√°m√°ra. A r√©szletes elemz√©sekkel 
    azonos√≠that√≥k a legjobb √°r/√©rt√©k ar√°ny√∫ ingatlanok.
    """)
    
    # Szemantikai elemz√©s
    st.header("üìù Szemantikai Le√≠r√°s Elemz√©s")
    
    with st.expander("‚ÑπÔ∏è Hogyan √©rtelmezzem a szemantikai elemz√©st?"):
        st.markdown("""
        **Mit mutat ez a szekci√≥?**
        - Az ingatlan le√≠r√°sokban tal√°lhat√≥ **kulcsszavak gyakoris√°g√°t** elemzi
        - Megmutatja, hogy a hirdet≈ëk milyen **√©rt√©kes√≠t√©si strat√©gi√°kat** haszn√°lnak
        - Seg√≠t azonos√≠tani a **piaci trendeket** √©s **v√°s√°rl√≥i ig√©nyeket**
        
        **Mi√©rt fontos?**
        - A gyakran eml√≠tett tulajdons√°gok (pl. "lift", "panor√°ma") **√©rt√©kn√∂vel≈ë** t√©nyez≈ëk
        - A "s√ºrg≈ës" vagy "tehermentes" kifejez√©sek **alkudoz√°si lehet≈ës√©geket** jelezhetnek
        - Az √°llapot-le√≠r√°sok seg√≠tenek a **val√≥s √©rt√©kbecsl√©sben**
        """)
    
    # √Ållapot szerinti sz≈±r≈ë a szemantikai elemz√©shez
    col1, col2 = st.columns([1, 3])
    with col1:
        semantic_condition_filter = st.selectbox(
            "üè† √Ållapot sz≈±r≈ë (szemantikai elemz√©shez)",
            options=["√ñsszes √°llapot"] + list(df['ingatlan_allapota'].dropna().unique()),
            index=0
        )
    
    # Sz≈±rt adatok a szemantikai elemz√©shez
    if semantic_condition_filter != "√ñsszes √°llapot":
        df_semantic = df[df['ingatlan_allapota'] == semantic_condition_filter]
        st.info(f"üìä Szemantikai elemz√©s sz≈±rve: **{semantic_condition_filter}** √°llapot√∫ ingatlanok ({len(df_semantic)} db)")
    else:
        df_semantic = df
    
    semantic_analysis = semantic_description_analysis(df_semantic['leiras'])
    
    if semantic_analysis:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üî§ Le√≠r√°s Statisztik√°k")
            st.metric("√ñsszes le√≠r√°s", semantic_analysis['total_descriptions'])
            st.metric("√Åtlag hossz√∫s√°g", f"{semantic_analysis['length_stats']['√°tlag']:.0f} karakter")
            st.metric("Median hossz√∫s√°g", f"{semantic_analysis['length_stats']['median']:.0f} karakter")
            st.metric("M√≥dusz (leggyakoribb)", f"{semantic_analysis['length_stats']['m√≥dusz']:.0f} karakter")
            st.metric("Sz√≥r√°s", f"{semantic_analysis['length_stats']['sz√≥r√°s']:.0f} karakter")
        
        with col2:
            st.subheader("üèÜ Top 10 Kulcssz√≥")
            word_freq_df = pd.DataFrame(semantic_analysis['word_frequency'], columns=['Sz√≥', 'Gyakoris√°g'])
            st.dataframe(word_freq_df.head(10), use_container_width=True)
    
    # √öJ: √År-sz√∂veg korrel√°ci√≥ elemz√©se
    st.subheader("üí∞üìù √År √©s Le√≠r√°s √ñsszef√ºgg√©s Elemz√©se")
    
    price_text_analysis = analyze_price_text_correlation(df_semantic)
    
    if price_text_analysis and 'keyword_effects' in price_text_analysis:
        with st.expander("üìä Kulcsszavak √°raz√°si hat√°sa"):
            st.markdown("""
            **Mit mutat ez a t√°bl√°zat?**
            - Minden sorban egy **pr√©mium kulcssz√≥** szerepel
            - **"Van kulcssz√≥"**: √Åtlag√°r, ha a hirdet√©sben szerepel ez a kifejez√©s
            - **"Nincs kulcssz√≥"**: √Åtlag√°r a t√∂bbi hirdet√©sben
            - **"√Årk√ºl√∂nbs√©g"**: Mennyivel dr√°g√°bbak a kulcsszavas hirdet√©sek
            - **"Hat√°s %"**: Sz√°zal√©kos √°rk√ºl√∂nbs√©g (pozit√≠v = dr√°g√°bb, negat√≠v = olcs√≥bb)
            """)
        
        # Kulcssz√≥ hat√°sok t√°bl√°zata
        keyword_effects_data = []
        for keyword, data in price_text_analysis['keyword_effects'].items():
            keyword_effects_data.append({
                'Kulcssz√≥': keyword,
                'Van kulcssz√≥ (Ft/m¬≤)': f"{data['with_keyword']:,.0f}",
                'Nincs kulcssz√≥ (Ft/m¬≤)': f"{data['without_keyword']:,.0f}",
                '√Årk√ºl√∂nbs√©g (Ft/m¬≤)': f"{data['difference']:+,.0f}",
                'Hat√°s %': f"{data['difference_pct']:+.1f}%",
                'Hirdet√©sek sz√°ma': f"{data['count_with']}/{data['count_with'] + data['count_without']}"
            })
        
        if keyword_effects_data:
            keyword_df = pd.DataFrame(keyword_effects_data)
            st.dataframe(keyword_df, use_container_width=True)
            
            # Insight gener√°l√°sa
            best_keyword = max(price_text_analysis['keyword_effects'].items(), 
                             key=lambda x: x[1]['difference_pct'], default=(None, None))
            
            if best_keyword[0]:
                st.success(f"""
                üí° **Legjobb √°rfelhajt√≥ kulcssz√≥**: **{best_keyword[0]}** 
                (+{best_keyword[1]['difference_pct']:.1f}% √°rk√ºl√∂nbs√©g)
                """)
        
        # Sz√∂veg hossz korrel√°ci√≥
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üìè Le√≠r√°s hossz - √År korrel√°ci√≥", 
                     f"{price_text_analysis['correlations']['length_price']:.3f}")
        with col2:
            st.metric("üìù Szavak sz√°ma - √År korrel√°ci√≥", 
                     f"{price_text_analysis['correlations']['words_price']:.3f}")
    
    # Kulcssz√≥ heatmap
    if semantic_analysis and 'keywords' in semantic_analysis:
        st.subheader("üî• Kulcssz√≥ Heatmap")
        
        with st.expander("üìä Heatmap √©rtelmez√©si √∫tmutat√≥"):
            st.markdown("""
            **Mit l√°tok a heatmap-en?**
            - **Sorok**: K√ºl√∂nb√∂z≈ë ingatlan tulajdons√°gok (pl. lift, panor√°ma, fel√∫j√≠tott)
            - **Oszlopok**: Kateg√≥ri√°k (√°llapot, kiemel√©sek, parkol√°s, stb.)
            - **Sz√≠nek**: A s√∂t√©tebb sz√≠n = gyakrabban eml√≠tik a hirdet√©sekben
            
            **Hogyan haszn√°ljam?**
            - **S√°rga/vil√°gos ter√ºletek**: Ritk√°n eml√≠tett, de √©rt√©kes tulajdons√°gok
            - **S√∂t√©t ter√ºletek**: Gyakori, standard tulajdons√°gok
            - **√úres cell√°k**: Nem relev√°ns kombin√°ci√≥
            
            **Befektet√©si tipp**: A vil√°gos, de l√©tez≈ë tulajdons√°gok (pl. "garazs") 
            potenci√°lisan **alul√©rt√©kelt** lehet≈ës√©gek!
            """)
        
        # Kulcssz√≥ adatok el≈ëk√©sz√≠t√©se
        keyword_data = []
        for category, subcats in semantic_analysis['keywords'].items():
            for subcat, count in subcats.items():
                keyword_data.append({'Kateg√≥ria': category, 'Kulcssz√≥': subcat, 'Gyakoris√°g': count})
        
        if keyword_data:
            keyword_df = pd.DataFrame(keyword_data)
            pivot_df = keyword_df.pivot(index='Kulcssz√≥', columns='Kateg√≥ria', values='Gyakoris√°g').fillna(0)
            
            fig_heatmap = px.imshow(
                pivot_df.values,
                x=pivot_df.columns,
                y=pivot_df.index,
                aspect="auto",
                color_continuous_scale="Viridis",
                title="Kulcsszavak gyakoris√°ga kateg√≥ri√°nk√©nt"
            )
            fig_heatmap.update_xaxes(side="bottom")
            st.plotly_chart(fig_heatmap, use_container_width=True)
    
    # √Årelemz√©s
    st.header("üí∞ R√©szletes √Årelemz√©s")
    
    with st.expander("üí° √Årelemz√©s √©rtelmez√©se"):
        st.markdown("""
        **Bal oldali grafikon (Scatter plot):**
        - **X tengely**: Lak√°s m√©rete n√©gyzetm√©terben
        - **Y tengely**: N√©gyzetm√©ter √°r Forintban
        - **Pont m√©rete**: Szob√°k sz√°ma (nagyobb pont = t√∂bb szoba)
        - **Sz√≠nek**: Hirdet≈ë t√≠pusok
        
        **Mit keresek?**
        - **Grafikon alatti pontok**: Potenci√°lisan **j√≥ v√©telek**
        - **Grafikon feletti pontok**: **Dr√°g√°bb**, de esetleg pr√©mium lok√°ci√≥
        - **Outlier pontok**: K√ºl√∂nleges ingatlanok vagy t√©ves √°raz√°s
        
        **Jobb oldali Box plot:**
        - A **doboz k√∂zepe**: Medi√°n √°r (50% alatt/felett van)
        - **Doboz sz√©le**: 25%-75% k√∂z√∂tti √°rak
        - **Vonalak**: Sz√©ls≈ë, de m√©g norm√°lis √©rt√©kek
        - **Pontok**: Outlier √°rak
        """)
    
    # √Ållapot sz≈±r≈ë az √°relemz√©shez
    col_filter, col_space = st.columns([1, 3])
    with col_filter:
        price_condition_filter = st.selectbox(
            "üè† √Ållapot sz≈±r≈ë (√°relemz√©shez)",
            options=["√ñsszes √°llapot"] + list(df['ingatlan_allapota'].dropna().unique()),
            index=0,
            key="price_analysis_filter"
        )
    
    # Sz≈±rt adatok az √°relemz√©shez
    if price_condition_filter != "√ñsszes √°llapot":
        df_price = df[df['ingatlan_allapota'] == price_condition_filter]
        st.info(f"üìä √Årelemz√©s sz≈±rve: **{price_condition_filter}** √°llapot√∫ ingatlanok ({len(df_price)} db)")
    else:
        df_price = df
    
    col1, col2 = st.columns(2)
    
    with col1:
        # √År vs ter√ºlet scatter
        fig_scatter = px.scatter(
            df_price, 
            x='terulet_szam', 
            y='ar_szam',
            color='hirdeto_tipus',
            size='szobak',
            hover_data=['ingatlan_allapota', 'emelet_kategoria'],
            title=f"M¬≤ √År vs Ter√ºlet ({price_condition_filter})",
            labels={'terulet_szam': 'Ter√ºlet (m¬≤)', 'ar_szam': 'M¬≤ √°r (Ft)'}
        )
        st.plotly_chart(fig_scatter, use_container_width=True)
    
    with col2:
        # Box plot √°rak hirdet≈ë t√≠pus szerint
        fig_box = px.box(
            df_price,
            x='hirdeto_tipus',
            y='ar_szam',
            title=f"M¬≤ √Årak eloszl√°sa hirdet≈ë t√≠pus szerint ({price_condition_filter})",
            labels={'hirdeto_tipus': 'Hirdet≈ë t√≠pus', 'ar_szam': 'M¬≤ √°r (Ft)'}
        )
        st.plotly_chart(fig_box, use_container_width=True)
    
    # Emelet elemz√©s
    st.header("üè¢ Emelet Elemz√©s")
    
    with st.expander("üîç Emelet hat√°sa az ingatlan √©rt√©k√©re"):
        st.markdown("""
        **Emelet kateg√≥ri√°k magyar√°zata:**
        - **F√∂ldszint**: K√∂nnyen megk√∂zel√≠thet≈ë, de kevesebb priv√°tszf√©ra
        - **Als√≥ (1-3)**: J√≥ kompromisszum, lift n√©lk√ºl is j√°rhat√≥
        - **K√∂z√©ps≈ë (4-7)**: Optim√°lis magass√°g, sz√©p kil√°t√°s
        - **Fels≈ë (8+)**: Legjobb kil√°t√°s, de lift-f√ºgg≈ë
        
        **√Åraz√°si logika:**
        - Magasabb emelet = √°ltal√°ban **dr√°g√°bb** (kil√°t√°s pr√©mium)
        - **Kiv√©tel**: Lift n√©lk√ºli √©p√ºletek eset√©n ford√≠tott a helyzet
        - **6-7. emelet**: Gyakran a "sweet spot" - j√≥ kil√°t√°s, m√©g nem t√∫l magasan
        
        **Befektet√©si szempontok:**
        - **K√∂z√©ps≈ë emeletek**: Legjobb **√∫jra√©rt√©kes√≠thet≈ës√©g**
        - **F√∂ldszint**: **Id≈ësebb v√°s√°rl√≥k** k√∂r√©ben n√©pszer≈±
        - **Fels≈ë emeletek**: **Fiatal v√°s√°rl√≥k**, de kock√°zatosabb (lift meghib√°sod√°s)
        """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Emelet eloszl√°s
        floor_counts = df['emelet_kategoria'].value_counts()
        fig_floor = px.pie(
            values=floor_counts.values,
            names=floor_counts.index,
            title="Ingatlanok eloszl√°sa emelet szerint"
        )
        st.plotly_chart(fig_floor, use_container_width=True)
    
    with col2:
        # Emelet vs √°r
        floor_prices = df.groupby('emelet_kategoria')['ar_szam'].agg(['mean', 'std', 'count']).reset_index()
        fig_floor_price = px.bar(
            floor_prices,
            x='emelet_kategoria',
            y='mean',
            error_y='std',
            title="√Åtlag√°rak emelet kateg√≥ri√°k szerint",
            labels={'emelet_kategoria': 'Emelet kateg√≥ria', 'mean': '√Åtlag m¬≤ √°r (Ft)'}
        )
        st.plotly_chart(fig_floor_price, use_container_width=True)
    
    # √Ållapot elemz√©s
    st.header("üîß Ingatlan √Ållapot Elemz√©s")
    
    with st.expander("üè† √Ållapot kateg√≥ri√°k √©s √°raz√°si hat√°suk"):
        st.markdown("""
        **√Ållapot kateg√≥ri√°k jelent√©se:**
        - **Fel√∫j√≠tott/√öjszer≈±**: Azonnal k√∂lt√∂zhet≈ë, nincs tov√°bbi beruh√°z√°s
        - **J√≥ √°llapot√∫**: Kisebb kozmetikai jav√≠t√°sok sz√ºks√©gesek
        - **K√∂zepes**: Jelent≈ës fel√∫j√≠t√°si munk√°k v√°rhat√≥k
        - **Fel√∫j√≠tand√≥**: Teljes k√∂r≈± renov√°l√°s sz√ºks√©ges
        
        **Rejtett k√∂lts√©gek becsl√©se:**
        - **Fel√∫j√≠tand√≥**: +4-8 milli√≥ Ft fel√∫j√≠t√°si k√∂lts√©g
        - **K√∂zepes**: +2-4 milli√≥ Ft befektet√©s
        - **J√≥ √°llapot√∫**: +0.5-1 milli√≥ Ft kisebb jav√≠t√°sok
        
        **Befektet≈ëi strat√©gi√°k:**
        - **"Flip" strat√©gia**: Fel√∫j√≠tand√≥ v√°s√°rl√°sa + renov√°l√°s + elad√°s
        - **B√©rbead√°s**: J√≥ √°llapot√∫ azonnal kiadhat√≥
        - **Saj√°t lakhat√°s**: Fel√∫j√≠tott/√∫jszer≈± a legk√©nyelmesebb
        """)
    
    condition_stats = df.groupby('ingatlan_allapota').agg({
        'ar_szam': ['mean', 'count'],
        'teljes_ar_szam': 'mean'
    }).round(0)
    
    condition_stats.columns = ['√Åtlag m¬≤ √°r', 'Darab', '√Åtlag teljes √°r']
    st.dataframe(condition_stats, use_container_width=True)
    
    # Korrel√°ci√≥s m√°trix
    st.header("üîó Korrel√°ci√≥s Elemz√©s")
    
    with st.expander("üìà Korrel√°ci√≥ √©rtelmez√©se - mit jelentenek a sz√°mok?"):
        st.markdown("""
        **Mi a korrel√°ci√≥?**
        Megmutatja, hogy k√©t tulajdons√°g mennyire mozog egy√ºtt (-1 √©s +1 k√∂z√∂tt).
        
        **Sz√≠n k√≥dok:**
        - **Piros**: Negat√≠v korrel√°ci√≥ - egyik n≈ë, m√°sik cs√∂kken
        - **K√©k**: Pozit√≠v korrel√°ci√≥ - egy√ºtt n≈ënek/cs√∂kkennek
        - **Feh√©r**: Nincs √∂sszef√ºgg√©s
        
        **√ârtelmez√©s:**
        - **0.8-1.0**: Er≈ës pozit√≠v kapcsolat
        - **0.5-0.8**: K√∂zepes pozit√≠v kapcsolat
        - **0.2-0.5**: Gyenge pozit√≠v kapcsolat
        - **-0.2 - 0.2**: Nincs jelent≈ës kapcsolat
        - **Negat√≠v √©rt√©kek**: Ford√≠tott kapcsolat
        
        **Befektet√©si insight:**
        Ha **ter√ºlet** √©s **√°r** er≈ësen korrel√°l = norm√°lis piac
        Ha **szobasz√°m** √©s **√°r** gyeng√©n korrel√°l = m√©ter alap√∫ √°raz√°s
        """)
    
    numeric_cols = ['ar_szam', 'teljes_ar_szam', 'terulet_szam', 'szobak']
    corr_df = df[numeric_cols].corr()
    
    fig_corr = px.imshow(
        corr_df,
        text_auto=True,
        aspect="auto",
        color_continuous_scale="RdBu",
        title="Korrel√°ci√≥s m√°trix"
    )
    st.plotly_chart(fig_corr, use_container_width=True)
    
    # √öJ: R√©szletes statisztikai mutat√≥k
    st.header("üìä R√©szletes Statisztikai Mutat√≥k")
    
    with st.expander("üìö Statisztikai mutat√≥k magyar√°zata"):
        st.markdown("""
        **Alapfogalmak:**
        - **√Åtlag**: Az √©rt√©kek √∂sszege osztva a darabsz√°mmal
        - **Medi√°n**: A k√∂z√©ps≈ë √©rt√©k (50% alatt/felett van)
        - **M√≥dusz**: A leggyakrabban el≈ëfordul√≥ √©rt√©k
        - **Sz√≥r√°s**: Mennyire sz√≥rnak az √©rt√©kek az √°tlag k√∂r√ºl
        - **Q25/Q75**: 25%-os √©s 75%-os percentilisek
        - **IQR**: Interkvartilis tartom√°ny (Q75-Q25)
        - **Vari√°ci√≥s egy√ºtthat√≥**: Relat√≠v sz√≥r√°s (sz√≥r√°s/√°tlag * 100)
        
        **Mi√©rt fontosak?**
        - **Piaci stabilit√°s**: Alacsony sz√≥r√°s = stabil √°rak
        - **√Årszint meg√≠t√©l√©s**: Medi√°n vs √°tlag elt√©r√©se = kil√≥g√≥ √©rt√©kek hat√°sa
        - **Befektet√©si kock√°zat**: Magas vari√°ci√≥ = nagyobb kock√°zat
        """)
    
    # √Ållapot sz≈±r≈ë a statisztikai elemz√©shez
    col_filter, col_space = st.columns([1, 3])
    with col_filter:
        stats_condition_filter = st.selectbox(
            "üè† √Ållapot sz≈±r≈ë (statisztik√°k)",
            options=["√ñsszes √°llapot"] + list(df['ingatlan_allapota'].dropna().unique()),
            index=0,
            key="stats_analysis_filter"
        )
    
    # Sz≈±rt adatok a statisztik√°khoz
    if stats_condition_filter != "√ñsszes √°llapot":
        df_stats = df[df['ingatlan_allapota'] == stats_condition_filter]
        st.info(f"üìä Statisztik√°k sz≈±rve: **{stats_condition_filter}** √°llapot√∫ ingatlanok ({len(df_stats)} db)")
    else:
        df_stats = df
    
    comprehensive_stats = calculate_comprehensive_stats(df_stats)
    
    if comprehensive_stats:
        stats_data = []
        var_names = {
            'ar_szam': 'M¬≤ √År (Ft/m¬≤)',
            'teljes_ar_szam': 'Teljes √°r (M Ft)',
            'terulet_szam': 'Ter√ºlet (m¬≤)',
            'szobak': 'Szobasz√°m'
        }
        
        for var, stats in comprehensive_stats.items():
            if var in var_names:
                stats_data.append({
                    'V√°ltoz√≥': var_names[var],
                    '√Åtlag': f"{stats['√°tlag']:,.0f}" if var != 'teljes_ar_szam' else f"{stats['√°tlag']:.1f}",
                    'Medi√°n': f"{stats['medi√°n']:,.0f}" if var != 'teljes_ar_szam' else f"{stats['medi√°n']:.1f}",
                    'M√≥dusz': f"{stats['m√≥dusz']:,.0f}" if stats['m√≥dusz'] != 'N/A' else 'N/A',
                    'Sz√≥r√°s': f"{stats['sz√≥r√°s']:,.0f}" if var != 'teljes_ar_szam' else f"{stats['sz√≥r√°s']:.1f}",
                    'Min': f"{stats['min']:,.0f}" if var != 'teljes_ar_szam' else f"{stats['min']:.1f}",
                    'Max': f"{stats['max']:,.0f}" if var != 'teljes_ar_szam' else f"{stats['max']:.1f}",
                    'Vari√°ci√≥s ktg. (%)': f"{stats['vari√°ci√≥s_egy√ºtthat√≥']:.1f}%"
                })
        
        if stats_data:
            stats_df = pd.DataFrame(stats_data)
            st.dataframe(stats_df, use_container_width=True)
            
            # Statisztikai insights
            price_var_coeff = comprehensive_stats.get('ar_szam', {}).get('vari√°ci√≥s_egy√ºtthat√≥', 0)
            if price_var_coeff > 20:
                st.warning(f"‚ö†Ô∏è **Magas √°r volatilit√°s**: {price_var_coeff:.1f}% vari√°ci√≥s egy√ºtthat√≥ - nagy sz√≥r√≥d√°s az √°r√°kban!")
            elif price_var_coeff < 10:
                st.success(f"‚úÖ **Stabil √°rszint**: {price_var_coeff:.1f}% vari√°ci√≥s egy√ºtthat√≥ - konzisztens √°raz√°s a piacon!")
            else:
                st.info(f"‚ÑπÔ∏è **Norm√°lis √°rsz√≥r√≥d√°s**: {price_var_coeff:.1f}% vari√°ci√≥s egy√ºtthat√≥ - eg√©szs√©ges piaci diverzit√°s!")
    else:
        st.warning("‚ö†Ô∏è Nincs elegend≈ë adat a statisztikai elemz√©shez a kiv√°lasztott sz≈±r≈ëvel.")
    
    # Predikci√≥s modell
    st.header("üéØ √Årbecsl≈ë Modell")
    
    with st.expander("ü§ñ Hogyan m≈±k√∂dik az √°rbecsl≈ë modell?"):
        st.markdown("""
        **Mit csin√°l a modell?**
        - Elemzi a **t√∂rt√©nelmi adatokat** √©s keresi a mint√°zatokat
        - **Korrel√°ci√≥kat** sz√°mol a tulajdons√°gok √©s √°rak k√∂z√∂tt
        - **Kateg√≥ria √°tlagokat** k√©sz√≠t minden jellemz≈ëh√∂z
        
        **Korrel√°ci√≥s √©rt√©kek jelent√©se:**
        - **Magas pozit√≠v korrel√°ci√≥ (0.7+)**: Er≈ës √°rbefoly√°sol√≥ t√©nyez≈ë
        - **K√∂zepes korrel√°ci√≥ (0.3-0.7)**: M√©rs√©kelt hat√°s
        - **Alacsony korrel√°ci√≥ (0.0-0.3)**: Kis vagy nincs hat√°s
        
        **Kateg√≥ria √°tlag√°k haszn√°lata:**
        - **Emelet pr√©mium/diszkont** sz√°m√≠t√°sa
        - **√Ållapot szerinti** √°relt√©r√©sek
        - **Hirdet≈ë t√≠pus** hat√°sa az √°raz√°sra
        
        **Figyelem!** Ez egy egyszer≈± modell - val√≥s √©rt√©kbecsl√©shez 
        tov√°bbi t√©nyez≈ëk kellenek (lok√°ci√≥, parkol√°s, stb.)
        """)
    
    model_data = create_price_prediction_model(df)
    
    if model_data:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà Korrel√°ci√≥k")
            st.metric("Ter√ºlet - √År korrel√°ci√≥", f"{model_data['correlations']['ter√ºlet_√°r']:.3f}")
            st.metric("Szobasz√°m - √År korrel√°ci√≥", f"{model_data['correlations']['szoba_√°r']:.3f}")
        
        with col2:
            st.subheader("üí° Kateg√≥ria √Åtlag√°rak")
            
            # Emelet kateg√≥ria √°rak
            st.write("**Emelet kateg√≥ri√°k:**")
            for floor, price in model_data['category_prices']['emelet'].items():
                st.write(f"‚Ä¢ {floor}: {price:,.0f} Ft/m¬≤")
            
            # Hirdet≈ë t√≠pus √°rak
            st.write("**Hirdet≈ë t√≠pusok:**")
            for adv_type, price in model_data['category_prices']['hirdet≈ë'].items():
                if not pd.isna(price):
                    st.write(f"‚Ä¢ {adv_type}: {price:,.0f} Ft/m¬≤")
    
    # √öJ: Elad√≥-specifikus elemz√©s
    st.header("üè° Szem√©lyre Szabott Elad√≥i Tan√°csad√°s")
    
    with st.expander("üéØ Kiknek sz√≥l ez a szekci√≥?"):
        st.markdown("""
        **Ide√°lis lak√°selad√≥k sz√°m√°ra:**
        - üè† **50 m¬≤ k√∂r√ºli, 2 szob√°s lak√°s** tulajdonosai
        - üîß **K√∂zepes √°llapot√∫** ingatlan elad√≥i  
        - üè¢ **6. emeleti** vagy hasonl√≥ magass√°g√∫ lak√°sok
        - üí∞ **Re√°lis √°raz√°st** keres≈ë elad√≥k
        
        **Mit kapsz?**
        - Pontos **piaci pozicion√°l√°s** a hasonl√≥ ingatlanokhoz k√©pest
        - **Versenyhelyzet** elemz√©s  
        - **Elad√°si strat√©gia** javaslatok
        - **√Åraz√°si taktik√°k** a gyorsabb √©rt√©kes√≠t√©shez
        """)
    
    # Elad√≥ specifikus param√©tereinek be√°ll√≠t√°sa
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        target_area = st.number_input("Lak√°s m√©rete (m¬≤)", min_value=30, max_value=100, value=50, step=5)
    with col2:
        target_rooms = st.selectbox("Szob√°k sz√°ma", [1, 2, 3, 4], index=1)
    with col3:
        target_condition = st.selectbox("Ingatlan √°llapota", 
                                       ["fel√∫j√≠tott", "j√≥ √°llapot√∫", "k√∂zepes √°llapot√∫", "fel√∫j√≠tand√≥"],
                                       index=2)
    with col4:
        target_floor = st.number_input("Emelet", min_value=0, max_value=15, value=6, step=1)
    
    # Elad√≥-specifikus elemz√©s futtat√°sa
    seller_analysis = seller_specific_analysis(df, target_area, target_rooms, target_condition, target_floor)
    
    if seller_analysis:
        # Piaci poz√≠ci√≥
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìç A Te Lak√°sod Piaci Poz√≠ci√≥ja")
            
            similar_count = seller_analysis['hasonl√≥_ingatlanok']['darab']
            if similar_count > 0:
                avg_similar = seller_analysis['hasonl√≥_ingatlanok']['√°tlag_√°r']
                price_range = seller_analysis['hasonl√≥_ingatlanok']['√°r_tartom√°ny']
                
                st.metric("Hasonl√≥ ingatlanok sz√°ma", similar_count)
                st.metric("√Åtlagos m¬≤ √°r (hasonl√≥k)", f"{avg_similar:,.0f} Ft/m¬≤")
                st.metric("√År tartom√°ny", 
                         f"{price_range['min']:,.0f} - {price_range['max']:,.0f} Ft/m¬≤")
                
                # Javasolt √°r kalkul√°ci√≥
                suggested_price_low = avg_similar * 0.95  # 5% alatt az √°tlagnak
                suggested_price_high = avg_similar * 1.05  # 5% felett
                
                st.success(f"""
                üí∞ **Javasolt √°raz√°si s√°v**:
                {suggested_price_low:,.0f} - {suggested_price_high:,.0f} Ft/m¬≤
                
                **√ñsszesen**: {suggested_price_low * target_area / 1000000:.1f} - {suggested_price_high * target_area / 1000000:.1f} milli√≥ Ft
                """)
            else:
                st.warning("‚ö†Ô∏è Nem tal√°lhat√≥ elegend≈ë hasonl√≥ ingatlan a pontos √°raz√°shoz.")
        
        with col2:
            st.subheader("üéØ Elad√°si Strat√©gia")
            
            tactics = seller_analysis.get('elad√°si_taktik√°k', {})
            
            if 'kiemelend≈ë_tulajdons√°gok' in tactics:
                st.write("**üåü Kiemelend≈ë tulajdons√°gok:**")
                for prop in tactics['kiemelend≈ë_tulajdons√°gok']:
                    st.write(f"‚Ä¢ {prop}")
            
            if 'javasolt_√°r_strat√©gia' in tactics:
                strategy = tactics['javasolt_√°r_strat√©gia']
                if strategy == 'versenyk√©pes':
                    st.info("üí° **Javasolt strat√©gia**: Versenyk√©pes √°raz√°s - sok hasonl√≥ ingatlan van a piacon")
                else:
                    st.success("üí° **Javasolt strat√©gia**: Pr√©mium √°raz√°s - kev√©s konkurencia")
            
            if 'c√©lcsoport' in tactics:
                st.write(f"**üé™ F≈ë c√©lcsoport**: {tactics['c√©lcsoport']}")
        
        # Versenyhelyzet
        st.subheader("‚öîÔ∏è Versenyhelyzet Elemz√©se")
        
        competition = seller_analysis.get('verseny_elemz√©s', {})
        
        col1, col2 = st.columns(2)
        
        with col1:
            if 'hirdet≈ë_t√≠pusok' in competition:
                st.write("**üìä Hirdet≈ë t√≠pusok megoszl√°sa:**")
                for adv_type, count in competition['hirdet≈ë_t√≠pusok'].items():
                    percentage = (count / competition.get('teljes_k√≠n√°lat', 1)) * 100
                    st.write(f"‚Ä¢ {adv_type}: {count} db ({percentage:.1f}%)")
        
        with col2:
            if '√°llapot_konkurencia' in competition:
                st.write("**üè† √Ållapot szerinti konkurencia:**")
                for condition, count in competition['√°llapot_konkurencia'].items():
                    percentage = (count / competition.get('teljes_k√≠n√°lat', 1)) * 100
                    st.write(f"‚Ä¢ {condition}: {count} db ({percentage:.1f}%)")
        
        # Piaci poz√≠ci√≥ √©rt√©kel√©s
        if 'piaci_poz√≠ci√≥' in seller_analysis and seller_analysis['piaci_poz√≠ci√≥']:
            position_data = seller_analysis['piaci_poz√≠ci√≥']
            
            st.subheader("üìà Piaci Poz√≠ci√≥ √ârt√©kel√©s")
            
            category = position_data.get('kateg√≥ria', 'ismeretlen')
            deviation = position_data.get('elt√©r√©s_sz√°zal√©k', 0)
            
            if category == '√°tlag feletti':
                st.success(f"‚úÖ **Pr√©mium kateg√≥ria**: A hasonl√≥ ingatlanok {abs(deviation):.1f}%-kal dr√°g√°bbak az √°tlagn√°l!")
            elif category == '√°tlag alatti':
                st.warning(f"‚ö†Ô∏è **Alacsonyabb szegmens**: A hasonl√≥ ingatlanok {abs(deviation):.1f}%-kal olcs√≥bbak az √°tlagn√°l")
            else:
                st.info("‚ÑπÔ∏è **√Åtlagos piaci szegmens**: A hasonl√≥ ingatlanok az √°tlagos √°rsz√≠nvonalon mozognak")
    
    # Befektet√©si elemz√©s
    st.header("üíº Befektet√©si Elemz√©s")
    
    with st.expander("üí∞ Befektet√©si pontsz√°m magyar√°zata"):
        st.markdown("""
        **Hogyan sz√°moljuk a befektet√©si pontsz√°mot?**
        - **√Ållapot pontsz√°m (40%)**: Fel√∫j√≠tott=3, J√≥=2, K√∂zepes=1, Fel√∫j√≠tand√≥=0
        - **√År poz√≠ci√≥ (60%)**: Alacsonyabb √°r = magasabb pontsz√°m
        - **V√©gs≈ë pontsz√°m**: 0.0 (legrosszabb) - 1.0 (legjobb) sk√°l√°n
        
        **Mit keresek a t√°bl√°zatban?**
        - **Magas pontsz√°m (0.7+)**: Kiv√°l√≥ √°r/√©rt√©k ar√°ny
        - **K√∂zepes pontsz√°m (0.4-0.7)**: Megfontol√°sra √©rdemes
        - **Alacsony pontsz√°m (0.0-0.4)**: Dr√°ga vagy rossz √°llapot√∫
        
        **Befektet√©si strat√©gi√°k:**
        - **Mag√°nszem√©ly hirdet√©sek**: Gyakran rugalmasabb √°r
        - **Ingatlaniroda**: Profi √°raz√°s, kev√©s alkudoz√°si lehet≈ës√©g
        - **Bizonytalan kateg√≥ria**: Tov√°bbi kutat√°st ig√©nyel
        
        **Kock√°zati t√©nyez≈ëk:**
        - Fel√∫j√≠tand√≥ ingatlanok: +id≈ëig√©ny, +kock√°zat, de +potenci√°l
        - Fels≈ë emeletek: Lift-f√ºgg≈ës√©g, kisebb c√©lcsoport
        """)
    
    # √Ållapot sz≈±r≈ë a befektet√©si elemz√©shez
    col_filter, col_space = st.columns([1, 3])
    with col_filter:
        investment_condition_filter = st.selectbox(
            "üè† √Ållapot sz≈±r≈ë (befektet√©si elemz√©s)",
            options=["√ñsszes √°llapot"] + list(df['ingatlan_allapota'].dropna().unique()),
            index=0,
            key="investment_analysis_filter"
        )
    
    # Sz≈±rt adatok a befektet√©si elemz√©shez
    if investment_condition_filter != "√ñsszes √°llapot":
        df_investment_base = df[df['ingatlan_allapota'] == investment_condition_filter]
        st.info(f"üìä Befektet√©si elemz√©s sz≈±rve: **{investment_condition_filter}** √°llapot√∫ ingatlanok ({len(df_investment_base)} db)")
    else:
        df_investment_base = df
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üéØ Legjobb √°r/√©rt√©k ar√°ny")
        
        # √År/√©rt√©k sz√°m√≠t√°s (alacsonyabb √°r + jobb √°llapot = jobb deal)
        df_investment = df_investment_base.dropna(subset=['ar_szam', 'ingatlan_allapota']).copy()
        
        if len(df_investment) > 0:
            # √Ållapot pontoz√°s
            condition_scores = {'fel√∫j√≠tott': 3, 'j√≥ √°llapot√∫': 2, 'k√∂zepes √°llapot√∫': 1, 'fel√∫j√≠tand√≥': 0}
            df_investment['allapot_pont'] = df_investment['ingatlan_allapota'].map(condition_scores).fillna(1)
            
            # √År percentil (alacsonyabb = jobb)
            df_investment['ar_percentil'] = df_investment['ar_szam'].rank(pct=True)
            
            # Befektet√©si pontsz√°m
            df_investment['befektetes_pont'] = (
                df_investment['allapot_pont'] * 0.4 + 
                (1 - df_investment['ar_percentil']) * 0.6
            )
            
            top_investments = df_investment.nlargest(min(5, len(df_investment)), 'befektetes_pont')[
                ['id', 'cim', 'ar_szam', 'ingatlan_allapota', 'befektetes_pont', 'hirdeto_tipus']
            ]
            
            st.dataframe(top_investments, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Nincs elegend≈ë adat a befektet√©si elemz√©shez a kiv√°lasztott sz≈±r≈ëvel.")
    
    with col2:
        st.subheader("üìä Hirdet≈ë t√≠pus elemz√©s")
        
        if len(df_investment_base) > 0:
            advertiser_analysis = df_investment_base.groupby('hirdeto_tipus').agg({
                'ar_szam': ['mean', 'std'],
                'id': 'count'
            }).round(0)
            advertiser_analysis.columns = ['√Åtlag √°r', 'Sz√≥r√°s', 'Darab']
            
            st.dataframe(advertiser_analysis, use_container_width=True)
            
            # Hirdet≈ë t√≠pus insight
            if len(df_investment_base['hirdeto_tipus'].value_counts()) > 0:
                most_common = df_investment_base['hirdeto_tipus'].value_counts().index[0]
                most_common_pct = (df_investment_base['hirdeto_tipus'].value_counts().iloc[0] / len(df_investment_base)) * 100
                st.info(f"üí° A sz≈±rt adatok k√∂z√∂tt a legt√∂bb hirdet√©s ({most_common_pct:.0f}%) **{most_common}** kateg√≥ri√°ba tartozik")
        else:
            st.warning("‚ö†Ô∏è Nincs adat a kiv√°lasztott sz≈±r≈ëh√∂z.")    # R√©szletes sz≈±r≈ëk
    st.header("üîç R√©szletes Sz≈±r≈ëk √©s Keres√©s")
    
    st.markdown("""
    **Haszn√°ld a sz≈±r≈ëket a szem√©lyre szabott keres√©shez:**
    - **√År tartom√°ny**: Hat√°rozd meg a k√∂lts√©gvet√©sed
    - **Emelet**: V√°laszd ki a prefer√°lt szintet 
    - **Hirdet≈ë t√≠pus**: Mag√°nszem√©ly vs. iroda hirdet√©sek
    - **√Ållapot**: Sz≈±rj a fel√∫j√≠t√°s m√©rt√©ke szerint
    """)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        price_range = st.slider(
            "M¬≤ √°r tartom√°ny (Ft)",
            int(df['ar_szam'].min()),
            int(df['ar_szam'].max()),
            (int(df['ar_szam'].min()), int(df['ar_szam'].max()))
        )
    
    with col2:
        selected_floors = st.multiselect(
            "Emelet kateg√≥ri√°k",
            options=df['emelet_kategoria'].unique(),
            default=df['emelet_kategoria'].unique()
        )
    
    with col3:
        selected_advertisers = st.multiselect(
            "Hirdet≈ë t√≠pusok",
            options=df['hirdeto_tipus'].dropna().unique(),
            default=df['hirdeto_tipus'].dropna().unique()
        )
    
    with col4:
        selected_conditions = st.multiselect(
            "Ingatlan √°llapota",
            options=df['ingatlan_allapota'].dropna().unique(),
            default=df['ingatlan_allapota'].dropna().unique()
        )
    
    # Sz≈±rt adatok
    filtered_df = df[
        (df['ar_szam'] >= price_range[0]) &
        (df['ar_szam'] <= price_range[1]) &
        (df['emelet_kategoria'].isin(selected_floors)) &
        (df['hirdeto_tipus'].isin(selected_advertisers)) &
        (df['ingatlan_allapota'].isin(selected_conditions))
    ]
    
    st.subheader(f"üéØ Sz≈±rt eredm√©nyek: {len(filtered_df)} ingatlan")
    
    if len(filtered_df) > 0:
        # Kiemelt oszlopok megjelen√≠t√©se
        display_cols = ['id', 'cim', 'teljes_ar', 'terulet', 'nm_ar', 'szobak', 
                       'emelet_kategoria', 'ingatlan_allapota', 'hirdeto_tipus']
        
        st.info(f"""
        **üìã Sz≈±rt eredm√©nyek √©rtelmez√©se:**
        - **ID**: Ingatlan azonos√≠t√≥ (ingatlan.com-on kereshet≈ë)
        - **C√≠m**: Pontos c√≠m vagy k√∂rny√©k
        - **Teljes √°r**: √ñsszes v√©tel√°r
        - **Ter√ºlet**: Lak√°s m√©rete m¬≤-ben
        - **Nm √°r**: N√©gyzetm√©ter √°r (√∂sszehasonl√≠t√°shoz)
        - **Szob√°k**: Szob√°k sz√°ma + nappali
        - **Emelet kateg√≥ria**: Algoritmus √°ltal kategoriz√°lt szint
        - **√Ållapot**: Fel√∫j√≠t√°si ig√©ny m√©rt√©ke
        - **Hirdet≈ë**: Ki adja el (befoly√°solja az alkudozhat√≥s√°got)
        """)
        
        st.dataframe(filtered_df[display_cols], use_container_width=True)
    else:
        st.warning("üîç A sz≈±r√©si felt√©teleknek megfelel≈ë ingatlan nem tal√°lhat√≥. M√≥dos√≠tsd a sz≈±r≈ëket!")
    
    # Export lehet≈ës√©g
    st.header("üì• Adatok Export√°l√°sa")
    
    if st.button("üìä Export√°ld a sz≈±rt adatokat CSV-be"):
        csv = filtered_df.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="üíæ CSV Let√∂lt√©s",
            data=csv,
            file_name=f"kobanyi_ingatlan_szurt_{len(filtered_df)}_db.csv",
            mime="text/csv"
        )
    
    # √öJ: AI Hirdet√©si Sz√∂veg Gener√°tor
    st.header("ü§ñ AI Hirdet√©si Sz√∂veg Gener√°tor")
    
    with st.expander("üìù Mire j√≥ ez a funkci√≥?"):
        st.markdown("""
        **üéØ Profi hirdet√©si sz√∂veg gener√°l√°s**:
        - **Piaci adatok alapj√°n** optimaliz√°lt sz√∂veg
        - **SEO-bar√°t** kulcsszavak automatikus be√©p√≠t√©se
        - **Elad√°si strat√©giai tan√°csok** integr√°l√°sa
        - **Lok√°ci√≥-specifikus** el≈ëny√∂k kiemel√©se
        
        **Hogyan m≈±k√∂dik?**
        - Elemzi a hasonl√≥ ingatlanok le√≠r√°sait
        - Kisz√°molja a javasolt √°raz√°st
        - Gener√°lja a leghat√©konyabb kulcsszavakat
        - Szem√©lyre szabott sz√∂veget k√©sz√≠t
        """)
    
    st.subheader("üè† Ingatlan adatok megad√°sa")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        listing_area = st.number_input("Lak√°s m√©rete (m¬≤)", min_value=20, max_value=150, value=49, step=1, key="listing_area")
    with col2:
        listing_rooms = st.selectbox("Szob√°k sz√°ma", [1, 2, 3, 4, 5], index=1, key="listing_rooms")
    with col3:
        listing_condition = st.selectbox("√Ållapot", 
                                       ["fel√∫j√≠tott", "j√≥ √°llapot√∫", "k√∂zepes √°llapot√∫", "fel√∫j√≠tand√≥"],
                                       index=2, key="listing_condition")
    with col4:
        listing_floor = st.number_input("Emelet", min_value=0, max_value=15, value=6, step=1, key="listing_floor")
    
    if st.button("üöÄ Hirdet√©si sz√∂veg gener√°l√°sa", type="primary"):
        with st.spinner("ü§ñ AI gener√°lja a hirdet√©si sz√∂veget..."):
            # Hirdet√©si sz√∂veg gener√°l√°sa
            listing_text = generate_listing_text(listing_area, listing_rooms, listing_condition, listing_floor, df)
            
            st.success("‚úÖ Hirdet√©si sz√∂veg elk√©sz√ºlt!")
            
            # Sz√∂veg megjelen√≠t√©se szerkeszthet≈ëen
            st.subheader("üìù Gener√°lt hirdet√©si sz√∂veg")
            
            edited_text = st.text_area(
                "Szerkeszthet≈ë hirdet√©si sz√∂veg:",
                value=listing_text,
                height=600,
                help="Szerkeszd a sz√∂veget ig√©nyeid szerint, majd m√°sold ki!"
            )
            
            # Statisztik√°k a gener√°lt sz√∂vegr≈ël
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("üìè Karakterek sz√°ma", len(edited_text))
            with col2:
                st.metric("üìù Szavak sz√°ma", len(edited_text.split()))
            with col3:
                st.metric("üìä Sorok sz√°ma", edited_text.count('\n') + 1)
            with col4:
                emojik = len([c for c in edited_text if ord(c) > 127])
                st.metric("üéØ Emojik sz√°ma", emojik)
            
            # M√°sol√°s seg√≠ts√©g
            st.info("""
            üí° **Haszn√°lati tippek:**
            - **Ctrl+A** ‚Üí teljes sz√∂veg kijel√∂l√©se
            - **Ctrl+C** ‚Üí m√°sol√°s
            - **Customize** ‚Üí m√≥dos√≠tsd a sz√∂veget saj√°t ig√©nyeid szerint
            - **Platformok**: Facebook Marketplace, ingatlan.com, OtthonCentrum
            """)

def generate_listing_text(area, rooms, condition, floor, df):
    """AI-alap√∫ hirdet√©si sz√∂veg gener√°l√°s"""
    
    # Piaci adatok gy≈±jt√©se
    similar_props = df[
        (abs(df['terulet_szam'] - area) <= 10) &
        (df['szobak'] == rooms)
    ]
    
    avg_price = similar_props['ar_szam'].mean() if len(similar_props) > 0 else df['ar_szam'].mean()
    
    # Emelet el≈ëny√∂k/h√°tr√°nyok
    if floor >= 6:
        floor_benefits = "A magasabb emelet csod√°latos kil√°t√°st biztos√≠t a k√∂rnyez≈ë z√∂ld ter√ºletekre, mik√∂zben csendes, nyugodt k√∂rnyezetet teremt."
    elif 3 <= floor <= 5:
        floor_benefits = "Az optim√°lis emeleti magass√°g ide√°lis kompromisszum a k√∂nny≈± megk√∂zel√≠thet≈ës√©g √©s a sz√©p kil√°t√°s k√∂z√∂tt."
    else:
        floor_benefits = "Az alacsonyabb emelet k√∂nnyen megk√∂zel√≠thet≈ë, ide√°lis id≈ësebb lak√≥k √©s csal√°dok sz√°m√°ra."
    
    # √Ållapot le√≠r√°sa
    condition_desc = {
        'fel√∫j√≠tott': 'teljesen fel√∫j√≠tott, azonnal k√∂lt√∂zhet≈ë',
        'j√≥ √°llapot√∫': 'kiv√°l√≥ √°llapotban, minim√°lis befektet√©ssel t√∂k√©letes',
        'k√∂zepes √°llapot√∫': 'j√≥ √°llapotban, saj√°t √≠zl√©s szerint alak√≠that√≥',
        'fel√∫j√≠tand√≥': 'nagyszer≈± befektet√©si lehet≈ës√©g, saj√°t elk√©pzel√©sek szerint alak√≠that√≥'
    }.get(condition, 'rendezett √°llapotban')
    
    # √Åraz√°si strat√©gia
    if avg_price > 0:
        suggested_price = avg_price * area
        price_text = f"√År: {suggested_price/1000000:.1f} milli√≥ Ft ({avg_price:,.0f} Ft/m¬≤)"
    else:
        price_text = "Versenyk√©pes √°raz√°s"
    
    # Hirdet√©si sz√∂veg √∂ssze√°ll√≠t√°sa
    listing_text = f"""üè† **ELAD√ì: {rooms} szob√°s, {area}m¬≤ lak√°s a K≈ëb√°nya-√öjhegyi lak√≥telepen**

üìç **Lok√°ci√≥**: K≈ëb√°nya X. ker√ºlet, √öjhegyi lak√≥telep - Budapest egyik legkedveltebb, z√∂ld k√∂rnyezet≈± lak√≥telep√©n

üè¢ **Ingatlan jellemz≈ëi**:
‚Ä¢ {area} m¬≤ hasznos ter√ºlet
‚Ä¢ {rooms} szoba + nappali + konyha + f√ºrd≈ëszoba
‚Ä¢ {floor}. emelet
‚Ä¢ {condition_desc}

‚ú® **Kiemelked≈ë el≈ëny√∂k**:
‚Ä¢ {floor_benefits}
‚Ä¢ Panelprogramon √°tesett, szigetelt √©p√ºlet - alacsony rezsik√∂lts√©gek
‚Ä¢ T√°vf≈±t√©s - megb√≠zhat√≥, gazdas√°gos
‚Ä¢ Ingyenes parkol√°si lehet≈ës√©g az √©p√ºlet el≈ëtt
‚Ä¢ Kiv√°l√≥ t√∂megk√∂zleked√©s - k√∂zvetlen buszj√°ratok a metr√≥hoz

üåü **K√∂rnyezet √©s szolg√°ltat√°sok**:
‚Ä¢ Z√∂ld, parkokkal teli lak√≥telepi k√∂rnyezet
‚Ä¢ 5 percre gyalogosan bev√°s√°rl√°si k√∂zpontok (Auchan, Interspar)
‚Ä¢ K√∂zeli eg√©szs√©g√ºgyi ell√°t√°s (Bajcsy K√≥rh√°z)
‚Ä¢ Iskol√°k √©s √≥vod√°k a k√∂zelben
‚Ä¢ Sportol√°si √©s szabadid≈ës lehet≈ës√©gek

üí∞ **{price_text}**

üìû **Tov√°bbi inform√°ci√≥ √©s megtekint√©s**:
Az ingatlan tehermentes, gyorsan k√∂lt√∂zhet≈ë. Rugalmas megtekint√©si lehet≈ës√©gek.
Befektet√©sk√©nt is kiv√°l√≥ v√°laszt√°s - stabil b√©rleti piac.

üì± H√≠vjon bizalommal! Minden k√©rd√©s√©re v√°laszt adok.

#K≈ëb√°nyaIngatlan #√öjhegyiLak√≥telep #BudapestElad√≥Lak√°s #PanelProgramos #IngyenesParkol√°s"""
    
    return listing_text.strip()

if __name__ == "__main__":
    main()
