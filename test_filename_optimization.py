#!/usr/bin/env python3
"""
Teszt script az √∫j egyszer≈±s√≠tett f√°jln√©v gener√°l√°shoz - EREDETI K√ìDDAL
"""

import sys
import os
import datetime
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
import re

def extract_location_original(url):
    """EREDETI _extract_location f√ºggv√©ny a k√≥db√≥l"""
    try:
        path = urlparse(url).path
        # Keres√©si r√©sz megtal√°l√°sa
        path_parts = path.split('/')
        search_part = ""
        
        for part in path_parts:
            if any(word in part for word in ['elado', 'kiado', 'berlet']):
                search_part = part
                break
        
        if not search_part and path_parts:
            search_part = path_parts[-1]
        
        # F√ñLDRAJZI LOK√ÅCI√ì KINYER√âSE
        # Elt√°vol√≠tjuk a t√≠pus √©s √°llapot sz≈±r≈ëket, csak a helys√©get hagyjuk meg
        location_only = search_part
        
        # Elt√°vol√≠tjuk az ingatlan t√≠pust (elado+haz, elado+lakas, stb.)
        location_only = re.sub(r'(elado|kiado|berlet)\+[^+]*\+?', '', location_only)
        
        # Elt√°vol√≠tjuk az √°llapot sz≈±r≈ëket
        allapot_szurok = [
            'uj_epitesu', 'ujszeru', 'felujitott', 'jo_allapot', 'kituno_allapot', 
            'kozepes_allapot', 'felujitando', 'rossz_allapot', 'bonthato',
            'uj-epitesu', 'jo-allapot', 'kituno-allapot', 'kozepes-allapot',
            'epitesu', 'uj', 'ujszeru', 'felujitott', 'jo', 'allapot'  # R√©szletek is
        ]
        
        for szuro in allapot_szurok:
            location_only = location_only.replace(f'+{szuro}', '').replace(f'{szuro}+', '').replace(szuro, '')
        
        # √År sz≈±r≈ëk elt√°vol√≠t√°sa (pl: 80-500-mFt, 80-500-mft, 100_200_m_ft)
        location_only = re.sub(r'\+?\d+[\-_]\d+[\-_]?m?[Ff]t\+?', '', location_only)
        location_only = re.sub(r'\+?\d+_\d+_m_ft\+?', '', location_only)
        location_only = re.sub(r'\+?\d+\-\d+\-m\-?ft\+?', '', location_only)
        location_only = re.sub(r'\+?\d+\-\d+\-mft\+?', '', location_only)
        
        # Egyedi sz√°mok elt√°vol√≠t√°sa (pl. "20" n√©gyzetm√©ter vagy egy√©b sz≈±r≈ëk) 
        location_only = re.sub(r'\+?\d{1,3}\+?', '', location_only)
        
        # Dupla + jelek elt√°vol√≠t√°sa √©s tiszt√≠t√°s
        location_only = re.sub(r'\+{2,}', '+', location_only)
        location_only = location_only.strip('+')
        
        # Ha √ºres, akkor pr√≥b√°ljunk kivenni budapest/helys√©g r√©szeket
        if not location_only or len(location_only) < 3:
            # Eredeti search_part-b√≥l keress√ºk a budapest, ker√ºlet, vagy helys√©g r√©szeket
            helyseg_reszek = []
            parts = search_part.replace('+', ' ').replace('-', ' ').split()
            
            budapest_found = False
            for i, part in enumerate(parts):
                part_lower = part.lower()
                # Budapest vagy ker√ºlet
                if part_lower in ['budapest', 'bp']:
                    helyseg_reszek.append('budapest')
                    budapest_found = True
                elif 'kerulet' in part_lower or 'ker' in part_lower:
                    # El≈ëz≈ë r√©sz keres√©se (pl: ii, xiii, 12, stb.)
                    if i > 0:
                        prev_part = parts[i-1].lower()
                        if prev_part in ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii'] or prev_part.isdigit():
                            helyseg_reszek.append(f'{prev_part}_ker')
                    elif not budapest_found:
                        helyseg_reszek.append('kerulet')
                elif part_lower in ['budaors', 'buda√∂rs', 'erd', 'torokbalint', 't√∂r√∂kb√°lint', 'szentendre', 'godllo', 'g√∂d√∂ll≈ë', 'vac', 'v√°c', 'dunakeszi', 'pilisvorosvar', 'piliscsaba']:
                    helyseg_reszek.append(part_lower.replace('√∂', 'o').replace('≈ë', 'o').replace('√°', 'a').replace('√©', 'e'))
            
            if helyseg_reszek:
                location_only = '_'.join(helyseg_reszek)
            else:
                # Utols√≥ es√©ly: els≈ë 2-3 √©rtelmesnek t≈±n≈ë r√©sz
                meaningful_parts = []
                for part in parts[:4]:  # Els≈ë 4 r√©szt n√©zz√ºk
                    part_lower = part.lower()
                    if part_lower not in ['elado', 'kiado', 'berlet', 'haz', 'lakas', 'telek', 'iroda', 'uzlet'] and len(part) > 2:
                        meaningful_parts.append(part_lower)
                    if len(meaningful_parts) >= 2:  # Max 2 r√©sz
                        break
                location_only = '_'.join(meaningful_parts) if meaningful_parts else 'ingatlan_kereses'
        
        # Biztons√°gos f√°jln√©v k√©sz√≠t√©se
        safe_name = re.sub(r'[^\w\-_]', '_', location_only)
        safe_name = safe_name.replace('-', '_')
        safe_name = re.sub(r'_{2,}', '_', safe_name)
        safe_name = safe_name.strip('_')
        
        return safe_name[:50] if safe_name else "ingatlan_kereses"
    except Exception as e:
        print(f"‚ö†Ô∏è Location extraction hiba: {e}")
        return "ingatlan_kereses"

def test_filename_generation():
    """Tesztelj√ºk az √∫j f√°jln√©v gener√°l√°st"""
    print("üß™ F√°jln√©v optimaliz√°ci√≥ teszt - EREDETI ALGORITMUS")
    print("="*60)
    
    # Test k√ºl√∂nb√∂z≈ë URL-ekkel
    test_cases = [
        "https://ingatlan.com/lista/elado+haz+80-500-mFt+budaors",
        "https://ingatlan.com/lista/elado+haz+80-600-mFt+budapest+xii-ker+20",
        "https://ingatlan.com/lista/elado+haz+uj-epitesu+ujszeru+felujitott+jo-allapot",
        "https://ingatlan.com/lista/elado+haz+erd+erdliget"
    ]
    
    for url in test_cases:
        location = extract_location_original(url)
        
        # F√°jln√©v gener√°l√°s szimul√°l√°sa
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        base_filename = f"ingatlan_reszletes_{location}_{timestamp}.csv"
        
        print(f"üîó URL: {url}")
        print(f"üìç Location: {location}")
        print(f"üìÅ Filename: {base_filename}")
        print("-" * 60)

if __name__ == "__main__":
    test_filename_generation()
