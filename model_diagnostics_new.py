"""
Modell Diagnosztika - Mi√©rt alulbecs√ºl a modell?
==============================================
Elemezz√ºk ki mi√©rt j√∂n ki 66.7M Ft helyett 120-140M Ft
"""

import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

def diagnose_model_problems():
    """
    Diagnosztikai elemz√©s a modell alulbecsl√©s√©nek okair√≥l
    """
    st.title("üîç Modell Diagnosztika - Alulbecsl√©s Elemz√©se")
    
    # Adatok bet√∂lt√©se
    df = pd.read_csv("ingatlan_reszletes_elado_haz_erd_erdliget_20250820_014506.csv", encoding='utf-8-sig')
    
    # C√©lv√°ltoz√≥ parse
    def parse_million_ft(text):
        if pd.isna(text):
            return None
        text = str(text).replace(',', '.')
        import re
        match = re.search(r'(\d+(?:\.\d+)?)\s*M', text)
        return float(match.group(1)) if match else None
    
    df['target_ar'] = df['teljes_ar'].apply(parse_million_ft)
    
    # Ter√ºlet parse
    def parse_terulet(text):
        if pd.isna(text):
            return None
        import re
        match = re.search(r'(\d+)', str(text))
        return int(match.group(1)) if match else None
    
    df['terulet_szam'] = df['terulet'].apply(parse_terulet)
    
    st.subheader("üìä 1. Adatok eloszl√°sa")
    
    # Tiszta adatok
    clean_df = df[df['target_ar'].notna() & df['terulet_szam'].notna()].copy()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("√ñsszes adat", len(df))
        st.metric("Tiszta √°r adat", len(clean_df))
    
    with col2:
        if len(clean_df) > 0:
            st.metric("Min √°r", f"{clean_df['target_ar'].min():.1f} M Ft")
            st.metric("Max √°r", f"{clean_df['target_ar'].max():.1f} M Ft")
    
    with col3:
        if len(clean_df) > 0:
            st.metric("√Åtlag √°r", f"{clean_df['target_ar'].mean():.1f} M Ft")
            st.metric("Medi√°n √°r", f"{clean_df['target_ar'].median():.1f} M Ft")
    
    # √År eloszl√°s
    if len(clean_df) > 0:
        fig_hist = px.histogram(clean_df, x='target_ar', nbins=20, title="√Årak eloszl√°sa")
        fig_hist.add_vline(x=120, line_dash="dash", line_color="red", annotation_text="Tesztelt h√°z: 120M Ft")
        fig_hist.add_vline(x=66.7, line_dash="dash", line_color="orange", annotation_text="Modell becsl√©s: 66.7M Ft")
        st.plotly_chart(fig_hist, use_container_width=True)
    
    # Ter√ºlet vs √°r
    st.subheader("üìè 2. Ter√ºlet vs √År elemz√©s")
    
    if len(clean_df) > 5:
        fig_scatter = px.scatter(clean_df, x='terulet_szam', y='target_ar', 
                                title="Ter√ºlet vs √År", opacity=0.7)
        
        # Tesztelt h√°z kiemel√©se
        fig_scatter.add_scatter(x=[144], y=[120], mode='markers', 
                               marker=dict(color='red', size=15), 
                               name="Tesztelt h√°z (144m¬≤, 120M Ft)")
        
        fig_scatter.add_scatter(x=[144], y=[66.7], mode='markers', 
                               marker=dict(color='orange', size=15), 
                               name="Modell becsl√©s (144m¬≤, 66.7M Ft)")
        
        st.plotly_chart(fig_scatter, use_container_width=True)
        
        # Trend vonal
        if len(clean_df) > 10:
            # Egyszer≈± line√°ris regresszi√≥
            from sklearn.linear_model import LinearRegression
            X = clean_df[['terulet_szam']].dropna()
            y = clean_df['target_ar'][X.index]
            
            model = LinearRegression()
            model.fit(X, y)
            
            # Becsl√©s a trendvonalra
            trend_pred = model.predict([[144]])[0]
            st.info(f"üìà **Egyszer≈± trend alapj√°n 144m¬≤-re**: {trend_pred:.1f} M Ft")
            
            # R¬≤ 
            r2 = model.score(X, y)
            st.info(f"üìä **Ter√ºlet-√°r korrel√°ci√≥ R¬≤**: {r2:.3f}")
    
    # √Ållapot elemz√©s
    st.subheader("üè† 3. √Ållapot szerinti √°rak")
    
    if 'ingatlan_allapota' in df.columns:
        allapot_df = clean_df[clean_df['ingatlan_allapota'].notna()].copy()
        
        if len(allapot_df) > 0:
            allapot_summary = allapot_df.groupby('ingatlan_allapota').agg({
                'target_ar': ['count', 'mean', 'median', 'min', 'max']
            }).round(1)
            
            allapot_summary.columns = ['Darab', '√Åtlag', 'Medi√°n', 'Min', 'Max']
            allapot_summary = allapot_summary.reset_index()
            
            st.dataframe(allapot_summary, use_container_width=True)
            
            # Kiemel√©s a fel√∫j√≠tott h√°zakra
            felujitott = allapot_df[allapot_df['ingatlan_allapota'].str.contains('fel√∫j√≠tott', case=False, na=False)]
            if len(felujitott) > 0:
                st.success(f"‚úÖ **Fel√∫j√≠tott h√°zak √°tlaga**: {felujitott['target_ar'].mean():.1f} M Ft ({len(felujitott)} db)")
    
    # Potenci√°lis probl√©m√°k azonos√≠t√°sa
    st.subheader("‚ö†Ô∏è 4. Potenci√°lis probl√©m√°k")
    
    problems = []
    
    # 1. Kis adatmennyis√©g
    if len(clean_df) < 50:
        problems.append(f"üî∏ **Kis adatmennyis√©g**: Csak {len(clean_df)} tiszta adat ‚Üí modell instabil")
    
    # 2. Outlier elemz√©s
    if len(clean_df) > 10:
        Q1 = clean_df['target_ar'].quantile(0.25)
        Q3 = clean_df['target_ar'].quantile(0.75)
        IQR = Q3 - Q1
        upper_bound = Q3 + 1.5 * IQR
        
        if 120 > upper_bound:
            problems.append(f"üî∏ **120M Ft outlier**: T√∫l magas az adatsethez k√©pest (fels≈ë hat√°r: {upper_bound:.1f}M)")
    
    # 3. Ter√ºlet-alap√∫ becsl√©s
    if len(clean_df) > 5:
        avg_price_per_m2 = (clean_df['target_ar'] * 1_000_000 / clean_df['terulet_szam']).mean()
        expected_price = (avg_price_per_m2 * 144) / 1_000_000
        problems.append(f"üî∏ **√Åtlag m¬≤-√°r alap√∫ becsl√©s**: {expected_price:.1f}M Ft (√°tlag: {avg_price_per_m2:,.0f} Ft/m¬≤)")
    
    # 4. Modell t√≠pus
    problems.append("üî∏ **Modell limit√°ci√≥**: Az ML modell t√∫l konzervat√≠v, nem veszi figyelembe a pr√©mium faktorokat")
    
    # 5. Feature hi√°nyoss√°gok
    problems.append("üî∏ **Hi√°nyz√≥ faktorok**: lok√°ci√≥, k√∂rny√©k pr√©mium, renovation min≈ës√©ge, modern felszerelts√©g stb.")
    
    for problem in problems:
        st.warning(problem)
    
    # Megold√°si javaslatok
    st.subheader("üí° 5. Megold√°si javaslatok")
    
    solutions = [
        "üéØ **Modell rekalibr√°l√°s**: Magasabb base price √©s pr√©mium faktorok",
        "üìà **Trend korrekcio**: Aktu√°lis piaci trend figyelembe v√©tele (+15-20%)",
        "üèòÔ∏è **Lok√°ci√≥s pr√©mium**: Erdliget pr√©mium telep√ºl√©sr√©sz (+10-15%)",
        "üîß **Fel√∫j√≠t√°si bonus**: Fel√∫j√≠tott h√°zakra extra szorz√≥ (+20-30%)",
        "üìä **Ensemble s√∫lyoz√°s**: T√∂bb modell kombin√°l√°sa konzervat√≠v helyett",
        "üéöÔ∏è **Price floor**: Minimum √°r/m¬≤ garancia pr√©mium ingatlanokra"
    ]
    
    for solution in solutions:
        st.success(solution)
    
    # Gyors korrekci√≥s kalkul√°tor
    st.subheader("‚ö° 6. Korrekci√≥s Kalkul√°tor")
    
    if len(clean_df) > 5:
        base_prediction = 66.7  # Jelenlegi becsl√©s
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Korrekci√≥s faktorok:**")
            market_trend = st.slider("Piaci trend (%)", 0, 30, 15)
            location_premium = st.slider("Erdliget pr√©mium (%)", 0, 20, 10)
            renovation_bonus = st.slider("Fel√∫j√≠t√°si bonus (%)", 0, 40, 25)
            size_premium = st.slider("M√©ret pr√©mium 144m¬≤ (%)", 0, 15, 8)
        
        with col2:
            # Korrig√°lt becsl√©s
            corrected_price = base_prediction
            corrected_price *= (1 + market_trend/100)
            corrected_price *= (1 + location_premium/100)
            corrected_price *= (1 + renovation_bonus/100)
            corrected_price *= (1 + size_premium/100)
            
            st.metric("**Korrig√°lt becsl√©s**", f"{corrected_price:.1f} M Ft")
            
            difference = corrected_price - base_prediction
            st.metric("**Korr–µ–∫ci√≥**", f"+{difference:.1f} M Ft ({((corrected_price/base_prediction-1)*100):.0f}%)")
            
            # Re√°lis tartom√°ny
            if corrected_price >= 120 and corrected_price <= 140:
                st.success("‚úÖ Re√°lis tartom√°nyban!")
            elif corrected_price < 120:
                st.warning("‚ö†Ô∏è M√©g mindig alacsony")
            else:
                st.error("‚ùå T√∫l magas")

if __name__ == "__main__":
    diagnose_model_problems()
