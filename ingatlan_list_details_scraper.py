#!/usr/bin/env python3
"""
KOMPLETT INGATLAN ELEMZ≈ê PIPELINE
=================================
1. URL bek√©r√©s √©s 300-as limit hozz√°ad√°sa
2. Lista scraping (URL, √°r, m2 √°r, c√≠m, alapter√ºlet, szobasz√°m) 
3. R√©szletes scraping (le√≠r√°s, √©p√≠t√©s √©ve, emelet, √°llapot stb.)
4. Dashboard gener√°l√°s automatikus f√°jlnevekkel

Haszn√°lat: python ingatlan_komplett_pipeline.py
"""

import asyncio
import os
import re
import sys
from datetime import datetime
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
import pandas as pd
import numpy as np
import subprocess
from collections import Counter, defaultdict
from playwright.async_api import async_playwright

class IngatlanSzovegelemzo:
    """
    Be√©p√≠tett sz√∂veganal√≠zis modul - Enhanced feature-k gener√°l√°sa
    """
    def __init__(self):
        """Inicializ√°lja a kateg√≥ri√°kat √©s kulcsszavakat"""
        
        # √âRT√âKBEFOLY√ÅSOL√ì KATEG√ìRI√ÅK √âS KULCSSZAVAIK
        self.kategoriak = {
            'LUXUS_MINOSEG': {
                'kulcsszavak': [
                    'luxus', 'pr√©mium', 'eleg√°ns', 'exkluz√≠v', 'k√ºl√∂nleges', 'leny≈±g√∂z≈ë',
                    'kiv√©teles', 'egyedi', 'reprezentat√≠v', 'ig√©nyes', 'st√≠lusos',
                    'designer', 'magas sz√≠nvonal', 'min≈ës√©gi', 'design', 'diz√°jn'
                ],
                'pontszam': 3.0
            },
            
            'KERT_KULSO': {
                'kulcsszavak': [
                    'parkos√≠tott', 'kert', 'telek', 'udvar', 'kert√©szked√©s', 'gy√ºm√∂lcsfa',
                    'n√∂v√©nyek', 'f≈±', 'p√°zsit', 'vir√°gos', '√°rny√©kos', 'napos kert',
                    'pergola', 'terasz', 'erk√©ly', 'balkon', 'panor√°ma', 'kil√°t√°s',
                    'term√©szet', 'z√∂ld', 'park', 'liget'
                ],
                'pontszam': 2.5
            },
            
            'PARKOLAS_GARAGE': {
                'kulcsszavak': [
                    'gar√°zs', 'parkol√≥', 'aut√≥', 'g√©pkocsi', '√°ll√°s', 'fedett',
                    'saj√°t parkol√≥', 'dupla gar√°zs', 't√∂bb√°ll√°sos', 'behajt√≥',
                    'kocsibe√°ll√≥', 'k√©t aut√≥', '2 aut√≥', 'parkol√°si lehet≈ës√©g'
                ],
                'pontszam': 2.0
            },
            
            'TERULET_MERET': {
                'kulcsszavak': [
                    't√°gas', 'nagy', 'sz√©les', 'hatalmas', '√≥ri√°s', 'b≈ës√©ges',
                    't√©r', 'alapter√ºlet', 'hasznos', 'nappali', 'h√°l√≥szoba',
                    'szoba', 'helyis√©g', 'kamra', 't√°rol√≥', 'pince', 'tet≈ët√©r',
                    'm2', 'n√©gyzetm√©ter', 'quadratmeter'
                ],
                'pontszam': 2.0
            },
            
            'KOMFORT_EXTRA': {
                'kulcsszavak': [
                    'kl√≠ma', 'l√©gkondi', 'szauna', 'medence', 'jakuzzi', 'wellness',
                    'h≈ëszivatty√∫', 'napelem', 'okos otthon', 'riaszt√≥', 'kamer√°s',
                    'k√∂zponti porsz√≠v√≥', 'padl√≥f≈±t√©s', 'geotermikus',
                    'hangos√≠t√°s', 'internet', 'k√°belez√©s', 'optika'
                ],
                'pontszam': 2.5
            },
            
            'ALLAPOT_FELUJITAS': {
                'kulcsszavak': [
                    'fel√∫j√≠tott', 'renov√°lt', 'korszer≈±s√≠tett', '√∫j', 'frissen',
                    'most k√©sz√ºlt', '√∫j√©p√≠t√©s', 'moderniz√°lt', '√°t√©p√≠tett',
                    'bek√∂lt√∂zhet≈ë', 'kulcsrak√©sz', 'azonnal', 'k√∂lt√∂z√©s'
                ],
                'pontszam': 2.0
            },
            
            'LOKACIO_KORNYEZET': {
                'kulcsszavak': [
                    'csendes', 'b√©k√©s', 'nyugodt', 'csal√°di', 'villa negyed',
                    'k√∂zponti', 'k√∂zel', 'k√∂zleked√©s', 'iskola', '√≥voda',
                    'bolt', 'bev√°s√°rl√°s', 'j√°tsz√≥t√©r', 'sport', 'erd≈ë', 'domb'
                ],
                'pontszam': 1.5
            },
            
            'FUTES_ENERGIA': {
                'kulcsszavak': [
                    'g√°z', 't√°vf≈±t√©s', 'kandall√≥', 'cser√©pk√°lyha', 'fat≈±z√©s',
                    'energiatakar√©kos', 'szigetelt', 'alacsony rezsi',
                    'h≈ëszigetel√©s', 'm≈±anyag ablak', 'red≈ëny'
                ],
                'pontszam': 1.2
            },
            
            'NEGATIV_TENYEZOK': {
                'kulcsszavak': [
                    'fel√∫j√≠tand√≥', 'fel√∫j√≠t√°sra szorul', 'r√©gi', 'rossz √°llapot',
                    'probl√©m√°s', 'jav√≠tand√≥', 'cser√©lend≈ë', 'hi√°nyos',
                    'be√°z√°s', 'nedves', 'pen√©sz', 'rezsik√∂lts', 'dr√°ga f≈±t√©s',
                    'forgalmas', 'zajos', 'busy'
                ],
                'pontszam': -1.5
            }
        }
    
    def clean_text(self, text):
        """Sz√∂veg tiszt√≠t√°sa √©s normaliz√°l√°sa"""
        if pd.isna(text):
            return ""
        text = str(text).lower()
        text = re.sub(r'<[^>]+>', ' ', text)
        text = re.sub(r'[^\w\s]', ' ', text)
        text = re.sub(r'\s+', ' ', text)
        return text.strip()
    
    def extract_category_scores(self, text):
        """Kateg√≥ria pontsz√°mok kinyer√©se egy sz√∂vegb≈ël"""
        clean_text = self.clean_text(text)
        
        scores = {}
        details = {}
        
        for kategoria, info in self.kategoriak.items():
            kulcsszavak = info['kulcsszavak']
            pontszam = info['pontszam']
            
            talalt_szavak = []
            ossz_pontszam = 0
            
            for kulcsszo in kulcsszavak:
                if kulcsszo in clean_text:
                    talalt_szavak.append(kulcsszo)
                    # T√∂bbsz√∂r√∂sen el≈ëfordul√≥ szavak t√∂bbet √©rnek
                    elofordulas = clean_text.count(kulcsszo)
                    ossz_pontszam += pontszam * elofordulas
            
            scores[kategoria] = ossz_pontszam
            details[kategoria] = {
                'talalt_szavak': talalt_szavak,
                'db': len(talalt_szavak),
                'pontszam': ossz_pontszam
            }
        
        return scores, details

class KomplettIngatlanPipeline:
    def __init__(self):
        self.search_url = ""
        self.location_name = ""
        self.list_csv_file = ""
        self.details_csv_file = ""
        self.dashboard_file = ""
        self.user_limit = 50  # Alap√©rtelmezett limit
        
    def step_1_get_search_url(self):
        """1. L√âP√âS: URL bek√©r√©s √©s feldolgoz√°si limit be√°ll√≠t√°s"""
        print("üè† KOMPLETT INGATLAN ELEMZ≈ê PIPELINE")
        print("="*60)
        
        print("\nüîó 1. L√âP√âS: KERES√âSI URL MEGAD√ÅSA")
        print("="*40)
        print("üí° P√©lda URL-ek:")
        print("   https://ingatlan.com/szukites/elado+lakas+kobanyi-ujhegy")
        print("   https://ingatlan.com/lista/elado+haz+erd-erdliget")
        print("   https://ingatlan.com/szukites/elado+lakas+xiii-kerulet")
        print("   https://ingatlan.com/lista/elado+lakas+budapest")
        
        while True:
            url = input("\nüìç Add meg a keres√©si URL-t: ").strip()
            
            if not url:
                print("‚ùå K√©rlek adj meg egy URL-t!")
                continue
                
            if 'ingatlan.com' not in url:
                print("‚ùå Csak ingatlan.com URL-ek t√°mogatottak!")
                continue
            
            break
        
        # Feldolgoz√°si limit bek√©r√©se
        print(f"\n" + "="*40)
        print("üìä FELDOLGOZ√ÅSI LIMIT BE√ÅLL√çT√ÅSA")
        print("="*40)
        print("üí° Opci√≥k:")
        print("   10   - Gyors teszt (2-3 perc)")
        print("   50   - K√∂zepes minta (8-12 perc)")
        print("   100  - Nagy minta (15-25 perc)")
        print("   300  - Teljes √°llom√°ny (45-90 perc)")
        
        while True:
            try:
                limit_input = input("\nüìã H√°ny hirdet√©st dolgozzak fel? (alap√©rtelmezett: 50): ").strip()
                
                if not limit_input:
                    self.user_limit = 50
                    break
                else:
                    user_limit = int(limit_input)
                    if user_limit < 1:
                        print("‚ùå A limit legal√°bb 1 legyen!")
                        continue
                    elif user_limit > 500:
                        print("‚ö†Ô∏è  Nagy limit! Aj√°nlott maximum 300.")
                        confirm = input("Folytatod? (i/n): ").lower()
                        if confirm in ['i', 'igen', 'y', 'yes']:
                            self.user_limit = user_limit
                            break
                        else:
                            continue
                    else:
                        self.user_limit = user_limit
                        break
                        
            except ValueError:
                print("‚ùå K√©rlek sz√°mot adj meg!")
                continue
        
        # URL feldolgoz√°sa - mindig 300-as limit az URL-ben (t√∂bb mint sz√ºks√©ges)
        self.search_url = self._add_limit_300(url)
        self.location_name = self._extract_location(url)
        
        print(f"\n‚úÖ V√©gleges URL: {self.search_url}")
        print(f"üìç Lok√°ci√≥ ID: {self.location_name}")
        print(f"üéØ Feldolgozand√≥ hirdet√©sek: {self.user_limit}")
        
        return True
    
    def _add_limit_300(self, url):
        """300-as limit hozz√°ad√°sa az URL-hez"""
        try:
            parsed = urlparse(url)
            query_params = parse_qs(parsed.query)
            query_params['limit'] = ['300']
            new_query = urlencode(query_params, doseq=True)
            return urlunparse(parsed._replace(query=new_query))
        except:
            # Fallback m√≥dszer
            if 'limit=' in url:
                return re.sub(r'limit=\d+', 'limit=300', url)
            else:
                separator = '&' if '?' in url else '?'
                return f"{url}{separator}limit=300"
    
    def _extract_location(self, url):
        """Lok√°ci√≥ kinyer√©se URL-b≈ël f√°jln√©v gener√°l√°s√°hoz"""
        try:
            path = urlparse(url).path
            # Keres√©si r√©sz megtal√°l√°sa
            path_parts = path.split('/')
            search_part = ""
            
            for part in path_parts:
                if any(word in part for word in ['elado', 'kiado', 'berlet']):
                    search_part = part
                    break
            
            if not search_part and path_parts:
                search_part = path_parts[-1]
            
            # Biztons√°gos f√°jln√©v
            safe_name = re.sub(r'[^\w\-_+]', '_', search_part)
            safe_name = safe_name.replace('+', '_').replace('-', '_')
            return safe_name[:50] if safe_name else "ingatlan_kereses"
        except:
            return "ingatlan_kereses"
    
    async def step_2_list_scraping(self):
        """2. L√âP√âS: Lista scraping URL-alap√∫ m√≥dszerrel"""
        print(f"\n" + "="*60)
        print("üìã 2. L√âP√âS: INGATLAN LISTA SCRAPING")
        print("="*60)
        print(f"üéØ URL: {self.search_url}")
        print(f"üìÅ Lok√°ci√≥: {self.location_name}")
        
        # URL-alap√∫ scraper oszt√°ly
        scraper = UrlListScraper(self.search_url, self.location_name, self.user_limit)
        
        try:
            # Chrome kapcsolat
            if not await scraper.connect_to_chrome():
                print("‚ùå Chrome kapcsolat sikertelen!")
                print("üí° Ind√≠tsd el a Chrome-ot debug m√≥dban:")
                print("   chrome.exe --remote-debugging-port=9222")
                return False
            
            # Lista scraping
            properties = await scraper.scrape_property_list()
            
            if properties:
                # CSV ment√©se automatikus f√°jln√©vvel
                self.list_csv_file = scraper.save_to_csv(properties)
                
                print(f"\n‚úÖ LISTA SCRAPING SIKERES!")
                print(f"üìÅ F√°jl: {self.list_csv_file}")
                print(f"üìä Ingatlanok: {len(properties)}")
                
                await scraper.close()
                return True
            else:
                print("‚ùå Nem siker√ºlt ingatlanokat tal√°lni")
                await scraper.close()
                return False
                
        except Exception as e:
            print(f"‚ùå Lista scraping hiba: {e}")
            return False
    
    async def step_3_details_scraping(self):
        """3. L√âP√âS: R√©szletes scraping"""
        print(f"\n" + "="*60)
        print("üîç 3. L√âP√âS: R√âSZLETES SCRAPING")
        print("="*60)
        
        if not self.list_csv_file or not os.path.exists(self.list_csv_file):
            print("‚ùå Lista CSV nem tal√°lhat√≥!")
            return False
        
        print(f"üìä Bemeneti CSV: {self.list_csv_file}")
        
        # R√©szletes scraper
        details_scraper = DetailedScraper(self.list_csv_file, self.location_name)
        
        try:
            # R√©szletes adatok gy≈±jt√©se
            detailed_data = await details_scraper.process_all_properties()
            
            if detailed_data:
                # CSV ment√©se automatikus f√°jln√©vvel
                self.details_csv_file = details_scraper.save_to_csv(detailed_data)
                
                print(f"\n‚úÖ R√âSZLETES SCRAPING SIKERES!")
                print(f"üìÅ F√°jl: {self.details_csv_file}")
                print(f"üìä R√©szletes adatok: {len(detailed_data)}")
                
                await details_scraper.close()
                return True
            else:
                print("‚ùå R√©szletes scraping sikertelen")
                await details_scraper.close()
                return False
                
        except Exception as e:
            print(f"‚ùå R√©szletes scraping hiba: {e}")
            return False
    
    def step_4_create_dashboard(self):
        """4. L√âP√âS: Dashboard gener√°l√°s"""
        print(f"\n" + "="*60)
        print("üé® 4. L√âP√âS: DASHBOARD GENER√ÅL√ÅS")
        print("="*60)
        
        if not self.details_csv_file or not os.path.exists(self.details_csv_file):
            print("‚ùå R√©szletes CSV nem tal√°lhat√≥!")
            return False
        
        try:
            # Dashboard f√°jln√©v
            self.dashboard_file = f"dashboard_{self.location_name}.py"
            
            print(f"üìä Adatforr√°s: {self.details_csv_file}")
            print(f"üé® Dashboard: {self.dashboard_file}")
            
            # Template beolvas√°sa √©s testreszab√°sa
            success = self._create_custom_dashboard()
            
            if success:
                print(f"\n‚úÖ DASHBOARD GENER√ÅL√ÅS SIKERES!")
                print(f"üìÅ Dashboard f√°jl: {self.dashboard_file}")
                print(f"\nüöÄ DASHBOARD IND√çT√ÅSA:")
                print(f"   streamlit run {self.dashboard_file}")
                return True
            else:
                print("‚ùå Dashboard gener√°l√°s sikertelen")
                return False
                
        except Exception as e:
            print(f"‚ùå Dashboard hiba: {e}")
            return False
    
    def _create_custom_dashboard(self):
        """Dashboard template testreszab√°sa"""
        try:
            # Template beolvas√°sa
            if not os.path.exists('ingatlan_dashboard_advanced.py'):
                print("‚ùå Dashboard template nem tal√°lhat√≥!")
                return False
            
            with open('ingatlan_dashboard_advanced.py', 'r', encoding='utf-8') as f:
                template = f.read()
            
            # Lok√°ci√≥ n√©v form√°z√°sa megjelen√≠t√©shez
            display_name = self.location_name.replace('_', ' ').title()
            display_name = re.sub(r'\bElado\b', 'Elad√≥', display_name)
            display_name = re.sub(r'\bHaz\b', 'H√°z', display_name) 
            display_name = re.sub(r'\bLakas\b', 'Lak√°s', display_name)
            
            # Template m√≥dos√≠t√°sok
            customizations = {
                # C√≠mek
                r'üè† K≈ëb√°nya-√öjhegyi Lak√≥telep - R√©szletes Piaci Elemz√©s': f'üè† {display_name} - R√©szletes Piaci Elemz√©s',
                r'K≈ëb√°nya-√öjhegyi Lak√≥telep': display_name,
                r'K≈êB√ÅNYA-√öJHEGYI LAK√ìTELEP': display_name.upper(),
                r'K≈ëb√°nya-√öjhegy': display_name,
                
                # CSV f√°jl referencia
                r'ingatlan_reszletes_\d{8}_\d{6}\.csv': self.details_csv_file,
                
                # Sz√∂veges eml√≠t√©sek  
                r'a K≈ëb√°nya-√öjhegyi lak√≥telepr≈ël': f'a(z) {display_name} ter√ºletr≈ël',
                r'K≈ëb√°nya X\. ker√ºlet, √öjhegyi lak√≥telep': f'{display_name} k√∂rny√©ke',
                
                # Page config
                r'üè† K≈ëb√°nya-√öjhegy Ingatlan Piaci Elemz√©s': f'üè† {display_name} Piaci Elemz√©s'
            }
            
            # M√≥dos√≠t√°sok alkalmaz√°sa
            customized = template
            for pattern, replacement in customizations.items():
                customized = re.sub(pattern, replacement, customized)
            
            # Load_data f√ºggv√©ny egyszer≈±s√≠t√©se
            load_data_new = f'''def load_data():
    """Adatok bet√∂lt√©se"""
    try:
        df = pd.read_csv("{self.details_csv_file}", encoding='utf-8-sig')
        
        # Alapvet≈ë ellen≈ërz√©sek
        if 'link' not in df.columns:
            st.error("Hi√°nyz√≥ oszlop: link")
            return pd.DataFrame()
        
        # Numerikus konverzi√≥k
        for col in ['ar_szam', 'teljes_ar_szam', 'terulet_szam', 'szobak']:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
        
        return df
        
    except FileNotFoundError:
        st.error("CSV f√°jl nem tal√°lhat√≥!")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Bet√∂lt√©si hiba: {{e}}")
        return pd.DataFrame()'''
            
            # Load_data csere
            customized = re.sub(
                r'def load_data\(\):.*?return pd\.DataFrame\(\)',
                load_data_new,
                customized,
                flags=re.DOTALL
            )
            
            # Dashboard ment√©se
            with open(self.dashboard_file, 'w', encoding='utf-8') as f:
                f.write(customized)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Template hiba: {e}")
            return False
    
    async def run_complete_pipeline(self):
        """Teljes pipeline futtat√°sa"""
        try:
            print("üöÄ KOMPLETT PIPELINE IND√çT√ÅSA")
            
            # 1. URL bek√©r√©s
            if not self.step_1_get_search_url():
                return False
            
            # 2. Lista scraping
            print(f"\n‚è≥ Lista scraping ind√≠t√°sa...")
            if not await self.step_2_list_scraping():
                print("‚ùå Pipeline le√°ll√≠tva - lista scraping sikertelen")
                return False
            
            # 3. R√©szletes scraping
            print(f"\n‚è≥ R√©szletes scraping ind√≠t√°sa...")
            if not await self.step_3_details_scraping():
                print("‚ùå Pipeline le√°ll√≠tva - r√©szletes scraping sikertelen")  
                return False
            
            # 4. Dashboard
            if not self.step_4_create_dashboard():
                print("‚ùå Pipeline le√°ll√≠tva - dashboard sikertelen")
                return False
            
            # Sikeres befejez√©s
            self._show_final_summary()
            return True
            
        except KeyboardInterrupt:
            print(f"\n‚è∏Ô∏è Pipeline megszak√≠tva!")
            return False
        except Exception as e:
            print(f"‚ùå Pipeline hiba: {e}")
            return False
    
    def _show_final_summary(self):
        """V√©gs≈ë √∂sszefoglal√≥"""
        print(f"\n" + "üéâ"*20)
        print("‚úÖ PIPELINE SIKERESEN BEFEJEZVE!")
        print("üéâ"*20)
        
        print(f"\nüìã EREDM√âNYEK:")
        print(f"   üîó Keres√©si URL: {self.search_url}")
        print(f"   üìä Lista CSV: {self.list_csv_file}")
        print(f"   üîç R√©szletes CSV: {self.details_csv_file}")
        print(f"   üé® Dashboard: {self.dashboard_file}")
        
        print(f"\nüöÄ K√ñVETKEZ≈ê L√âP√âS:")
        print(f"   streamlit run {self.dashboard_file}")
        
        # Statisztik√°k
        try:
            if os.path.exists(self.details_csv_file):
                df = pd.read_csv(self.details_csv_file)
                print(f"\nüìà STATISZTIK√ÅK:")
                print(f"   üìç √ñsszesen: {len(df)} ingatlan")
                if 'szint' in df.columns:
                    floor_count = df['szint'].notna().sum()
                    print(f"   üè¢ Emelet adat: {floor_count}/{len(df)} ({floor_count/len(df)*100:.1f}%)")
                if 'hirdeto_tipus' in df.columns:
                    adv_count = df['hirdeto_tipus'].notna().sum()
                    print(f"   üë§ Hirdet≈ë t√≠pus: {adv_count}/{len(df)} ({adv_count/len(df)*100:.1f}%)")
        except:
            pass

# URL-alap√∫ lista scraper
class UrlListScraper:
    def __init__(self, search_url, location_name, user_limit=50):
        self.search_url = search_url
        self.location_name = location_name
        self.user_limit = user_limit
        self.playwright = None
        self.browser = None
        self.page = None
    
    async def connect_to_chrome(self):
        """Chrome kapcsolat l√©trehoz√°sa"""
        try:
            print("üîó Chrome kapcsolat l√©trehoz√°sa...")
            self.playwright = await async_playwright().start()
            self.browser = await self.playwright.chromium.connect_over_cdp("http://localhost:9222")
            
            # Akt√≠v tab
            contexts = self.browser.contexts
            if contexts:
                self.context = contexts[0]
                pages = self.context.pages
                if pages:
                    self.page = pages[0]
                else:
                    self.page = await self.context.new_page()
            else:
                self.context = await self.browser.new_context()
                self.page = await self.context.new_page()
            
            print("‚úÖ Chrome kapcsolat OK")
            return True
            
        except Exception as e:
            print(f"‚ùå Chrome kapcsolat hiba: {e}")
            return False
    
    async def scrape_property_list(self):
        """Ingatlan lista scraping jav√≠tott szelektorokkal"""
        try:
            print(f"üåê Navig√°l√°s: {self.search_url}")
            
            # T√∂bb pr√≥b√°lkoz√°s robusztusabb bet√∂lt√©ssel
            for attempt in range(3):
                try:
                    print(f"  üì° Pr√≥b√°lkoz√°s {attempt + 1}/3...")
                    await self.page.goto(self.search_url, wait_until='domcontentloaded', timeout=60000)
                    await asyncio.sleep(5)
                    
                    # Ellen≈ërizz√ºk, hogy bet√∂lt≈ëd√∂tt-e a tartalom
                    content = await self.page.content()
                    if len(content) > 10000 and 'ingatlan' in content.lower():
                        print(f"  ‚úÖ Oldal bet√∂ltve ({len(content)} karakter)")
                        break
                    elif attempt < 2:
                        print(f"  ‚ö†Ô∏è Nem teljes bet√∂lt√©s, √∫jrapr√≥b√°l√°s...")
                        continue
                except Exception as e:
                    print(f"  ‚ùå {attempt + 1}. pr√≥b√°lkoz√°s hiba: {e}")
                    if attempt < 2:
                        await asyncio.sleep(3)
                        continue
                    else:
                        raise
            
            # Listing elemek keres√©se - ingatlan_list_scraper_refactored szelektorok alapj√°n
            print("üîç Ingatlan elemek keres√©se...")
            
            # K√ºl√∂nb√∂z≈ë szelektorok pr√≥b√°l√°sa
            selectors = [
                ".listing-card",
                ".js-listing", 
                "[data-id]",
                ".results-list-item",
                ".search-result",
                ".listing",
                "a[href*='/ingatlan/']"
            ]
            
            property_elements = []
            used_selector = ""
            
            for selector in selectors:
                elements = await self.page.query_selector_all(selector)
                if elements and len(elements) > 3:  # Minimum 3 elem kell
                    property_elements = elements
                    used_selector = selector
                    print(f"‚úÖ {len(elements)} elem tal√°lva ({selector})")
                    break
                elif elements:
                    print(f"  üîç {len(elements)} elem tal√°lva ({selector}) - kev√©s")
            
            if not property_elements:
                # Debug info
                print("‚ùå Nincsenek ingatlan elemek, debug info:")
                page_title = await self.page.title()
                print(f"  üìÑ Oldal c√≠m: {page_title}")
                
                # Pr√≥b√°lkozzunk k√∂zvetlen√ºl linkekkel
                all_links = await self.page.query_selector_all("a[href]")
                ingatlan_links = []
                
                for link in all_links:
                    href = await link.get_attribute("href")
                    if href and '/ingatlan/' in href:
                        ingatlan_links.append(link)
                
                if ingatlan_links:
                    property_elements = ingatlan_links
                    print(f"‚úÖ {len(ingatlan_links)} ingatlan link tal√°lva k√∂zvetlen keres√©ssel")
                else:
                    return []
            
            # Adatok kinyer√©se - user √°ltal megadott limit szerint
            properties = []
            
            # User limit alkalmaz√°sa
            max_elements = min(len(property_elements), self.user_limit)
            limited_elements = property_elements[:max_elements]
            
            print(f"üéØ FELDOLGOZ√ÅS: {len(limited_elements)}/{len(property_elements)} ingatlan (user limit: {self.user_limit})")
            
            for i, element in enumerate(limited_elements, 1):
                try:
                    # Link kinyer√©se
                    link_element = element
                    href = await link_element.get_attribute("href")
                    
                    # Ha nincs href az elemen, keress√ºnk link-et benne
                    if not href:
                        link_element = await element.query_selector("a[href*='/ingatlan/']")
                        if not link_element:
                            continue
                        href = await link_element.get_attribute("href")
                        
                    if not href:
                        continue
                        
                    # Teljes URL l√©trehoz√°sa
                    if href.startswith('/'):
                        full_url = f"https://ingatlan.com{href}"
                    else:
                        full_url = href
                    
                    # Alapadatok kinyer√©se a list√°b√≥l
                    property_data = {
                        'id': i,
                        'link': full_url
                    }
                    
                    # C√≠m kinyer√©se - specifikus selector alapj√°n
                    try:
                        # C√≠m a .text-gray-900 oszt√°lyban
                        cim_elem = await element.query_selector('.text-gray-900')
                        if cim_elem:
                            property_data['cim'] = await cim_elem.inner_text()
                        else:
                            property_data['cim'] = ""
                    except:
                        property_data['cim'] = ""
                    
                    # √År kinyer√©se - specifikus selector: .fw-bold.fs-5.text-onyx
                    try:
                        price_elem = await element.query_selector('.fw-bold.fs-5.text-onyx')
                        if price_elem:
                            property_data['teljes_ar'] = await price_elem.inner_text()
                        else:
                            property_data['teljes_ar'] = ""
                    except:
                        property_data['teljes_ar'] = ""
                    
                    # N√©gyzetm√©ter √°r - .listing-card-area-prices oszt√°lyb√≥l
                    try:
                        m2_price_elem = await element.query_selector('.listing-card-area-prices')
                        if m2_price_elem:
                            property_data['nm_ar'] = await m2_price_elem.inner_text()
                        else:
                            property_data['nm_ar'] = ""
                    except:
                        property_data['nm_ar'] = ""
                    
                    # Alapter√ºlet kinyer√©se - specifikus logik√°val
                    property_data['terulet'] = ""
                    try:
                        # Keress√ºk az "Alapter√ºlet" sz√∂veg mellett l√©v≈ë √©rt√©ket
                        all_spans = await element.query_selector_all('span')
                        for i, span in enumerate(all_spans):
                            text = await span.inner_text()
                            if 'Alapter√ºlet' in text and i + 1 < len(all_spans):
                                next_span = all_spans[i + 1]
                                area_text = await next_span.inner_text()
                                if 'm' in area_text:
                                    property_data['terulet'] = area_text
                                    break
                    except:
                        pass
                    
                    # Telekter√ºlet kinyer√©se - specifikus selector √©s fallback
                    property_data['telekterulet'] = ""
                    try:
                        # 1. Pr√≥ba: Specifikus selector a megadott HTML alapj√°n
                        # <span class="fs-6 text-gray-900 fw-bold">1022 m<sup>2</sup></span>
                        telekterulet_selectors = [
                            'span.fs-6.text-gray-900.fw-bold',
                            'span.text-gray-900.fw-bold',
                            '.fs-6.text-gray-900.fw-bold'
                        ]
                        
                        telekterulet_found = False
                        for tel_selector in telekterulet_selectors:
                            if telekterulet_found:
                                break
                            tel_spans = await element.query_selector_all(tel_selector)
                            for tel_span in tel_spans:
                                tel_text = await tel_span.inner_text()
                                # Keress√ºk azokat amelyek m¬≤ -rel v√©gz≈ëdnek √©s sz√°mot tartalmaznak
                                if tel_text and ('m¬≤' in tel_text or 'm2' in tel_text) and any(char.isdigit() for char in tel_text):
                                    # Telekter√ºlet √°ltal√°ban nagyobb sz√°m mint alapter√ºlet
                                    import re
                                    numbers = re.findall(r'\d+', tel_text)
                                    if numbers and int(numbers[0]) > 200:  # Telekter√ºlet √°ltal√°ban 200+ m¬≤
                                        property_data['telekterulet'] = tel_text
                                        telekterulet_found = True
                                        break
                        
                        # 2. Fallback: Eredeti logika - "Telekter√ºlet" sz√∂veg keres√©se
                        if not property_data['telekterulet']:
                            all_spans = await element.query_selector_all('span')
                            for i, span in enumerate(all_spans):
                                text = await span.inner_text()
                                if 'Telekter√ºlet' in text and i + 1 < len(all_spans):
                                    next_span = all_spans[i + 1]
                                    plot_text = await next_span.inner_text()
                                    if 'm' in plot_text:
                                        property_data['telekterulet'] = plot_text
                                        break
                                        
                    except:
                        pass
                    
                    # Szob√°k sz√°ma - specifikus logik√°val
                    property_data['szobak'] = ""
                    try:
                        all_spans = await element.query_selector_all('span')
                        for i, span in enumerate(all_spans):
                            text = await span.inner_text()
                            if 'Szob√°k' in text and i + 1 < len(all_spans):
                                next_span = all_spans[i + 1]
                                room_text = await next_span.inner_text()
                                if '+' in room_text or 'szoba' in room_text.lower():
                                    property_data['szobak'] = room_text
                                    break
                    except:
                        pass
                    
                    # K√©pek sz√°ma - gallery-additional-photos-label-b≈ël
                    property_data['kepek_szama'] = 0
                    try:
                        gallery_elem = await element.query_selector('.gallery-additional-photos-label')
                        if gallery_elem:
                            span_elem = await gallery_elem.query_selector('span')
                            if span_elem:
                                kepek_szam_text = await span_elem.inner_text()
                                property_data['kepek_szama'] = int(kepek_szam_text.strip())
                    except:
                        # Ha nincs gallery label, akkor 1 k√©p (alap√©rtelmezett)
                        property_data['kepek_szama'] = 1
                    
                    # N√âGYZETM√âTER √ÅR - m√°r kinyert√ºk fentebb, de sz√°moljuk √∫jra ha kell
                    if not property_data['nm_ar'] and property_data['teljes_ar'] and property_data['terulet']:
                        try:
                            price_num = self._extract_price_number(property_data['teljes_ar'])
                            area_num = self._extract_area_number(property_data['terulet'])
                            
                            if price_num and area_num:
                                price_per_sqm = int(price_num / area_num)
                                property_data['nm_ar'] = f"{price_per_sqm:,} Ft/m¬≤".replace(',', ' ')
                                
                        except Exception:
                            # Nem kritikus hiba
                            pass
                    
                    properties.append(property_data)
                    
                    # Debug info az els≈ë n√©h√°ny elemhez
                    if len(properties) <= 3:
                        print(f"    ‚úÖ {len(properties)}. ingatlan: {property_data.get('cim', '')[:40]}...")
                    
                    if i % 5 == 0:
                        print(f"  üìã Feldolgozva: {i}/{len(limited_elements)} (√∂sszes√≠tett: {len(properties)})")
                        
                except Exception as e:
                    print(f"  ‚ö†Ô∏è {i}. elem feldolgoz√°si hiba: {str(e)[:50]}...")
                    continue
            
            print(f"‚úÖ Lista scraping k√©sz: {len(properties)} ingatlan")
            return properties
            
        except Exception as e:
            print(f"‚ùå Lista scraping hiba: {e}")
            return []
    
    def _extract_price_number(self, price_text):
        """√År sz√°m kinyer√©se"""
        try:
            numbers = re.findall(r'[\d,\.]+', price_text.replace(' ', ''))
            if numbers:
                num_str = numbers[0].replace(',', '.')
                num_value = float(num_str)
                
                if 'M' in price_text.upper():
                    num_value *= 1_000_000
                elif 'MRD' in price_text.upper():
                    num_value *= 1_000_000_000
                
                return num_value
        except:
            pass
        return None
    
    def _extract_area_number(self, area_text):
        """Ter√ºlet sz√°m kinyer√©se"""
        try:
            numbers = re.findall(r'[\d,\.]+', area_text.replace(' ', ''))
            if numbers:
                num_str = numbers[0].replace(',', '.')
                return float(num_str)
        except:
            pass
        return None
    
    def save_to_csv(self, properties):
        """CSV ment√©s automatikus f√°jln√©vvel"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"ingatlan_lista_{self.location_name}_{timestamp}.csv"
            
            df = pd.DataFrame(properties)
            
            # Oszlop sorrend
            columns = ['id', 'cim', 'teljes_ar', 'nm_ar', 'terulet', 'telekterulet', 'szobak', 'kepek_szama', 'link']
            available_columns = [col for col in columns if col in df.columns]
            df = df[available_columns]
            
            df.to_csv(filename, index=False, encoding='utf-8-sig')
            
            print(f"üíæ Lista CSV mentve: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå CSV ment√©si hiba: {e}")
            return None
    
    async def close(self):
        """Kapcsolat bez√°r√°sa"""
        try:
            if self.playwright:
                await self.playwright.stop()
        except:
            pass

# R√©szletes scraper
class DetailedScraper:
    def __init__(self, list_csv_file, location_name):
        self.list_csv_file = list_csv_file
        self.location_name = location_name
        self.playwright = None
        self.browser = None
        self.page = None
    
    async def process_all_properties(self):
        """√ñsszes ingatlan r√©szletes feldolgoz√°sa"""
        # CSV beolvas√°s
        try:
            df = pd.read_csv(self.list_csv_file)
            print(f"üìä CSV beolvasva: {len(df)} ingatlan")
        except Exception as e:
            print(f"‚ùå CSV hiba: {e}")
            return []
        
        if 'link' not in df.columns:
            print("‚ùå Nincs 'link' oszlop!")
            return []
        
        # Chrome kapcsolat
        try:
            self.playwright = await async_playwright().start()
            self.browser = await self.playwright.chromium.connect_over_cdp("http://localhost:9222")
            
            contexts = self.browser.contexts
            if contexts:
                self.context = contexts[0]
                pages = self.context.pages
                self.page = pages[0] if pages else await self.context.new_page()
            else:
                self.context = await self.browser.new_context()
                self.page = await self.context.new_page()
                
            print("‚úÖ Chrome kapcsolat r√©szletes scraperhez OK")
            
        except Exception as e:
            print(f"‚ùå Chrome kapcsolat hiba: {e}")
            return []
        
        # R√©szletes scraping
        detailed_data = []
        urls = df['link'].dropna().tolist()
        
        for i, url in enumerate(urls, 1):
            try:
                print(f"\nüè† {i}/{len(urls)}: {url}")
                
                # Alapadatok az eredeti CSV-b≈ël
                original_data = df[df['link'] == url].iloc[0].to_dict()
                
                # R√©szletes adatok
                details = await self._scrape_single_property(url)
                
                # Kombin√°ci√≥
                combined = {**original_data, **details}
                detailed_data.append(combined)
                
                # Humaniz√°lt v√°rakoz√°s
                if i < len(urls):
                    wait_time = random.uniform(2.0, 4.0)
                    print(f"  ‚è∞ V√°rakoz√°s {wait_time:.1f}s...")
                    await asyncio.sleep(wait_time)
                    
            except Exception as e:
                print(f"  ‚ùå Hiba: {e}")
                # √úres r√©szletes adatok hozz√°ad√°sa
                empty_details = self._get_empty_details()
                combined = {**original_data, **empty_details}
                detailed_data.append(combined)
                continue
        
        return detailed_data
    
    async def _scrape_single_property(self, url):
        """Egyetlen ingatlan r√©szletes scraping - enhanced logik√°val"""
        details = {}
        
        try:
            print(f"  üè† Adatlap: {url}")
            
            # Navig√°l√°s
            await self.page.goto(url, wait_until='domcontentloaded', timeout=30000)
            await asyncio.sleep(random.uniform(2.0, 3.0))
            
            # R√©szletes c√≠m
            try:
                address_selectors = ["h1.text-onyx", ".property-address h1", ".listing-header h1", "h1", ".address"]
                for selector in address_selectors:
                    elem = await self.page.query_selector(selector)
                    if elem:
                        text = await elem.inner_text()
                        if text.strip():
                            details['reszletes_cim'] = text.strip()
                            break
                else:
                    details['reszletes_cim'] = ""
            except:
                details['reszletes_cim'] = ""
            
            # R√©szletes √°r
            try:
                price_selectors = [".price-value", ".property-price .text-onyx", ".listing-price", "[data-testid='price']", ".price"]
                for selector in price_selectors:
                    elem = await self.page.query_selector(selector)
                    if elem:
                        text = await elem.inner_text()
                        if text.strip():
                            details['reszletes_ar'] = text.strip()
                            break
                else:
                    details['reszletes_ar'] = ""
            except:
                details['reszletes_ar'] = ""
            
            # T√°bl√°zatos adatok - PRIORIT√ÅS: √°llapot √©s emelet
            table_data = {}
            try:
                data_rows = await self.page.query_selector_all("table.table-borderless tr")
                
                for row in data_rows:
                    try:
                        label_element = await row.query_selector("td:first-child span")
                        if not label_element:
                            label_element = await row.query_selector("td:first-child")
                        
                        value_element = await row.query_selector("td.fw-bold")
                        if not value_element:
                            value_element = await row.query_selector("td:nth-child(2)")
                        
                        if label_element and value_element:
                            label = (await label_element.inner_text()).strip().lower()
                            value = (await value_element.inner_text()).strip()
                            
                            # Kihagyja az √ºres √©rt√©keket
                            if not value or "nincs megadva" in value.lower():
                                continue
                            
                            # Priorit√°sos mez≈ëk
                            if 'ingatlan √°llapota' in label or '√°llapot' in label:
                                table_data['ingatlan_allapota'] = value
                                print(f"    üéØ √Ållapot: {value}")
                            elif 'szint' in label and 'szintjei' not in label:
                                table_data['szint'] = value
                                print(f"    üéØ Szint: {value}")
                            elif 'emelet' in label:
                                table_data['szint'] = value
                                print(f"    üéØ Emelet: {value}")
                            elif '√©p√≠t√©s √©ve' in label:
                                table_data['epitesi_ev'] = value
                            elif 'f≈±t√©s' in label:
                                table_data['futes'] = value
                            elif 'erk√©ly' in label:
                                table_data['erkely'] = value
                            elif 'parkol√°s' in label:
                                table_data['parkolas'] = value
                            elif 'energetikai' in label:
                                table_data['energetikai'] = value
                                
                    except:
                        continue
                        
            except:
                pass
            
            # Alap√©rtelmezett t√°bl√°zatos adatok
            details.update({
                'epitesi_ev': table_data.get('epitesi_ev', ''),
                'szint': table_data.get('szint', ''),
                'ingatlan_allapota': table_data.get('ingatlan_allapota', ''),
                'futes': table_data.get('futes', ''),
                'erkely': table_data.get('erkely', ''),
                'parkolas': table_data.get('parkolas', ''),
                'energetikai': table_data.get('energetikai', '')
            })
            
            # Le√≠r√°s
            try:
                desc_selectors = ["#listing-description", ".listing-description", ".property-description", "[data-testid='description']"]
                for selector in desc_selectors:
                    elem = await self.page.query_selector(selector)
                    if elem:
                        desc_text = await elem.inner_text()
                        if desc_text.strip():
                            # R√∂vid√≠t√©s
                            if len(desc_text) > 800:
                                desc_text = desc_text[:800] + "..."
                            details['leiras'] = desc_text.strip()
                            break
                else:
                    details['leiras'] = ""
            except:
                details['leiras'] = ""
            
            # HIRDET≈ê T√çPUS MEGHAT√ÅROZ√ÅSA - ELS≈êDLEGES FORR√ÅS: oldalon l√©v≈ë jel√∂l√©s
            details['hirdeto_tipus'] = await self._determine_advertiser_type_from_page()
            
            # Ha nem siker√ºlt az oldalr√≥l, akkor szemantikai elemz√©s
            if details['hirdeto_tipus'] == "ismeretlen" and details['leiras']:
                details['hirdeto_tipus'] = self._detect_advertiser_type(details['leiras'])
            
            # Ha m√©g mindig ismeretlen, akkor alap√©rtelmezett
            if details['hirdeto_tipus'] == "ismeretlen":
                details['hirdeto_tipus'] = "bizonytalan"
                
            print(f"    üë§ Hirdet≈ë: {details['hirdeto_tipus']}")
            
            # Tov√°bbi mez≈ëk alap√©rt√©kekkel
            additional_fields = ['ingatlanos', 'telefon', 'allapot', 'epulet_szintjei', 
                               'kilatas', 'parkolohely_ara', 'komfort', 'legkondicionalas',
                               'akadalymentesites', 'furdo_wc', 'tetoter', 'pince', 
                               'parkolo', 'tajolas', 'kert', 'napelem', 'szigeteles', 'rezsikolts√©g']
            
            for field in additional_fields:
                if field not in details:
                    details[field] = ""
            
            print(f"  ‚úÖ Kinyert mez≈ëk: {len([v for v in details.values() if v])}")
            return details
            
        except Exception as e:
            print(f"  ‚ùå Scraping hiba: {e}")
            return self._get_empty_details()
    
    async def _determine_advertiser_type_from_page(self):
        """Egyszer≈±s√≠tett hirdet≈ë t√≠pus azonos√≠t√°s - csak a pontos HTML elem alapj√°n"""
        try:
            # Keress√ºk a pontos szelektort
            # <span class="d-flex align-items-center text-start h-100 my-auto fw-bold fs-6">Mag√°nszem√©ly</span>
            
            selectors = [
                # Pontos selector a megadott strukt√∫ra alapj√°n
                'span.d-flex.align-items-center.text-start.h-100.my-auto.fw-bold.fs-6',
                # Alternat√≠v selectorok ha a pontos nem m≈±k√∂dik
                'span.fw-bold.fs-6',
                '.fw-bold.fs-6',
                # √Åltal√°nos span keres√©s
                'span'
            ]
            
            for selector in selectors:
                try:
                    elements = await self.page.query_selector_all(selector)
                    for element in elements:
                        text = await element.inner_text()
                        if text and text.strip():
                            text_clean = text.strip()
                            
                            # CSAK akkor mag√°nszem√©ly, ha pontosan "Mag√°nszem√©ly" sz√∂veget tal√°lunk
                            if text_clean == 'Mag√°nszem√©ly':
                                print(f"    üéØ HTML-b≈ël azonos√≠tva: Mag√°nszem√©ly")
                                return "maganszemely"
                                
                            # Ha ingatlaniroda vagy egy√©b professional kifejez√©s
                            elif any(word in text_clean.lower() for word in [
                                'ingatlaniroda', 'ingatlan iroda', 'k√∂zvet√≠t≈ë', 'kozvetito',
                                '√ºgyn√∂k', 'ugyno–∫', 'irod–∞', 'professional'
                            ]):
                                print(f"    üéØ HTML-b≈ël azonos√≠tva: {text_clean}")
                                return "ingatlaniroda"
                                
                except Exception:
                    continue
            
            # Ha nem tal√°ltunk semmit, akkor ismeretlen
            return "ismeretlen"
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è HTML hirdet≈ë t√≠pus hiba: {e}")
            return "ismeretlen"

    def _detect_advertiser_type(self, description):
        """Szemantikai alap√∫ hirdet≈ë t√≠pus meghat√°roz√°sa nagynyelv≈± elemz√©ssel"""
        if not description:
            return "ismeretlen"
        
        desc_lower = description.lower()
        
        # ER≈êS MAG√ÅNSZEM√âLY JELZ≈êK (ezek fel√ºl√≠rj√°k az ingatlaniroda jelz≈ëket)
        strong_private_indicators = [
            'ingatlank√∂zvet√≠t≈ë', 'k√∂zvet√≠t≈ë', 'ingatlanosok ne', 'ne keressenek',
            'iroda ne', '√ºgyn√∂k ne', 'ne h√≠vjanak', 'tulajdonos vagyok',
            'saj√°t ingatlan', 'k√∂lt√∂z√©s miatt', 'csal√°di ok', 's√ºrg≈ës elad√°s',
            'k√©nytelen vagyok', 'gyorsan el kell', 'mag√°ntulajdon',
            'nem vagyok ingatlank√∂zvet√≠t≈ë', 'mag√°nszem√©ly hirdet'
        ]
        
        # ER≈êS INGATLANIRODA JELZ≈êK
        strong_agency_indicators = [
            'kft', 'bt', 'zrt', 'kht', 'nonprofit', 'iroda', 'ingatlan kft',
            'real estate', 'property', 'ingatlanforgalmaz√≥', 'jutal√©k',
            'k√∂zvet√≠t√©s', '√ºgyn√∂ks√©g', 't√°rsas√°g', 'v√°llalat', 'c√©g',
            'keressen minket', 'irod√°nk', '√ºgyn√∂k√ºnk', 'k√©pviseli',
            'k√≠n√°ljuk megv√©telre', 'k√≠n√°lunk elad√°sra', 'portf√≥li√≥nk',
            'referencia ingatlan', '√ºgyfel√ºnk', 'megb√≠z√°sb√≥l'
        ]
        
        # K√ñZEPESEN ER≈êS MAG√ÅNSZEM√âLY JELZ≈êK
        moderate_private_indicators = [
            'szem√©lyes', 'mag√°n', 'saj√°t', 'tulajdonos', 'elad√≥ vagyok',
            'azonnali', 's√ºrg≈ës', 'gyorsan', 'k√∂lt√∂z√ºnk', 'elk√∂lt√∂z√ºnk',
            'csal√°dunk', 'otthonunk', 'h√°zunk', 'lak√°sunk', 'ingatlanukat',
            'nyugd√≠jba', 'k√ºlf√∂ldre', 'nagyobb h√°zba'
        ]
        
        # K√ñZEPESEN ER≈êS INGATLANIRODA JELZ≈êK  
        moderate_agency_indicators = [
            '√©rt√©kbecsl√©s', 'szak√©rt≈ë', 'tan√°csad√≥', 'szolg√°ltat√°s',
            'befektet√©s', 'aj√°nlat', 'k√≠n√°lat', 'megtekint√©s',
            'id≈ëpont egyeztet√©s', 'bemutat√≥', 'prezent√°ci√≥', 'marketing',
            'tapasztalat', 'gyakorlat', 't√∂bb √©ves', 'profession√°lis',
            'megb√≠zhat√≥', 'hiteles', 'garancia'
        ]
        
        # PONTSZ√ÅM√çT√ÅS
        strong_private_score = sum(1 for indicator in strong_private_indicators 
                                 if indicator in desc_lower)
        
        strong_agency_score = sum(1 for indicator in strong_agency_indicators 
                                if indicator in desc_lower)
        
        moderate_private_score = sum(1 for indicator in moderate_private_indicators 
                                   if indicator in desc_lower) * 0.5
        
        moderate_agency_score = sum(1 for indicator in moderate_agency_indicators 
                                  if indicator in desc_lower) * 0.5
        
        # V√âGS≈ê PONTSZ√ÅMOK
        total_private_score = strong_private_score * 3 + moderate_private_score
        total_agency_score = strong_agency_score * 2 + moderate_agency_score
        
        # D√ñNT√âSI LOGIKA
        # Ha van ER≈êS mag√°nszem√©ly jelz≈ë, akkor mag√°nszem√©ly (fel√ºl√≠rja az ingatlaniroda jelz≈ëket)
        if strong_private_score > 0:
            return "maganszemely"
        
        # Ha van ER≈êS ingatlaniroda jelz≈ë, akkor ingatlaniroda
        if strong_agency_score > 0:
            return "ingatlaniroda" 
        
        # Ha nincs er≈ës jelz≈ë, akkor a pontsz√°mok alapj√°n
        if total_private_score > total_agency_score + 0.5:
            return "maganszemely"
        elif total_agency_score > total_private_score + 0.5:
            return "ingatlaniroda"
        
        # HOSSZ√öS√ÅG ALAP√ö HEURISZTIKA (hosszabb le√≠r√°s √°ltal√°ban ingatlaniroda)
        if len(description) > 800:
            return "ingatlaniroda"
        elif len(description) < 200:
            return "maganszemely"
        
        # SPECIFIKUS MINT√ÅK KERES√âSE
        # Szem√©lyes hangv√©tel keres√©se
        personal_patterns = ['vagyok', 'vagyunk', 'csal√°dunk', 'otthonunk', 'h√°zunk']
        personal_count = sum(1 for pattern in personal_patterns if pattern in desc_lower)
        
        # Form√°lis/√ºzleti hangv√©tel keres√©se
        business_patterns = ['k√≠n√°ljuk', 'aj√°nljuk', 'v√°rjuk', 'keresse', 'forduljon']
        business_count = sum(1 for pattern in business_patterns if pattern in desc_lower)
        
        if personal_count > business_count:
            return "maganszemely" 
        elif business_count > personal_count:
            return "ingatlaniroda"
        
        return "bizonytalan"
    
    def _get_empty_details(self):
        """√úres adatstrukt√∫ra"""
        return {
            'reszletes_cim': '', 'reszletes_ar': '', 'epitesi_ev': '', 'szint': '',
            'allapot': '', 'ingatlan_allapota': '', 'epulet_szintjei': '', 'kilatas': '',
            'parkolas': '', 'parkolohely_ara': '', 'komfort': '', 'legkondicionalas': '',
            'akadalymentesites': '', 'furdo_wc': '', 'tetoter': '', 'pince': '',
            'futes': '', 'erkely': '', 'parkolo': '', 'energetikai': '',
            'tajolas': '', 'kert': '', 'napelem': '', 'szigeteles': '', 'rezsikolts√©g': '',
            'leiras': '', 'ingatlanos': '', 'telefon': '', 'hirdeto_tipus': '', 'kepek_szama': 0
        }
    
    def save_to_csv(self, detailed_data):
        """R√©szletes CSV ment√©s Enhanced Text Feature-kkel"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            base_filename = f"ingatlan_reszletes_{self.location_name}_{timestamp}.csv"
            enhanced_filename = f"ingatlan_reszletes_enhanced_text_features.csv"
            
            df = pd.DataFrame(detailed_data)
            
            # Oszlop sorrend
            priority_cols = ['id', 'cim', 'reszletes_cim', 'teljes_ar', 'reszletes_ar', 
                           'terulet', 'nm_ar', 'szobak', 'epitesi_ev', 'szint', 
                           'ingatlan_allapota', 'futes', 'erkely', 'parkolas', 
                           'hirdeto_tipus', 'kepek_szama', 'leiras', 'link']
            
            available_priority = [col for col in priority_cols if col in df.columns]
            other_cols = [col for col in df.columns if col not in available_priority]
            
            final_columns = available_priority + other_cols
            df = df[final_columns]
            
            # Alap CSV ment√©se (backup)
            df.to_csv(base_filename, index=False, encoding='utf-8-sig')
            print(f"üíæ Alap CSV mentve: {base_filename}")
            
            # üåü ENHANCED TEXT FEATURES GENER√ÅL√ÅS
            print(f"ÔøΩ Enhanced text feature-k gener√°l√°sa...")
            
            # Sz√∂vegelemz≈ë inicializ√°l√°sa
            analyzer = IngatlanSzovegelemzo()
            
            # √öj oszlopok inicializ√°l√°sa
            text_feature_columns = {
                'luxus_minoseg_pont': 0.0,
                'kert_kulso_pont': 0.0,
                'parkolas_garage_pont': 0.0,
                'terulet_meret_pont': 0.0,
                'komfort_extra_pont': 0.0,
                'allapot_felujitas_pont': 0.0,
                'lokacio_kornyezet_pont': 0.0,
                'futes_energia_pont': 0.0,
                'negativ_tenyezok_pont': 0.0,
                
                # Dummy v√°ltoz√≥k (0/1)
                'van_luxus_kifejez√©s': 0,
                'van_kert_terulet': 0,
                'van_garage_parkolas': 0,
                'van_komfort_extra': 0,
                'van_negativ_elem': 0,
                
                # √ñsszes√≠tett pontsz√°mok
                'ossz_pozitiv_pont': 0.0,
                'ossz_negativ_pont': 0.0,
                'netto_szoveg_pont': 0.0
            }
            
            # Oszlopok hozz√°ad√°sa
            for col_name, default_value in text_feature_columns.items():
                df[col_name] = default_value
            
            # Text feature-k gener√°l√°sa minden sorhoz
            processed_count = 0
            for idx, row in df.iterrows():
                if pd.notna(row.get('leiras', '')):
                    # Kateg√≥ria pontsz√°mok kinyer√©se
                    scores, details = analyzer.extract_category_scores(row['leiras'])
                    
                    # Pontsz√°mok ment√©se
                    df.at[idx, 'luxus_minoseg_pont'] = scores.get('LUXUS_MINOSEG', 0)
                    df.at[idx, 'kert_kulso_pont'] = scores.get('KERT_KULSO', 0)
                    df.at[idx, 'parkolas_garage_pont'] = scores.get('PARKOLAS_GARAGE', 0)
                    df.at[idx, 'terulet_meret_pont'] = scores.get('TERULET_MERET', 0)
                    df.at[idx, 'komfort_extra_pont'] = scores.get('KOMFORT_EXTRA', 0)
                    df.at[idx, 'allapot_felujitas_pont'] = scores.get('ALLAPOT_FELUJITAS', 0)
                    df.at[idx, 'lokacio_kornyezet_pont'] = scores.get('LOKACIO_KORNYEZET', 0)
                    df.at[idx, 'futes_energia_pont'] = scores.get('FUTES_ENERGIA', 0)
                    df.at[idx, 'negativ_tenyezok_pont'] = scores.get('NEGATIV_TENYEZOK', 0)
                    
                    # Dummy v√°ltoz√≥k
                    df.at[idx, 'van_luxus_kifejez√©s'] = 1 if scores.get('LUXUS_MINOSEG', 0) > 0 else 0
                    df.at[idx, 'van_kert_terulet'] = 1 if scores.get('KERT_KULSO', 0) > 0 else 0
                    df.at[idx, 'van_garage_parkolas'] = 1 if scores.get('PARKOLAS_GARAGE', 0) > 0 else 0
                    df.at[idx, 'van_komfort_extra'] = 1 if scores.get('KOMFORT_EXTRA', 0) > 0 else 0
                    df.at[idx, 'van_negativ_elem'] = 1 if scores.get('NEGATIV_TENYEZOK', 0) < 0 else 0
                    
                    # √ñsszes√≠tett pontsz√°mok
                    pozitiv_kategoriak = ['LUXUS_MINOSEG', 'KERT_KULSO', 'PARKOLAS_GARAGE', 
                                         'TERULET_MERET', 'KOMFORT_EXTRA', 'ALLAPOT_FELUJITAS',
                                         'LOKACIO_KORNYEZET', 'FUTES_ENERGIA']
                    
                    ossz_pozitiv = sum(max(0, scores.get(k, 0)) for k in pozitiv_kategoriak)
                    ossz_negativ = abs(min(0, scores.get('NEGATIV_TENYEZOK', 0)))
                    
                    df.at[idx, 'ossz_pozitiv_pont'] = ossz_pozitiv
                    df.at[idx, 'ossz_negativ_pont'] = ossz_negativ
                    df.at[idx, 'netto_szoveg_pont'] = ossz_pozitiv - ossz_negativ
                    
                    processed_count += 1
            
            print(f"‚úÖ Text feature-k gener√°lva: {processed_count} ingatlanhoz")
            
            # Text feature statisztik√°k
            print(f"üìä ENHANCED FEATURE STATISZTIK√ÅK:")
            print(f"üíé Luxus: {df['van_luxus_kifejez√©s'].sum()} ingatlan")
            print(f"üå≥ Kert: {df['van_kert_terulet'].sum()} ingatlan") 
            print(f"üöó Gar√°zs: {df['van_garage_parkolas'].sum()} ingatlan")
            print(f"üè° Komfort: {df['van_komfort_extra'].sum()} ingatlan")
            print(f"‚ö†Ô∏è Negat√≠v: {df['van_negativ_elem'].sum()} ingatlan")
            
            # Enhanced CSV ment√©se
            df.to_csv(enhanced_filename, index=False, encoding='utf-8-sig')
            
            print(f"üåü Enhanced CSV mentve: {enhanced_filename}")
            print(f"üìä Oszlopok: {len(df.columns)} (+ {len(text_feature_columns)} text feature)")
            print(f"‚ú® Haszn√°latra k√©sz az Enhanced ML modellhez!")
            
            return enhanced_filename  # Az enhanced f√°jlt adjuk vissza
            
        except Exception as e:
            print(f"‚ùå CSV ment√©si hiba: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    async def close(self):
        """Kapcsolat bez√°r√°sa"""
        try:
            if self.playwright:
                await self.playwright.stop()
        except:
            pass

# Sz√ºks√©ges importok
import random

async def main():
    """F≈ëprogram"""
    pipeline = KomplettIngatlanPipeline()
    await pipeline.run_complete_pipeline()

if __name__ == "__main__":
    asyncio.run(main())
