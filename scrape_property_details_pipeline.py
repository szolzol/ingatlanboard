#!/usr/bin/env python3
"""
PIPELINE KOMPATIBILIS R√âSZLETES SCRAPER
======================================
A scrape_property_details.py pipeline haszn√°lathoz optimaliz√°lt verzi√≥ja
"""

import sys
import os
import pandas as pd
from datetime import datetime
import subprocess

class PipelineDetailsScraper:
    """Pipeline-kompatibilis r√©szletes scraper"""
    
    def __init__(self, list_csv_file, location_name):
        self.list_csv_file = list_csv_file
        self.location_name = location_name
        
    def create_details_csv(self):
        """R√©szletes CSV f√°jl l√©trehoz√°sa"""
        try:
            # Eredeti scrape_property_details.py futtat√°sa automatiz√°ltan
            print("üöÄ R√©szletes scraper ind√≠t√°sa...")
            
            # Temp f√°jl k√©sz√≠t√©se az automatiz√°lt inputhoz
            temp_input_file = "temp_input.txt"
            with open(temp_input_file, 'w') as f:
                f.write(f"{self.list_csv_file}\n")  # CSV f√°jl neve
                f.write("1\n")  # Option 1 - start scraping
            
            # Scraper futtat√°sa
            try:
                with open(temp_input_file, 'r') as input_file:
                    result = subprocess.run([
                        sys.executable, 
                        'scrape_property_details.py'
                    ], stdin=input_file, capture_output=True, text=True, timeout=3600)  # 1 √≥ra timeout
                
                print(f"Return code: {result.returncode}")
                if result.stdout:
                    print("STDOUT:", result.stdout[-500:])  # Utols√≥ 500 karakter
                if result.stderr:
                    print("STDERR:", result.stderr[-500:])  # Utols√≥ 500 karakter
                
                # Eredm√©ny f√°jl keres√©se
                if result.returncode == 0:
                    return self._find_result_file()
                else:
                    print("‚ùå R√©szletes scraper fut√°sa sikertelen")
                    return None
                    
            finally:
                # Temp f√°jl t√∂rl√©se
                if os.path.exists(temp_input_file):
                    os.remove(temp_input_file)
                    
        except Exception as e:
            print(f"‚ùå R√©szletes scraper hiba: {e}")
            return None
    
    def _find_result_file(self):
        """Eredm√©ny f√°jl megkeres√©se"""
        try:
            import glob
            
            # Mai d√°tummal keres√©s
            timestamp_today = datetime.now().strftime("%Y%m%d")
            
            # K√ºl√∂nb√∂z≈ë mint√°kkal pr√≥b√°lkozunk
            patterns = [
                f"ingatlan_reszletes_{timestamp_today}_*.csv",
                f"ingatlan_reszletes_*{timestamp_today}*.csv",
                f"ingatlan_reszletes_*.csv"
            ]
            
            for pattern in patterns:
                files = glob.glob(pattern)
                if files:
                    # Leg√∫jabb f√°jl visszaad√°sa
                    latest_file = max(files, key=os.path.getctime)
                    
                    # √Åtnevez√©s lok√°ci√≥ alapj√°n
                    new_name = f"ingatlan_reszletes_{self.location_name}_{timestamp_today}_{datetime.now().strftime('%H%M%S')}.csv"
                    os.rename(latest_file, new_name)
                    
                    return new_name
            
            return None
            
        except Exception as e:
            print(f"‚ùå Eredm√©ny f√°jl keres√©si hiba: {e}")
            return None

def main():
    """Pipeline main f√ºggv√©ny"""
    if len(sys.argv) != 3:
        print("‚ùå Haszn√°lat: python scrape_property_details_pipeline.py <lista_csv> <lok√°ci√≥_n√©v>")
        return
    
    list_csv_file = sys.argv[1]
    location_name = sys.argv[2]
    
    print("üîç R√âSZLETES SCRAPER - PIPELINE VERZI√ì")
    print("="*60)
    print(f"üìä Bemeneti f√°jl: {list_csv_file}")
    print(f"üìç Lok√°ci√≥: {location_name}")
    
    if not os.path.exists(list_csv_file):
        print(f"‚ùå Lista CSV f√°jl nem tal√°lhat√≥: {list_csv_file}")
        return
    
    # CSV f√°jl ellen≈ërz√©se
    try:
        df = pd.read_csv(list_csv_file)
        print(f"üìã {len(df)} ingatlan a list√°ban")
        
        if 'link' not in df.columns:
            print("‚ùå Hi√°nyz√≥ oszlop: link")
            return
            
    except Exception as e:
        print(f"‚ùå CSV f√°jl olvas√°si hiba: {e}")
        return
    
    # R√©szletes scraper futtat√°sa
    scraper = PipelineDetailsScraper(list_csv_file, location_name)
    result_file = scraper.create_details_csv()
    
    if result_file and os.path.exists(result_file):
        print(f"\nüéâ R√âSZLETES SCRAPING SIKERES!")
        print(f"üìÅ Kimeneti f√°jl: {result_file}")
        
        # Eredm√©ny statisztik√°k
        try:
            result_df = pd.read_csv(result_file)
            print(f"üìä V√©gs≈ë eredm√©ny: {len(result_df)} ingatlan r√©szletes adatokkal")
        except:
            pass
    else:
        print("‚ùå R√©szletes scraping sikertelen")

if __name__ == "__main__":
    main()
