"""
Teszt a jav√≠tott optimaliz√°lt modellhez
144m¬≤, 850m¬≤ telek, fel√∫j√≠tott, 5 szob√°s, 22 √©ves, parkol√≥s h√°z
"""

import pandas as pd
import numpy as np
from optimized_ml_model import OptimalizaltIngatlanModell

# Modell inicializ√°l√°sa
model = OptimalizaltIngatlanModell()

print("üè† Teszt h√°z param√©terei:")
print("- Ter√ºlet: 144 m¬≤")
print("- Telekter√ºlet: 850 m¬≤") 
print("- √Ållapot: fel√∫j√≠tott")
print("- Szob√°k: 5")
print("- Kor: 22 √©v")
print("- Parkol√°s: igen")
print()

try:
    # Adatok el≈ëk√©sz√≠t√©se
    print("üìä Adatok el≈ëk√©sz√≠t√©se...")
    df = model.adatok_elokeszitese()
    print(f"‚úÖ {len(df)} adat sikeresen feldolgozva")
    print()
    
    # Modell tan√≠t√°sa
    print("ü§ñ Modell tan√≠t√°sa...")
    model.modell_tanitas(df)
    print(f"üèÜ Legjobb modell: {model.best_model_name}")
    print()
    
    # Tesztadatok
    user_terulet = 144
    user_szobak = 5
    user_allapot = 'fel√∫j√≠tott'
    user_haz_kora = 22
    user_telekterulet = 850
    user_parkolas = True
    
    # √Ållapot encoding (m√©rs√©klve)
    allapot_map = {
        'bont√°sra v√°r√≥': 0, 
        'fel√∫j√≠tand√≥': 1,      
        'k√∂zepes √°llapot√∫': 2,  
        'j√≥ √°llapot√∫': 3,      
        'fel√∫j√≠tott': 4,       # M√âRS√âKELVE (9->4)
        '√∫j √©p√≠t√©s≈±': 5,      
        '√∫jszer≈±': 4
    }
    
    # TELJES feature vektor √∂ssze√°ll√≠t√°sa
    user_features = {
        # Alapv√°ltoz√≥k
        'terulet': user_terulet,
        'terulet_log': np.log1p(user_terulet),
        'szobak_szam': user_szobak,
        'allapot_szam': allapot_map[user_allapot],
        'haz_kora': user_haz_kora,
        'telekterulet_szam': user_telekterulet,
        'van_parkolas': int(user_parkolas),
        
        # Sz√°rmaztatott v√°ltoz√≥k
        'kor_kategoria': 4 if user_haz_kora < 10 else (3 if user_haz_kora < 25 else (2 if user_haz_kora < 50 else 1)),
        'telek_log': np.log1p(user_telekterulet),
        'nagy_telek': int(user_telekterulet > 600),
        'terulet_x_allapot': user_terulet * allapot_map[user_allapot],
        'm2_per_szoba': user_terulet / user_szobak
    }
    
    print("üîß Gener√°lt feature-k:")
    for feature, value in user_features.items():
        print(f"  {feature}: {value:.2f}")
    print()
    
    # El≈ërejelz√©s
    user_vector = np.array([user_features[f] for f in model.feature_names]).reshape(1, -1)
    predicted_price_base = model.best_model.predict(user_vector)[0]
    
    print(f"üéØ Alap modell becsl√©s: {predicted_price_base:.1f} M Ft")
    
    # Pr√©mium korrekci√≥k (m√©rs√©klve)
    predicted_price = predicted_price_base
    
    if user_allapot == 'fel√∫j√≠tott' and predicted_price < 150:
        predicted_price *= 1.05  # +5% fel√∫j√≠t√°si pr√©mium 
        print(f"üîß Fel√∫j√≠t√°si pr√©mium (+5%): {predicted_price:.1f} M Ft")
    
    if user_telekterulet > 800 and predicted_price < 200:
        predicted_price *= 1.03  # +3% nagy telek pr√©mium
        print(f"üè° Nagy telek pr√©mium (+3%): {predicted_price:.1f} M Ft")
    
    print()
    print("=" * 50)
    print(f"üí∞ V√âGS≈ê BECSL√âS: {predicted_price:.1f} M Ft")
    print(f"üìè √År/m¬≤: {(predicted_price * 1_000_000 / user_terulet):,.0f} Ft/m¬≤")
    print("=" * 50)
    
    # √ñsszehasonl√≠t√°s adatsettel
    avg_price = df['target_ar'].mean()
    difference = ((predicted_price - avg_price) / avg_price) * 100
    print(f"üìä Elt√©r√©s dataset √°tlagt√≥l ({avg_price:.1f}M Ft): {difference:+.1f}%")
    
    # Re√°lis tartom√°ny √©rt√©kel√©se
    if 120 <= predicted_price <= 140:
        print("‚úÖ RE√ÅLIS TARTOM√ÅNYBAN! (120-140M Ft)")
    elif predicted_price < 120:
        print("‚ö†Ô∏è M√©g mindig alacsony a re√°lis tartom√°nyhoz k√©pest")
    else:
        print("üìà Magasabb mint a re√°lis becsl√©s")

except Exception as e:
    print(f"‚ùå Hiba: {e}")
    import traceback
    traceback.print_exc()
