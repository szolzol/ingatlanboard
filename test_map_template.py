"""
STREAMLIT DASHBOARD - XII. KER√úLET (KOORDIN√ÅT√ÅS T√âRK√âP TESZT)
============================================================

Teszteli a b≈ëv√≠tett streamlit template-t a koordin√°t√°s XII. ker√ºleti adatokkal
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import re
import os
from datetime import datetime
import glob
import warnings
import folium
from streamlit_folium import st_folium
warnings.filterwarnings('ignore')

# XII. ker√ºlet lok√°ci√≥ be√°ll√≠t√°s
def get_location_from_filename():
    """XII. ker√ºlet fix lok√°ci√≥ n√©v"""
    return "XII. KER√úLET (T√âRK√âP TESZT)"

location_name = get_location_from_filename()
timestamp = datetime.now().strftime("%Y.%m.%d %H:%M")

# Streamlit konfigur√°ci√≥
st.set_page_config(
    page_title=f"Ingatlan Dashboard - {location_name} - {timestamp}",
    page_icon="üó∫Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_and_process_data():
    """XII. ker√ºleti koordin√°t√°s CSV bet√∂lt√©se"""
    try:
        # XII. ker√ºleti koordin√°t√°s CSV keres√©se
        coord_files = glob.glob("ingatlan_reszletes_XII_KER√úLET_koordinatak_*.csv")
        
        if not coord_files:
            st.error("‚ùå Nincs XII. ker√ºleti koordin√°t√°s CSV f√°jl!")
            return pd.DataFrame()
        
        # Legfrissebb f√°jl
        latest_file = max(coord_files, key=os.path.getmtime)
        st.info(f"üìÇ Koordin√°t√°s CSV: {latest_file}")
        
        # CSV bet√∂lt√©se
        df = pd.read_csv(latest_file, encoding='utf-8', sep='|', on_bad_lines='skip')
        st.success(f"‚úÖ Bet√∂ltve: {len(df)} rekord, {len(df.columns)} oszlop")
        
        # Koordin√°ta ellen≈ërz√©s
        coord_count = df[['geo_latitude', 'geo_longitude']].notna().all(axis=1).sum()
        st.info(f"üó∫Ô∏è Koordin√°t√°val: {coord_count}/{len(df)} rekord")
        
        # Numerikus konverzi√≥k
        df['teljes_ar_milli√≥'] = df['teljes_ar'].apply(parse_million_ft)
        df['terulet_szam'] = df['terulet'].apply(parse_area)
        df['szobak_szam'] = df['szobak'].apply(parse_rooms)
        
        return df
        
    except Exception as e:
        st.error(f"‚ùå Bet√∂lt√©si hiba: {e}")
        return pd.DataFrame()

def parse_million_ft(text):
    """Milli√≥ Ft konverzi√≥"""
    if pd.isna(text):
        return None
    
    text = str(text).lower().replace(',', '.').replace(' ', '')
    
    try:
        if 'mrd' in text or 'milli√°rd' in text:
            number = float(re.findall(r'[0-9.,]+', text)[0])
            return number * 1000
        elif 'm ft' in text or 'milli√≥' in text:
            number = float(re.findall(r'[0-9.,]+', text)[0])
            return number
        else:
            # Ha csak sz√°m van (pl. "125000000"), akkor elosztjuk milli√≥val
            if text.replace('.', '').isdigit():
                return float(text) / 1_000_000
            return None
    except:
        return None

def parse_area(text):
    """Ter√ºlet sz√°m kinyer√©se"""
    if pd.isna(text):
        return None
    try:
        numbers = re.findall(r'\d+', str(text))
        return int(numbers[0]) if numbers else None
    except:
        return None

def parse_rooms(text):
    """Szobasz√°m kinyer√©se"""
    if pd.isna(text):
        return None
    try:
        # Form√°tumok: "3+1", "4", "1+1", stb.
        text = str(text).replace(' ', '')
        if '+' in text:
            parts = text.split('+')
            return int(parts[0]) + 1  # Nappali + h√°l√≥szob√°k
        else:
            numbers = re.findall(r'\d+', text)
            return int(numbers[0]) if numbers else None
    except:
        return None

def create_interactive_map(df, location_name):
    """üó∫Ô∏è INTERAKT√çV T√âRK√âP - GPS koordin√°t√°k alapj√°n"""
    
    # Koordin√°ta oszlopok ellen≈ërz√©se
    has_coordinates = all(col in df.columns for col in ['geo_latitude', 'geo_longitude'])
    
    if not has_coordinates:
        st.warning("üó∫Ô∏è T√©rk√©pes megjelen√≠t√©s nem el√©rhet≈ë - nincs GPS koordin√°ta az adatokban")
        return
    
    # Koordin√°t√°kkal rendelkez≈ë rekordok sz≈±r√©se
    map_df = df.dropna(subset=['geo_latitude', 'geo_longitude']).copy()
    
    if map_df.empty:
        st.warning("üó∫Ô∏è T√©rk√©pes megjelen√≠t√©s nem el√©rhet≈ë - nincs GPS adat a rekordokban")
        return
    
    st.markdown("---")
    st.markdown("## üó∫Ô∏è **INTERAKT√çV T√âRK√âP**")
    st.markdown(f"**üìç Lok√°ci√≥:** {location_name} | **üè† Ingatlanok:** {len(map_df)} db GPS koordin√°t√°val")
    
    # T√©rk√©p alapbe√°ll√≠t√°sok
    center_lat = map_df['geo_latitude'].mean()
    center_lng = map_df['geo_longitude'].mean()
    
    # Folium t√©rk√©p l√©trehoz√°sa
    m = folium.Map(
        location=[center_lat, center_lng],
        zoom_start=12,
        tiles='OpenStreetMap'
    )
    
    # Sz√≠nk√≥dol√°s enhanced lok√°ci√≥ szerint
    district_colors = {
        'Orb√°nhegy': '#FF6B6B',      # Piros
        'Sv√°bhegy': '#4ECDC4',       # T√ºrkiz  
        'Vir√°nyos': '#45B7D1',       # K√©k
        'Krisztinav√°ros': '#96CEB4', # Z√∂ld
        'Zugliget': '#FECA57',       # S√°rga
        'R√≥zsadomb': '#FF9FF3',      # Pink
        'Ismeretlen': '#95A5A6'      # Sz√ºrke
    }
    
    # Enhanced lok√°ci√≥ oszlop meghat√°roz√°sa
    district_col = 'enhanced_keruleti_resz' if 'enhanced_keruleti_resz' in map_df.columns else 'varosresz_kategoria'
    
    # Markerek hozz√°ad√°sa
    for idx, row in map_df.iterrows():
        try:
            # Ingatlan adatok
            lat = float(row['geo_latitude'])
            lng = float(row['geo_longitude'])
            cim = row.get('cim', 'N/A')[:50]
            ar = row.get('teljes_ar', 'N/A')
            terulet = row.get('terulet', 'N/A')
            allapot = row.get('ingatlan_allapota', 'N/A')
            url = row.get('link', '#')
            district = row.get(district_col, 'Ismeretlen')
            
            # Nett√≥ pontsz√°m (Enhanced AI feature)
            netto_pont = row.get('netto_szoveg_pont', 0)
            
            # Sz√≠nk√≥d meghat√°roz√°sa
            color = district_colors.get(district, '#95A5A6')
            
            # Tooltip HTML tartalma
            tooltip_html = f"""
            <div style='width: 250px; font-family: Arial;'>
                <h4 style='margin: 0; color: #2E86AB;'>üè† {cim}</h4>
                <hr style='margin: 5px 0;'>
                <p style='margin: 2px 0;'><b>üí∞ √År:</b> {ar}</p>
                <p style='margin: 2px 0;'><b>üìê Ter√ºlet:</b> {terulet}</p>
                <p style='margin: 2px 0;'><b>üèóÔ∏è √Ållapot:</b> {allapot}</p>
                <p style='margin: 2px 0;'><b>üó∫Ô∏è Lok√°ci√≥:</b> {district}</p>
                <p style='margin: 2px 0;'><b>‚≠ê AI Pontsz√°m:</b> {netto_pont:.1f}</p>
                <p style='margin: 5px 0;'><a href='{url}' target='_blank' style='color: #2E86AB;'>üîó R√©szletek</a></p>
            </div>
            """
            
            # Marker hozz√°ad√°sa
            folium.CircleMarker(
                location=[lat, lng],
                radius=8,
                popup=folium.Popup(tooltip_html, max_width=300),
                tooltip=f"{cim} - {ar}",
                color='white',
                weight=2,
                fillColor=color,
                fillOpacity=0.8
            ).add_to(m)
            
        except Exception as e:
            st.warning(f"Marker hiba: {e}")
            continue
    
    # Legenda hozz√°ad√°sa
    legend_html = f"""
    <div style='position: fixed; 
                top: 10px; right: 10px; width: 180px; height: auto; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:12px; padding: 10px'>
    <h4 style='margin-top:0;'>üó∫Ô∏è Ker√ºleti R√©szek</h4>
    """
    
    # District statisztik√°k a legend√°hoz
    if district_col in map_df.columns:
        district_stats = map_df[district_col].value_counts()
        for district, count in district_stats.items():
            color = district_colors.get(district, '#95A5A6')
            legend_html += f"""
            <p style='margin: 3px 0;'>
                <span style='color:{color}; font-size: 16px;'>‚óè</span> 
                {district}: {count} db
            </p>
            """
    
    legend_html += """
    <hr style='margin: 8px 0;'>
    <p style='margin: 3px 0; font-size: 10px;'>
        üîó Kattints a markerekre<br/>r√©szletes inform√°ci√≥k√©rt
    </p>
    </div>
    """
    
    m.get_root().html.add_child(folium.Element(legend_html))
    
    # T√©rk√©p megjelen√≠t√©se Streamlit-ben
    st_folium(m, width=900, height=500)
    
    # T√©rk√©p statisztik√°k
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìç T√©rk√©pen", f"{len(map_df)} ingatlan")
    with col2:
        st.metric("üéØ T√©rk√©p k√∂zpont", f"{center_lat:.4f}, {center_lng:.4f}")
    with col3:
        if district_col in map_df.columns:
            top_district = map_df[district_col].value_counts().index[0]
            top_count = map_df[district_col].value_counts().iloc[0]
            st.metric("üèÜ Legn√©pszer≈±bb", f"{top_district} ({top_count} db)")

def main():
    """T√©rk√©p teszt alkalmaz√°s"""
    
    st.title("üó∫Ô∏è XII. KER√úLET - INTERAKT√çV T√âRK√âP TESZT")
    st.markdown("**Koordin√°t√°s t√©rk√©p a frissen b≈ëv√≠tett XII. ker√ºleti adatokkal**")
    
    # Adatok bet√∂lt√©se
    df = load_and_process_data()
    if df.empty:
        st.error("‚ùå Nincs adat a t√©rk√©p megjelen√≠t√©s√©hez!")
        return
    
    # Enhanced lok√°ci√≥ statisztik√°k
    if 'enhanced_keruleti_resz' in df.columns:
        st.markdown("### üèòÔ∏è Enhanced Lok√°ci√≥ Megoszl√°s:")
        district_counts = df['enhanced_keruleti_resz'].value_counts()
        
        col1, col2 = st.columns(2)
        with col1:
            for i, (district, count) in enumerate(district_counts.head(4).items()):
                percent = count/len(df)*100
                st.metric(f"{district}", f"{count} db ({percent:.1f}%)")
        
        with col2:
            for i, (district, count) in enumerate(district_counts.tail(3).items()):
                percent = count/len(df)*100
                st.metric(f"{district}", f"{count} db ({percent:.1f}%)")
    
    # Interakt√≠v t√©rk√©p megjelen√≠t√©se
    create_interactive_map(df, location_name)
    
    # Enhanced AI features statisztik√°k
    if 'netto_szoveg_pont' in df.columns:
        st.markdown("### ‚≠ê Enhanced AI Pontsz√°m Statisztik√°k:")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìä √Åtlag", f"{df['netto_szoveg_pont'].mean():.1f}")
        with col2:
            st.metric("üèÜ Maximum", f"{df['netto_szoveg_pont'].max():.1f}")
        with col3:
            st.metric("üìâ Minimum", f"{df['netto_szoveg_pont'].min():.1f}")
        with col4:
            top_10_pct = (df['netto_szoveg_pont'] > df['netto_szoveg_pont'].quantile(0.9)).sum()
            st.metric("üåü Top 10%", f"{top_10_pct} ingatlan")

if __name__ == "__main__":
    main()
