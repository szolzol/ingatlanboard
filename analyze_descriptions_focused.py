#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
C√©lzott ingatlan le√≠r√°s elemz√©s - √©rt√©k-befoly√°sol√≥ kateg√≥ri√°k alapj√°n
"""

import pandas as pd
import numpy as np
import re
from collections import Counter, defaultdict
import matplotlib.pyplot as plt
import seaborn as sns

class IngatlanSzovegelemzo:
    def __init__(self):
        """Inicializ√°lja a kateg√≥ri√°kat √©s kulcsszavakat"""
        
        # √âRT√âKBEFOLY√ÅSOL√ì KATEG√ìRI√ÅK √âS KULCSSZAVAIK
        self.kategoriak = {
            'LUXUS_MINOSEG': {
                'kulcsszavak': [
                    'luxus', 'pr√©mium', 'eleg√°ns', 'exkluz√≠v', 'k√ºl√∂nleges', 'leny≈±g√∂z≈ë',
                    'kiv√©teles', 'egyedi', 'reprezentat√≠v', 'ig√©nyes', 'st√≠lusos',
                    'designer', 'magas sz√≠nvonal', 'min≈ës√©gi', 'design', 'diz√°jn'
                ],
                'pontszam': 3.0
            },
            
            'KERT_KULSO': {
                'kulcsszavak': [
                    'parkos√≠tott', 'kert', 'telek', 'udvar', 'kert√©szked√©s', 'gy√ºm√∂lcsfa',
                    'n√∂v√©nyek', 'f≈±', 'p√°zsit', 'vir√°gos', '√°rny√©kos', 'napos kert',
                    'pergola', 'terasz', 'erk√©ly', 'balkon', 'panor√°ma', 'kil√°t√°s',
                    'term√©szet', 'z√∂ld', 'park', 'liget'
                ],
                'pontszam': 2.5
            },
            
            'PARKOLAS_GARAGE': {
                'kulcsszavak': [
                    'gar√°zs', 'parkol√≥', 'aut√≥', 'g√©pkocsi', '√°ll√°s', 'fedett',
                    'saj√°t parkol√≥', 'dupla gar√°zs', 't√∂bb√°ll√°sos', 'behajt√≥',
                    'kocsibe√°ll√≥', 'k√©t aut√≥', '2 aut√≥', 'parkol√°si lehet≈ës√©g'
                ],
                'pontszam': 2.0
            },
            
            'TERULET_MERET': {
                'kulcsszavak': [
                    't√°gas', 'nagy', 'sz√©les', 'hatalmas', '√≥ri√°s', 'b≈ës√©ges',
                    't√©r', 'alapter√ºlet', 'hasznos', 'nappali', 'h√°l√≥szoba',
                    'szoba', 'helyis√©g', 'kamra', 't√°rol√≥', 'pince', 'tet≈ët√©r',
                    'm2', 'n√©gyzetm√©ter', 'quadratmeter'
                ],
                'pontszam': 2.0
            },
            
            'KOMFORT_EXTRA': {
                'kulcsszavak': [
                    'kl√≠ma', 'l√©gkondi', 'szauna', 'medence', 'jakuzzi', 'wellness',
                    'h≈ëszivatty√∫', 'napelem', 'okos otthon', 'riaszt√≥', 'kamer√°s',
                    'k√∂zponti porsz√≠v√≥', 'padl√≥f≈±t√©s', 'geotermikus',
                    'hangos√≠t√°s', 'internet', 'k√°belez√©s', 'optika'
                ],
                'pontszam': 2.5
            },
            
            'ALLAPOT_FELUJITAS': {
                'kulcsszavak': [
                    'fel√∫j√≠tott', 'renov√°lt', 'korszer≈±s√≠tett', '√∫j', 'frissen',
                    'most k√©sz√ºlt', '√∫j√©p√≠t√©s', 'moderniz√°lt', '√°t√©p√≠tett',
                    'bek√∂lt√∂zhet≈ë', 'kulcsrak√©sz', 'azonnal', 'k√∂lt√∂z√©s'
                ],
                'pontszam': 2.0
            },
            
            'LOKACIO_KORNYEZET': {
                'kulcsszavak': [
                    'csendes', 'b√©k√©s', 'nyugodt', 'csal√°di', 'villa negyed',
                    'k√∂zponti', 'k√∂zel', 'k√∂zleked√©s', 'iskola', '√≥voda',
                    'bolt', 'bev√°s√°rl√°s', 'j√°tsz√≥t√©r', 'sport', 'erd≈ë', 'domb'
                ],
                'pontszam': 1.5
            },
            
            'FUTES_ENERGIA': {
                'kulcsszavak': [
                    'g√°z', 't√°vf≈±t√©s', 'kandall√≥', 'cser√©pk√°lyha', 'fat≈±z√©s',
                    'energiatakar√©kos', 'szigetelt', 'alacsony rezsi',
                    'h≈ëszigetel√©s', 'm≈±anyag ablak', 'red≈ëny'
                ],
                'pontszam': 1.2
            },
            
            'NEGATIV_TENYEZOK': {
                'kulcsszavak': [
                    'fel√∫j√≠tand√≥', 'fel√∫j√≠t√°sra szorul', 'r√©gi', 'rossz √°llapot',
                    'probl√©m√°s', 'jav√≠tand√≥', 'cser√©lend≈ë', 'hi√°nyos',
                    'be√°z√°s', 'nedves', 'pen√©sz', 'rezsik√∂lts', 'dr√°ga f≈±t√©s',
                    'forgalmas', 'zajos', 'busy'
                ],
                'pontszam': -1.5
            }
        }
    
    def clean_text(self, text):
        """Sz√∂veg tiszt√≠t√°sa √©s normaliz√°l√°sa"""
        if pd.isna(text):
            return ""
        text = str(text).lower()
        text = re.sub(r'<[^>]+>', ' ', text)
        text = re.sub(r'[^\w\s]', ' ', text)
        text = re.sub(r'\s+', ' ', text)
        return text.strip()
    
    def extract_category_scores(self, text):
        """Kateg√≥ria pontsz√°mok kinyer√©se egy sz√∂vegb≈ël"""
        clean_text = self.clean_text(text)
        
        scores = {}
        details = {}
        
        for kategoria, info in self.kategoriak.items():
            kulcsszavak = info['kulcsszavak']
            pontszam = info['pontszam']
            
            talalt_szavak = []
            ossz_pontszam = 0
            
            for kulcsszo in kulcsszavak:
                if kulcsszo in clean_text:
                    talalt_szavak.append(kulcsszo)
                    # T√∂bbsz√∂r√∂sen el≈ëfordul√≥ szavak t√∂bbet √©rnek
                    elofordulas = clean_text.count(kulcsszo)
                    ossz_pontszam += pontszam * elofordulas
            
            scores[kategoria] = ossz_pontszam
            details[kategoria] = {
                'talalt_szavak': talalt_szavak,
                'db': len(talalt_szavak),
                'pontszam': ossz_pontszam
            }
        
        return scores, details
    
    def analyze_dataset(self, df):
        """Teljes adathalmaz elemz√©se"""
        
        # Csak az √°razott √©s le√≠r√°sos ingatlanokat
        df_clean = df[df['teljes_ar'].notna() & df['leiras'].notna()].copy()
        
        if len(df_clean) == 0:
            print("‚ùå Nincsenek megfelel≈ë adatok!")
            return None
        
        # √År konvert√°l√°sa
        def convert_price(price_str):
            if pd.isna(price_str):
                return np.nan
            price_str = str(price_str).replace(' ', '').replace(',', '.')
            if 'M' in price_str or 'milli√≥' in price_str.lower():
                return float(re.findall(r'[\d.]+', price_str)[0])
            elif 'E' in price_str or 'ezer' in price_str.lower():
                return float(re.findall(r'[\d.]+', price_str)[0]) / 1000
            else:
                numbers = re.findall(r'[\d.]+', price_str)
                if numbers:
                    price = float(numbers[0])
                    if price > 1000:
                        return price / 1000000
                    else:
                        return price
            return np.nan
        
        df_clean['price_mft'] = df_clean['teljes_ar'].apply(convert_price)
        df_clean = df_clean[df_clean['price_mft'].notna()]
        
        print(f"üìä Elemzett ingatlanok: {len(df_clean)}")
        print(f"üí∞ √År tartom√°ny: {df_clean['price_mft'].min():.1f} - {df_clean['price_mft'].max():.1f} M Ft")
        
        # Kateg√≥ria pontsz√°mok kinyer√©se minden ingatlanhoz
        all_scores = []
        all_details = []
        
        for idx, row in df_clean.iterrows():
            scores, details = self.extract_category_scores(row['leiras'])
            all_scores.append(scores)
            all_details.append(details)
        
        # DataFrame l√©trehoz√°sa a pontsz√°mokb√≥l
        scores_df = pd.DataFrame(all_scores)
        scores_df['price'] = df_clean['price_mft'].values
        
        return {
            'df_clean': df_clean,
            'scores_df': scores_df,
            'all_details': all_details,
            'analyzer': self
        }
    
    def show_category_analysis(self, results):
        """Kateg√≥ri√°k √°rkorrel√°ci√≥s elemz√©se"""
        
        if not results:
            return
        
        scores_df = results['scores_df']
        
        print(f"\nüéØ KATEG√ìRI√ÅK √ÅR-KORREL√ÅCI√ìJA:")
        print("=" * 60)
        
        correlations = {}
        
        for kategoria in self.kategoriak.keys():
            if kategoria in scores_df.columns:
                corr = scores_df[kategoria].corr(scores_df['price'])
                correlations[kategoria] = corr
        
        # Korrel√°ci√≥ szerint rendez√©s
        sorted_correlations = sorted(correlations.items(), 
                                   key=lambda x: abs(x[1]) if not pd.isna(x[1]) else 0, 
                                   reverse=True)
        
        for kategoria, corr in sorted_correlations:
            if not pd.isna(corr):
                effect = "üìà Pozit√≠v" if corr > 0 else "üìâ Negat√≠v"
                avg_score = scores_df[kategoria].mean()
                print(f"{kategoria:<25} {corr:>8.3f} (√°tlag: {avg_score:>6.2f}) {effect}")
        
        return correlations
    
    def show_price_impact_examples(self, results):
        """√År-hat√°s p√©ld√°k mutat√°sa"""
        
        scores_df = results['scores_df']
        all_details = results['all_details']
        df_clean = results['df_clean']
        
        print(f"\nüíé TOP DR√ÅGA INGATLANOK ELEMZ√âSE:")
        print("=" * 60)
        
        # Top 5 legdr√°g√°bb
        top_expensive = scores_df.nlargest(5, 'price')
        
        for idx, (_, row) in enumerate(top_expensive.iterrows()):
            price = row['price']
            orig_idx = scores_df.index[scores_df['price'] == price].tolist()[0]
            details = all_details[orig_idx]
            
            print(f"\nüèÜ #{idx+1} - {price:.1f} M Ft:")
            
            for kategoria, info in details.items():
                if info['pontszam'] > 0:
                    print(f"  ‚úÖ {kategoria}: {info['pontszam']:.1f} pont")
                    if info['talalt_szavak']:
                        print(f"     ‚Üí {', '.join(info['talalt_szavak'][:5])}")
        
        print(f"\nüí∏ LEGOLCS√ìBB INGATLANOK ELEMZ√âSE:")
        print("=" * 60)
        
        # Top 5 legolcs√≥bb
        cheapest = scores_df.nsmallest(5, 'price')
        
        for idx, (_, row) in enumerate(cheapest.iterrows()):
            price = row['price']
            orig_idx = scores_df.index[scores_df['price'] == price].tolist()[0]
            details = all_details[orig_idx]
            
            print(f"\nüí∏ #{idx+1} - {price:.1f} M Ft:")
            
            # Pozit√≠v kateg√≥ri√°k
            for kategoria, info in details.items():
                if info['pontszam'] > 0:
                    print(f"  ‚úÖ {kategoria}: {info['pontszam']:.1f} pont")
            
            # Negat√≠v kateg√≥ri√°k
            for kategoria, info in details.items():
                if info['pontszam'] < 0:
                    print(f"  ‚ùå {kategoria}: {info['pontszam']:.1f} pont")
                    if info['talalt_szavak']:
                        print(f"     ‚Üí {', '.join(info['talalt_szavak'])}")

def main():
    """F≈ëprogram"""
    
    print("üè† C√âLZOTT INGATLAN SZ√ñVEGELEMZ√âS")
    print("=" * 50)
    print("F√≥kusz: T√©r, Luxus, Kert, Gar√°zs, Extra szolg√°ltat√°sok")
    
    try:
        # Adatok bet√∂lt√©se
        df = pd.read_csv('ingatlan_reszletes_elado_haz_erd_erdliget_20250820_014506.csv')
        
        # Elemz≈ë inicializ√°l√°sa
        analyzer = IngatlanSzovegelemzo()
        
        # Elemz√©s futtat√°sa
        results = analyzer.analyze_dataset(df)
        
        if results:
            # Kateg√≥ria korrel√°ci√≥ elemz√©s
            correlations = analyzer.show_category_analysis(results)
            
            # P√©lda elemz√©sek
            analyzer.show_price_impact_examples(results)
            
            print(f"\n‚úÖ C√âLZOTT ELEMZ√âS BEFEJEZVE!")
            return results
        
    except Exception as e:
        print(f"‚ùå Hiba: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    results = main()
