"""
BUDA√ñRS INGATLAN DASHBOARD - KOORDIN√ÅT√ÅS VERZI√ì
===============================================

üéØ Buda√∂rs ingatlanok interakt√≠v t√©rk√©p-alap√∫ elemz√©se
üìç GPS koordin√°t√°k: 100% lefedetts√©g
üó∫Ô∏è Interakt√≠v folium t√©rk√©p √°r-alap√∫ sz√≠nk√≥dol√°ssal

Generated from streamlit_app.py template on: 2025.08.22
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import re
import os
from datetime import datetime
import glob
import warnings
import folium
from streamlit_folium import st_folium
warnings.filterwarnings('ignore')

# BUDA√ñRS SPECIFIKUS BE√ÅLL√çT√ÅSOK
def get_location_from_filename():
    """Fix location n√©v visszaad√°sa - Buda√∂rs eset√©re"""
    return "BUDA√ñRS"

location_name = get_location_from_filename()
timestamp = datetime.now().strftime("%Y.%m.%d %H:%M")

# Streamlit konfigur√°ci√≥
st.set_page_config(
    page_title=f"Ingatlan Dashboard - {location_name} - {timestamp}",
    page_icon="üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_and_process_data():
    """Adatok bet√∂lt√©se √©s feldolgoz√°sa - Buda√∂rs koordin√°t√°s CSV priorit√°ssal"""
    try:
        # Buda√∂rs CSV pattern - koordin√°t√°s verzi√≥ priorit√°ssal
        location_patterns = [
            "ingatlan_reszletes_budaors_*_koordinatak_*.csv",  # Koordin√°t√°s verzi√≥ - priorit√°s
            "ingatlan_reszletes_budaors_*.csv",                # Eredeti verzi√≥ fallback
            "ingatlan_*budaors*.csv"                           # √Åltal√°nos pattern
        ]
        
        # Fix lok√°ci√≥ pattern keres√©s - mindig a legfrissebb CSV-t v√°lasztja
        for pattern in location_patterns:
            matching_files = glob.glob(pattern)
            if matching_files:
                # Legfrissebb f√°jl kiv√°laszt√°sa id≈ëb√©lyeg alapj√°n (f√°jl m√≥dos√≠t√°s ideje szerint)
                latest_file = max(matching_files, key=lambda f: os.path.getmtime(f))
                print(f"üìä Legfrissebb CSV bet√∂lt√©se ({pattern}): {latest_file}")
                
                df = pd.read_csv(latest_file, encoding='utf-8-sig', sep='|')
                
                # Ellen≈ërizz√ºk, hogy siker√ºlt-e bet√∂lteni
                if df.empty:
                    continue  # Pr√≥b√°ljuk a k√∂vetkez≈ë pattern-t
                
                # Numerikus konverzi√≥k - hibakezel≈ë m√≥don
                if 'teljes_ar' in df.columns:
                    df['teljes_ar_milli√≥'] = df['teljes_ar'].apply(parse_million_ft)
                
                if 'terulet' in df.columns:
                    df['terulet_szam'] = df['terulet'].apply(parse_area)
                
                if 'szobak' in df.columns:
                    df['szobak_szam'] = df['szobak'].apply(parse_rooms)
                
                # Csal√°dbar√°t pontsz√°m sz√°m√≠t√°sa
                df['csaladbarati_pontszam'] = df.apply(create_family_score, axis=1)
                
                # Modern nett√≥ pont sz√°m√≠t√°s
                modern_columns = ['zold_energia_premium_pont', 'wellness_luxury_pont', 'smart_technology_pont', 'premium_design_pont']
                available_modern_cols = [col for col in modern_columns if col in df.columns]
                if available_modern_cols:
                    df['modern_netto_pont'] = df[available_modern_cols].fillna(0).sum(axis=1)
                else:
                    df['modern_netto_pont'] = 0
                
                print(f"‚úÖ Bet√∂ltve: {len(df)} rekord")
                return df
        
        # Ha egyik pattern sem m≈±k√∂d√∂tt
        st.error("HIBA: Nincs tal√°lhat√≥ Buda√∂rs CSV f√°jl!")
        return pd.DataFrame()
        
    except Exception as e:
        st.error(f"Adatbet√∂lt√©si hiba: {e}")
        return pd.DataFrame()

def parse_million_ft(text):
    """Milli√≥ Ft konvert√°l√°sa sz√°mra"""
    if pd.isna(text):
        return None
    text_str = str(text).replace(',', '.')
    # "159 M Ft" -> 159, "263,80 M Ft" -> 263.80
    match = re.search(r'(\d+(?:\.\d+)?)\s*M', text_str)
    return float(match.group(1)) if match else None

def parse_area(text):
    """Ter√ºlet konvert√°l√°sa sz√°mra"""
    if pd.isna(text):
        return None
    text_str = str(text)
    # "133 m2" -> 133
    match = re.search(r'(\d+)', text_str)
    return int(match.group(1)) if match else None

def parse_rooms(text):
    """Szobasz√°m konvert√°l√°sa sz√°mra"""
    if pd.isna(text):
        return None
    text_str = str(text)
    # "5 + 1 f√©l" -> 5, "4 + 1 f√©l" -> 4, "3" -> 3
    match = re.search(r'(\d+)', text_str)
    return int(match.group(1)) if match else None

def create_family_score(row):
    """Csal√°dbar√°t pontsz√°m sz√°m√≠t√°sa (0-100)"""
    score = 0
    
    # Ter√ºlet pontsz√°m (max 25 pont)
    if pd.notna(row.get('terulet_szam')):
        area = row['terulet_szam']
        if area >= 200:
            score += 25
        elif area >= 150:
            score += 20
        elif area >= 120:
            score += 15
        elif area >= 100:
            score += 10
        else:
            score += 5
    
    # Szobasz√°m pontsz√°m (max 25 pont)
    if pd.notna(row.get('szobak_szam')):
        rooms = row['szobak_szam']
        if rooms >= 5:
            score += 25
        elif rooms >= 4:
            score += 20
        elif rooms >= 3:
            score += 15
        else:
            score += 10
    else:
        # Ha nincs szobasz√°m adat, √°tlag pontot adunk (15 pont)
        score += 15
    
    # √Ållapot pontsz√°m (max 25 pont)
    condition_raw = row.get('ingatlan_allapota', '')
    condition = str(condition_raw).lower() if pd.notna(condition_raw) else ''
    if '√∫j' in condition or '√∫j√©p√≠t√©s≈±' in condition:
        score += 25
    elif 'fel√∫j√≠tott' in condition or 'kit≈±n≈ë' in condition:
        score += 20
    elif 'j√≥' in condition:
        score += 15
    elif 'k√∂zepes' in condition:
        score += 10
    else:
        score += 5
    
    # Modern funkci√≥k pontsz√°m (max 25 pont)
    modern_score = 0
    modern_features = ['van_zold_energia', 'van_wellness_luxury', 'van_smart_tech', 'van_premium_design']
    for feature in modern_features:
        if row.get(feature, False):
            modern_score += 6.25
    score += modern_score
    
    return min(100, max(0, score))

def generate_ingatlan_url(row):
    """Ingatlan.com URL kinyer√©se a link oszlopb√≥l"""
    try:
        # Pr√≥b√°ljuk meg a link oszlopb√≥l
        if pd.notna(row.get('link')):
            return row['link']
        elif pd.notna(row.get('id')):
            return f"https://ingatlan.com/szukites/{row['id']}"
        return None
    except (KeyError, AttributeError, TypeError):
        # Ha valami hiba lenne, fallback
        if pd.notna(row.get('id')):
            return f"https://ingatlan.com/szukites/{row['id']}"
        return None

def create_clickable_link(text, url):
    """Kattinthat√≥ link l√©trehoz√°sa Streamlit-ben"""
    if url:
        return f"[{text}]({url})"
    return text

def main():
    """F≈ëalkalmaz√°s"""
    
    # Fejl√©c
    st.title(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ingatlan Dashboard - {location_name} - {timestamp}")
    st.markdown("**3 gyerekes csal√°dok sz√°m√°ra optimaliz√°lt ingatlankeres√©s**")
    st.markdown("*Nagy m√©ret, remek √°llapot, modern funkci√≥k, m√©gis j√≥ √°r/√©rt√©k ar√°ny*")
    
    # Adatok bet√∂lt√©se
    df = load_and_process_data()
    if df.empty:
        return
    
    # Sidebar filterek
    st.sidebar.header("üéØ Sz≈±r≈ëk")
    
    # √År sz≈±r≈ë
    if 'teljes_ar_milli√≥' in df.columns and df['teljes_ar_milli√≥'].notna().any():
        min_price = float(df['teljes_ar_milli√≥'].min())
        max_price = float(df['teljes_ar_milli√≥'].max())
        
        # Ha min √©s max azonos, akkor nem csin√°lunk slider-t
        if min_price == max_price:
            price_range = None
            st.sidebar.write(f"üí∞ √År: {min_price} M Ft (fix)")
        else:
            price_range = st.sidebar.slider(
                "üí∞ √År (milli√≥ Ft)",
                min_value=min_price,
                max_value=max_price,
                value=(min_price, max_price),
                step=1.0
            )
    else:
        price_range = None
    
    # Ter√ºlet sz≈±r≈ë
    if 'terulet_szam' in df.columns and df['terulet_szam'].notna().any():
        min_area = int(df['terulet_szam'].min())
        max_area = int(df['terulet_szam'].max())
        
        # Ha min √©s max azonos, akkor nem csin√°lunk slider-t
        if min_area == max_area:
            area_range = None
            st.sidebar.write(f"üìè Ter√ºlet: {min_area} m¬≤ (fix)")
        else:
            area_range = st.sidebar.slider(
                "üìè Ter√ºlet (m¬≤)",
                min_value=min_area,
                max_value=max_area,
                value=(min_area, max_area),
                step=5
            )
    else:
        area_range = None
    
    # Szobasz√°m sz≈±r≈ë
    if 'szobak_szam' in df.columns and df['szobak_szam'].notna().any():
        min_rooms = int(df['szobak_szam'].min())
        max_rooms = int(df['szobak_szam'].max())
        
        # Ha min √©s max azonos, akkor nem csin√°lunk slider-t
        if min_rooms == max_rooms:
            rooms_range = None
            st.sidebar.write(f"üõèÔ∏è Szob√°k: {min_rooms} (fix)")
        else:
            rooms_range = st.sidebar.slider(
                "üõèÔ∏è Szob√°k sz√°ma",
                min_value=min_rooms,
                max_value=max_rooms,
                value=(min_rooms, max_rooms),
                step=1
            )
    else:
        rooms_range = None
    
    # √Ållapot sz≈±r≈ë
    if 'ingatlan_allapota' in df.columns:
        conditions = df['ingatlan_allapota'].dropna().unique()
        selected_conditions = st.sidebar.multiselect(
            "üîß √Ållapot",
            options=conditions,
            default=conditions
        )
    else:
        selected_conditions = None
    
    # Modern funkci√≥k sz≈±r≈ë
    st.sidebar.subheader("‚≠ê Modern Funkci√≥k")
    filter_green = st.sidebar.checkbox("üåû Z√∂ld energia", value=False)
    filter_wellness = st.sidebar.checkbox("üèä Wellness & Luxury", value=False)
    filter_smart = st.sidebar.checkbox("üè† Smart Technology", value=False)
    filter_premium = st.sidebar.checkbox("üíé Premium Design", value=False)
    
    # Sz≈±r√©s alkalmaz√°sa
    filtered_df = df.copy()
    
    if price_range:
        filtered_df = filtered_df[
            (filtered_df['teljes_ar_milli√≥'].isna()) |
            ((filtered_df['teljes_ar_milli√≥'] >= price_range[0]) &
             (filtered_df['teljes_ar_milli√≥'] <= price_range[1]))
        ]
    
    if area_range:
        filtered_df = filtered_df[
            (filtered_df['terulet_szam'].isna()) |
            ((filtered_df['terulet_szam'] >= area_range[0]) &
             (filtered_df['terulet_szam'] <= area_range[1]))
        ]
    
    if rooms_range:
        # Csak azokat sz≈±rj√ºk, amelyekn√©l van szobasz√°m adat
        filtered_df = filtered_df[
            (filtered_df['szobak_szam'].isna()) |
            ((filtered_df['szobak_szam'] >= rooms_range[0]) &
             (filtered_df['szobak_szam'] <= rooms_range[1]))
        ]
    
    if selected_conditions:
        filtered_df = filtered_df[filtered_df['ingatlan_allapota'].isin(selected_conditions)]
    
    if filter_green:
        filtered_df = filtered_df[filtered_df['van_zold_energia'] == True]
    if filter_wellness:
        filtered_df = filtered_df[filtered_df['van_wellness_luxury'] == True]
    if filter_smart:
        filtered_df = filtered_df[filtered_df['van_smart_tech'] == True]
    if filter_premium:
        filtered_df = filtered_df[filtered_df['van_premium_design'] == True]
    
    # Eredm√©nyek megjelen√≠t√©se
    st.header(f"üè† Tal√°latok: {len(filtered_df)} ingatlan")
    
    if len(filtered_df) == 0:
        st.warning("‚ùå Nincs tal√°lat a sz≈±r√©si felt√©teleknek megfelel≈ëen. M√≥dos√≠tsd a sz≈±r≈ëket!")
        return
    
    # √Åltal√°nos statisztik√°k
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        avg_price = filtered_df['teljes_ar_milli√≥'].mean()
        st.metric("üí∞ √Åtlag√°r", f"{avg_price:.1f} M Ft" if pd.notna(avg_price) else "N/A")
    
    with col2:
        avg_area = filtered_df['terulet_szam'].mean()
        st.metric("üìè √Åtlag ter√ºlet", f"{avg_area:.0f} m¬≤" if pd.notna(avg_area) else "N/A")
    
    with col3:
        avg_family = filtered_df['csaladbarati_pontszam'].mean()
        st.metric("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ √Åtlag csal√°dbar√°t pont", f"{avg_family:.0f}" if pd.notna(avg_family) else "N/A")
    
    with col4:
        coord_count = filtered_df[['geo_latitude', 'geo_longitude']].dropna().shape[0]
        st.metric("üó∫Ô∏è GPS koordin√°t√°val", f"{coord_count}/{len(filtered_df)}")
    
    # Top 5 legjobb ingatlan
    st.header("üèÜ TOP 5 Legcsal√°dbar√°tabb Ingatlan")
    
    top_5 = filtered_df.nlargest(5, 'csaladbarati_pontszam')
    
    for idx, (_, row) in enumerate(top_5.iterrows(), 1):
        with st.expander(f"#{idx} | {row['cim']} | {row['csaladbarati_pontszam']:.0f} pont"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"üí∞ **√År:** {row.get('teljes_ar', 'N/A')}")
                st.write(f"üìè **Ter√ºlet:** {row.get('terulet', 'N/A')}")
                st.write(f"üõèÔ∏è **Szob√°k:** {row.get('szobak', 'N/A')}")
                st.write(f"üîß **√Ållapot:** {row.get('ingatlan_allapota', 'N/A')}")
            
            with col2:
                url = generate_ingatlan_url(row)
                if url:
                    st.markdown(f"üîó **[Megtekint√©s ingatlan.com-on]({url})**")
                
                # Modern funkci√≥k
                modern_features = []
                if row.get('van_zold_energia'): modern_features.append("üåû Z√∂ld energia")
                if row.get('van_wellness_luxury'): modern_features.append("üèä Wellness")
                if row.get('van_smart_tech'): modern_features.append("üè† Smart tech")
                if row.get('van_premium_design'): modern_features.append("üíé Premium design")
                
                if modern_features:
                    st.write("‚≠ê **Modern funkci√≥k:**")
                    for feature in modern_features:
                        st.write(f"  - {feature}")

    # üó∫Ô∏è INTERAKT√çV T√âRK√âP - sz≈±rt adatokkal
    create_interactive_map(filtered_df, location_name)
    
    # Vizualiz√°ci√≥k
    st.header("üìä Vizualiz√°ci√≥k")
    
    # √År vs Ter√ºlet scatter plot csal√°dbar√°t pontsz√°m szerint
    fig1 = px.scatter(
        filtered_df, 
        x='terulet_szam', 
        y='teljes_ar_milli√≥',
        color='csaladbarati_pontszam',
        hover_data=['cim', 'ingatlan_allapota'],
        title="√År vs Ter√ºlet (sz√≠nk√≥d: csal√°dbar√°t pontsz√°m)",
        labels={'terulet_szam': 'Ter√ºlet (m¬≤)', 'teljes_ar_milli√≥': '√År (M Ft)'}
    )
    st.plotly_chart(fig1, use_container_width=True)
    
    # Scatter Plot Elemz√©s
    st.subheader("üìà √År vs. Egy√©b V√°ltoz√≥k Elemz√©se")
    
    # Numerikus oszlopok kigy≈±jt√©se
    numeric_columns = []
    column_labels = {}
    
    # Alapvet≈ë numerikus v√°ltoz√≥k
    if 'terulet_szam' in filtered_df.columns:
        numeric_columns.append('terulet_szam')
        column_labels['terulet_szam'] = 'Ter√ºlet (m¬≤)'
    
    if 'szobak_szam' in filtered_df.columns:
        numeric_columns.append('szobak_szam')
        column_labels['szobak_szam'] = 'Szob√°k sz√°ma'
    
    if 'csaladbarati_pontszam' in filtered_df.columns:
        numeric_columns.append('csaladbarati_pontszam')
        column_labels['csaladbarati_pontszam'] = 'Csal√°dbar√°t pontsz√°m'
    
    if 'modern_netto_pont' in filtered_df.columns:
        numeric_columns.append('modern_netto_pont')
        column_labels['modern_netto_pont'] = 'Modern nett√≥ pont'
    
    if 'kepek_szama' in filtered_df.columns:
        numeric_columns.append('kepek_szama')
        column_labels['kepek_szama'] = 'K√©pek sz√°ma'
    
    # Modern funkci√≥k (boolean -> numeric)
    modern_features = ['van_zold_energia', 'van_wellness_luxury', 'van_smart_tech', 'van_premium_design']
    for feature in modern_features:
        if feature in filtered_df.columns:
            numeric_columns.append(feature)
            feature_names = {
                'van_zold_energia': 'üåû Z√∂ld energia (van/nincs)',
                'van_wellness_luxury': 'üèä Wellness & Luxury (van/nincs)',
                'van_smart_tech': 'üè† Smart Technology (van/nincs)',
                'van_premium_design': 'üíé Premium Design (van/nincs)'
            }
            column_labels[feature] = feature_names[feature]
    
    # Kategorikus v√°ltoz√≥k sz√°m√©rt√©k konverzi√≥ja
    categorical_vars = []
    if 'ingatlan_allapota' in filtered_df.columns:
        categorical_vars.append('ingatlan_allapota')
        column_labels['ingatlan_allapota'] = 'Ingatlan √°llapota (k√≥dolva)'
    
    if 'hirdeto_tipus' in filtered_df.columns:
        categorical_vars.append('hirdeto_tipus')
        column_labels['hirdeto_tipus'] = 'Hirdet≈ë t√≠pusa (k√≥dolva)'
    
    if len(numeric_columns) > 0 and 'teljes_ar_milli√≥' in filtered_df.columns:
        selected_x = st.selectbox(
            "V√°lassz X-tengely v√°ltoz√≥t az √°r elemz√©shez:",
            options=numeric_columns,
            format_func=lambda x: column_labels.get(x, x)
        )
        
        fig_scatter = px.scatter(
            filtered_df,
            x=selected_x,
            y='teljes_ar_milli√≥',
            color='csaladbarati_pontszam',
            hover_data=['cim'],
            title=f"√År vs {column_labels.get(selected_x, selected_x)}",
            labels={
                selected_x: column_labels.get(selected_x, selected_x),
                'teljes_ar_milli√≥': '√År (M Ft)',
                'csaladbarati_pontszam': 'Csal√°dbar√°t pontsz√°m'
            }
        )
        st.plotly_chart(fig_scatter, use_container_width=True)
    else:
        st.info("Nincs elegend≈ë numerikus adat a scatter plot elemz√©shez.")
    
    # Modern funkci√≥k eloszl√°s
    if all(col in filtered_df.columns for col in ['van_zold_energia', 'van_wellness_luxury', 'van_smart_tech', 'van_premium_design']):
        st.subheader("‚≠ê Modern Funkci√≥k Eloszl√°sa")
        
        modern_counts = {
            'üåû Z√∂ld energia': filtered_df['van_zold_energia'].sum(),
            'üèä Wellness & Luxury': filtered_df['van_wellness_luxury'].sum(),
            'üè† Smart Technology': filtered_df['van_smart_tech'].sum(),
            'üíé Premium Design': filtered_df['van_premium_design'].sum()
        }
        
        fig_modern = px.bar(
            x=list(modern_counts.keys()),
            y=list(modern_counts.values()),
            title="Modern funkci√≥k megoszl√°sa",
            labels={'x': 'Funkci√≥ t√≠pusa', 'y': 'Ingatlanok sz√°ma'}
        )
        st.plotly_chart(fig_modern, use_container_width=True)
    
    # Statisztikai √∂sszefoglal√≥ t√°bl√°zat
    st.header("üìä Statisztikai √ñsszefoglal√≥")
    
    # Numerikus v√°ltoz√≥k statisztik√°i
    st.subheader("üî¢ Numerikus V√°ltoz√≥k")
    
    numeric_stats = pd.DataFrame({
        'V√°ltoz√≥': ['√År (M Ft)', 'Ter√ºlet (m¬≤)', 'Szobasz√°m', 'Csal√°dbar√°t Pont'],
        '√Åtlag': [
            filtered_df['teljes_ar_milli√≥'].mean(),
            filtered_df['terulet_szam'].mean(),
            filtered_df['szobak_szam'].mean(),
            filtered_df['csaladbarati_pontszam'].mean()
        ],
        'Medi√°n': [
            filtered_df['teljes_ar_milli√≥'].median(),
            filtered_df['terulet_szam'].median(), 
            filtered_df['szobak_szam'].median(),
            filtered_df['csaladbarati_pontszam'].median()
        ],
        'Sz√≥r√°s': [
            filtered_df['teljes_ar_milli√≥'].std(),
            filtered_df['terulet_szam'].std(),
            filtered_df['szobak_szam'].std(), 
            filtered_df['csaladbarati_pontszam'].std()
        ],
        'Minimum': [
            filtered_df['teljes_ar_milli√≥'].min(),
            filtered_df['terulet_szam'].min(),
            filtered_df['szobak_szam'].min(),
            filtered_df['csaladbarati_pontszam'].min()
        ],
        'Maximum': [
            filtered_df['teljes_ar_milli√≥'].max(),
            filtered_df['terulet_szam'].max(),
            filtered_df['szobak_szam'].max(),
            filtered_df['csaladbarati_pontszam'].max()
        ]
    }).round(2)
    
    st.dataframe(numeric_stats, use_container_width=True)
    
    # Kategorikus v√°ltoz√≥k statisztik√°i
    st.subheader("üè∑Ô∏è Kategorikus V√°ltoz√≥k")
    
    categorical_cols = []
    categorical_data = []
    
    # √Ållapot elemz√©s
    if 'ingatlan_allapota' in filtered_df.columns:
        condition_counts = filtered_df['ingatlan_allapota'].value_counts()
        for condition, count in condition_counts.items():
            categorical_data.append({
                'Kateg√≥ria': 'üîß Ingatlan √°llapot',
                '√ârt√©k': condition,
                'Darabsz√°m': count,
                'Ar√°ny (%)': round(count/len(filtered_df)*100, 1)
            })
    
    # Modern funkci√≥k elemz√©se
    modern_features = ['van_zold_energia', 'van_wellness_luxury', 'van_smart_tech', 'van_premium_design']
    feature_names = ['üåû Z√∂ld Energia', 'üèä Wellness & Luxury', 'üè† Smart Technology', 'üíé Premium Design']
    
    for feature, name in zip(modern_features, feature_names):
        if feature in filtered_df.columns:
            count_yes = filtered_df[feature].sum()
            count_no = len(filtered_df) - count_yes
            categorical_data.append({
                'Kateg√≥ria': name,
                '√ârt√©k': 'Van',
                'Darabsz√°m': count_yes,
                'Ar√°ny (%)': round(count_yes/len(filtered_df)*100, 1)
            })
            categorical_data.append({
                'Kateg√≥ria': name,
                '√ârt√©k': 'Nincs',
                'Darabsz√°m': count_no,
                'Ar√°ny (%)': round(count_no/len(filtered_df)*100, 1)
            })
    
    if categorical_data:
        categorical_df = pd.DataFrame(categorical_data)
        st.dataframe(categorical_df, use_container_width=True, hide_index=True)
    
    # R√©szletes adatt√°bla
    st.header("üìã R√©szletes Lista")
    st.markdown("**Minden sz≈±rt ingatlan r√©szletei kattinthat√≥ linkekkel:**")
    
    display_columns = [
        'cim', 'teljes_ar', 'terulet', 'szobak', 'ingatlan_allapota', 'csaladbarati_pontszam', 'modern_netto_pont', 'link'
    ]
    
    available_columns = [col for col in display_columns if col in filtered_df.columns]
    
    display_df = filtered_df[available_columns].copy()
    display_df = display_df.sort_values('csaladbarati_pontszam', ascending=False)
    
    # Val√≥di ingatlan.com ID kinyer√©se a linkb≈ël + URL gener√°l√°s
    def extract_ingatlan_id(link):
        if pd.isna(link):
            return "N/A"
        try:
            # https://ingatlan.com/szukites/elado+haz+budaors-kertvaros-ganztelep+119-m2+4-szoba+263-8-milli√≥-ft/lista/12345 -> 12345
            match = re.search(r'/lista/(\d+)', str(link))
            if match:
                return match.group(1)
            # Alternat√≠v pattern: /12345 a v√©g√©n
            match = re.search(r'/(\d+)/?$', str(link))
            if match:
                return match.group(1)
            return "Link"
        except:
            return "Link"
    
    # Hozz√°adjuk a val√≥di ID-t - JAV√çTOTT verzi√≥ Streamlit-kompatibilis
    display_df_with_links = []
    for idx, (_, row) in enumerate(display_df.iterrows(), 1):
        row_dict = {
            'Sorsz√°m': idx,
            'C√≠m': row.get('cim', 'N/A'),
            '√År': row.get('teljes_ar', 'N/A'),
            'Ter√ºlet': row.get('terulet', 'N/A'),
            'Szob√°k': row.get('szobak', 'N/A'),
            '√Ållapot': row.get('ingatlan_allapota', 'N/A'),
            'Csal√°dbar√°t pont': int(row.get('csaladbarati_pontszam', 0)),
            'Modern pont': round(row.get('modern_netto_pont', 0), 1),
            'Link': create_clickable_link(extract_ingatlan_id(row.get('link')), row.get('link'))
        }
        display_df_with_links.append(row_dict)
    
    # DataFrame l√©trehoz√°sa
    final_display_df = pd.DataFrame(display_df_with_links)
    
    # Dataframe megjelen√≠t√©se
    st.dataframe(final_display_df, use_container_width=True, hide_index=True)
    
    # Z√°r√≥ inform√°ci√≥k
    st.markdown("---")
    st.markdown("**üìù Csal√°dbar√°t Pontsz√°m Sz√°m√≠t√°si M√≥dszer:**")
    st.markdown("""
    A **Csal√°dbar√°t Pontsz√°m** 0-100 pontos sk√°l√°n √©rt√©keli az ingatlanokat, n√©gy f≈ë kateg√≥ri√°ban:
    
    **üè† Ter√ºlet pontsz√°m (max 25 pont):**
    - 200+ m¬≤: 25 pont
    - 150-199 m¬≤: 20 pont  
    - 120-149 m¬≤: 15 pont
    - 100-119 m¬≤: 10 pont
    - 100 m¬≤ alatt: 5 pont
    
    **üõèÔ∏è Szobasz√°m pontsz√°m (max 25 pont):**
    - 5+ szoba: 25 pont
    - 4 szoba: 20 pont
    - 3 szoba: 15 pont
    - 2 vagy kevesebb szoba: 10 pont
    - Hi√°nyz√≥ adat eset√©n: 15 pont (√°tlag)
    
    **üîß √Ållapot pontsz√°m (max 25 pont):**
    - √öj/√öj√©p√≠t√©s≈±: 25 pont
    - Fel√∫j√≠tott/Kit≈±n≈ë: 20 pont
    - J√≥: 15 pont
    - K√∂zepes: 10 pont
    - Egy√©b/Rossz: 5 pont
    
    **‚ö° Modern funkci√≥k pontsz√°m (max 25 pont):**
    - Minden modern funkci√≥ 6,25 pontot √©r:
      - üåû Z√∂ld energia (napelem, h≈ëszivatty√∫)
      - üèä Wellness & Luxury (medence, szauna)
      - üè† Smart Technology (okos otthon)
      - üíé Premium Design (modern diz√°jn)
    """)
    st.markdown("---")
    st.markdown("**üìä Tov√°bbi Megjegyz√©sek:**")
    st.markdown("- A csal√°dbar√°t pontsz√°m 3 gyerekes csal√°dok ig√©nyeit figyelembe v√©ve k√©sz√ºlt")
    st.markdown("- 150+ m¬≤ √©s 4+ szoba ide√°lis nagyobb csal√°dok sz√°m√°ra")  
    st.markdown("- A modern pontsz√°m tov√°bbi k√©nyelmi √©s technol√≥giai elemeket √©rt√©kel")
    st.markdown(f"- Az adatok {timestamp} √°llapot szerint friss√ºltek")
    st.markdown(f"- **üó∫Ô∏è GPS koordin√°t√°k:** {coord_count}/{len(filtered_df)} ingatlanhoz √©rhet≈ëek el t√©rk√©pes megjelen√≠t√©shez")

def create_interactive_map(df, location_name):
    """üó∫Ô∏è INTERAKT√çV T√âRK√âP - GPS koordin√°t√°k alapj√°n"""
    
    # Koordin√°ta oszlopok ellen≈ërz√©se
    has_coordinates = all(col in df.columns for col in ['geo_latitude', 'geo_longitude'])
    
    if not has_coordinates:
        st.warning("‚ö†Ô∏è Nincs GPS koordin√°ta adat a t√©rk√©phez. Koordin√°t√°k n√©lk√ºli CSV bet√∂ltve.")
        return
    
    # Koordin√°t√°kkal rendelkez≈ë rekordok sz≈±r√©se
    map_df = df.dropna(subset=['geo_latitude', 'geo_longitude']).copy()
    
    if map_df.empty:
        st.warning("‚ö†Ô∏è Nincsenek √©rv√©nyes GPS koordin√°t√°k az aktu√°lis sz≈±r√©shez.")
        return
    
    st.markdown("---")
    st.markdown("## üó∫Ô∏è **INTERAKT√çV T√âRK√âP**")
    st.markdown(f"**üìç Lok√°ci√≥:** {location_name} | **üè† Ingatlanok:** {len(map_df)} db GPS koordin√°t√°val")
    
    # T√©rk√©p alapbe√°ll√≠t√°sok
    center_lat = map_df['geo_latitude'].mean()
    center_lng = map_df['geo_longitude'].mean()
    
    # Folium t√©rk√©p l√©trehoz√°sa
    m = folium.Map(
        location=[center_lat, center_lng],
        zoom_start=12,
        tiles='OpenStreetMap'
    )
    
    # Sz√≠nk√≥dol√°s √°r szerint
    def get_price_color(price):
        if pd.isna(price):
            return '#95A5A6'  # Sz√ºrke - nincs √°r adat
        elif price <= 100:
            return '#2ECC71'  # Z√∂ld - olcs√≥ (‚â§100M)
        elif price <= 200:
            return '#F39C12'  # Narancss√°rga - k√∂zepes (101-200M)
        elif price <= 300:
            return '#E74C3C'  # Piros - dr√°ga (201-300M)
        else:
            return '#8E44AD'  # Lila - nagyon dr√°ga (300M+)
    
    # Enhanced lok√°ci√≥ oszlop meghat√°roz√°sa (m√°r nem haszn√°ljuk sz√≠nk√≥dol√°sra)
    district_col = 'enhanced_keruleti_resz' if 'enhanced_keruleti_resz' in map_df.columns else 'varosresz_kategoria'
    
    # Markerek hozz√°ad√°sa
    for idx, row in map_df.iterrows():
        # Popup tartalom
        price = row.get('teljes_ar_milli√≥', 'N/A')
        popup_content = f"""
        <b>{row.get('cim', 'N/A')}</b><br/>
        üí∞ √År: {row.get('teljes_ar', 'N/A')}<br/>
        üìè Ter√ºlet: {row.get('terulet', 'N/A')}<br/>
        üõèÔ∏è Szob√°k: {row.get('szobak', 'N/A')}<br/>
        üîß √Ållapot: {row.get('ingatlan_allapota', 'N/A')}<br/>
        üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Csal√°dbar√°t pont: {row.get('csaladbarati_pontszam', 0):.0f}<br/>
        üè¢ V√°rosr√©sz: {row.get(district_col, 'N/A')}
        """
        
        # Marker hozz√°ad√°sa
        folium.Marker(
            location=[row['geo_latitude'], row['geo_longitude']],
            popup=folium.Popup(popup_content, max_width=300),
            tooltip=f"{row.get('cim', 'N/A')} - {row.get('teljes_ar', 'N/A')}",
            icon=folium.Icon(color='white', icon_color=get_price_color(price))
        ).add_to(m)
    
    # T√©rk√©p megjelen√≠t√©se Streamlit-ben
    st_folium(m, width=900, height=500, key=f"map_{location_name.lower().replace(' ', '_')}")

if __name__ == "__main__":
    main()
