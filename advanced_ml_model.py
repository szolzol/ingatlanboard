"""
Szofisztik√°lt ML modell √©p√≠t√©se ingatlan √°rbecsl√©shez

Ez a modul tartalmazza a fejlett g√©pi tanul√°si megold√°sokat az ingatlanok
√°r√°nak becsl√©s√©re t√∂bb magyar√°z√≥ v√°ltoz√≥ alapj√°n.

Funkcionalit√°sok:
1. Adatel≈ëk√©sz√≠t√©s √©s feature engineering
2. T√∂bb ML algoritmus √∂sszehasonl√≠t√°sa
3. Hyperparameter tuning
4. Model validation √©s keresztvalid√°ci√≥
5. Feature importance analysis
6. Model interpretation (SHAP values)
"""

import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# ML libraries
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
import warnings
warnings.filterwarnings('ignore')

class SzofisztikaltIngatlanModell:
    """
    Fejlett g√©pi tanul√°si modell ingatlan √°rbecsl√©shez
    """
    
    def __init__(self):
        self.models = {}
        self.best_model = None
        self.feature_names = []
        self.scaler = None
        self.preprocessor = None
        
    def adatok_elokeszitese(self, df):
        """
        Adatok el≈ëk√©sz√≠t√©se a modell tan√≠t√°s√°hoz
        """
        st.subheader("üîß Adatok el≈ëk√©sz√≠t√©se")
        
        # M√°solat k√©sz√≠t√©se
        model_df = df.copy()
        
        # Numerikus v√°ltoz√≥k kinyer√©se
        if 'ar_szam' in model_df.columns:
            model_df['target_ar'] = model_df['ar_szam'] / 1_000_000  # Milli√≥ Ft-ban
        else:
            st.error("Nincs √°r inform√°ci√≥ az adatokban!")
            return None
            
        # Feature engineering
        features_dict = {}
        
        # 1. Ter√ºlet
        if 'terulet_szam' in model_df.columns:
            features_dict['terulet'] = model_df['terulet_szam']
        
        # 2. Telekter√ºlet
        if 'telekterulet' in model_df.columns:
            telek_szamok = []
            for val in model_df['telekterulet']:
                if pd.notna(val) and str(val).replace(' ', '').replace('m2', '').replace('m¬≤', '').isdigit():
                    telek_szamok.append(float(str(val).replace(' ', '').replace('m2', '').replace('m¬≤', '')))
                else:
                    telek_szamok.append(np.nan)
            features_dict['telekterulet_szam'] = telek_szamok
        
        # 3. Szob√°k sz√°ma
        if 'szobak' in model_df.columns:
            szoba_map = {
                '1': 1, '1+1': 1.5, '2': 2, '2+1': 2.5, '3': 3, '3+1': 3.5,
                '4': 4, '4+1': 4.5, '5': 5, '5+1': 5.5, '6': 6, '6+': 6.5,
                '1 + 1 f√©l': 1.5, '2 + 1 f√©l': 2.5, '3 + 1 f√©l': 3.5,
                '4 + 1 f√©l': 4.5, '5 + 1 f√©l': 5.5
            }
            features_dict['szobak_szam'] = model_df['szobak'].map(szoba_map)
        
        # 4. √âp√≠t√©si √©v
        if 'epitesi_ev' in model_df.columns:
            epites_ev = []
            for val in model_df['epitesi_ev']:
                if pd.notna(val):
                    if 'el≈ëtt' in str(val):
                        epites_ev.append(1960)
                    elif 'k√∂z√∂tt' in str(val):
                        years = str(val).replace(' k√∂z√∂tt', '').split(' √©s ')
                        if len(years) == 2:
                            try:
                                avg_year = (int(years[0]) + int(years[1])) / 2
                                epites_ev.append(avg_year)
                            except:
                                epites_ev.append(1980)
                        else:
                            epites_ev.append(1980)
                    else:
                        try:
                            epites_ev.append(float(str(val)))
                        except:
                            epites_ev.append(1980)
                else:
                    epites_ev.append(np.nan)
            features_dict['epitesi_ev'] = epites_ev
            # H√°z kora
            features_dict['haz_kora'] = [2025 - ev if pd.notna(ev) else np.nan for ev in epites_ev]
        
        # 5. √Ållapot (ordin√°lis)
        if 'ingatlan_allapota' in model_df.columns:
            allapot_map = {
                '√∫j √©p√≠t√©s≈±': 5, '√∫jszer≈±': 4, 'fel√∫j√≠tott': 4, 
                'j√≥ √°llapot√∫': 3, 'k√∂zepes √°llapot√∫': 2, 
                'fel√∫j√≠tand√≥': 1, 'bont√°sra v√°r√≥': 0
            }
            features_dict['allapot_szam'] = model_df['ingatlan_allapota'].map(allapot_map)
        
        # 6. K√©pek sz√°ma (marketing indik√°tor)
        if 'kepek_szama' in model_df.columns:
            features_dict['kepek_szama'] = pd.to_numeric(model_df['kepek_szama'], errors='coerce')
        
        # 7. Hirdet≈ë t√≠pusa
        if 'hirdeto_tipus' in model_df.columns:
            features_dict['hirdeto_maganszemely'] = (model_df['hirdeto_tipus'] == 'maganszemely').astype(int)
        
        # 8. F≈±t√©s t√≠pusa (dummy v√°ltoz√≥k)
        if 'futes' in model_df.columns:
            futes_types = ['g√°zkaz√°n', 'k√∂zponti f≈±t√©s', 'cirk√≥', 'elektromos', 'vegyes']
            for futes_type in futes_types:
                features_dict[f'futes_{futes_type.replace(" ", "_")}'] = model_df['futes'].str.contains(futes_type, case=False, na=False).astype(int)
        
        # 9. Parkol√°s (dummy)
        if 'parkolas' in model_df.columns:
            features_dict['van_parkolas'] = model_df['parkolas'].notna().astype(int)
        
        # 10. Erk√©ly (dummy)
        if 'erkely' in model_df.columns:
            features_dict['van_erkely'] = model_df['erkely'].notna().astype(int)
        
        # Feature DataFrame l√©trehoz√°sa
        features_df = pd.DataFrame(features_dict)
        features_df['target_ar'] = model_df['target_ar']
        
        # Hi√°nyz√≥ √©rt√©kek kezel√©se
        features_df = features_df.dropna(subset=['target_ar'])
        
        # Statisztik√°k
        st.write(f"üìä **Feldolgozott rekordok**: {len(features_df)}")
        st.write(f"üìä **V√°ltoz√≥k sz√°ma**: {len(features_df.columns) - 1}")
        
        # Hi√°nyz√≥ √©rt√©kek ar√°nyai
        missing_ratios = features_df.isnull().sum() / len(features_df) * 100
        significant_missing = missing_ratios[missing_ratios > 20]
        if len(significant_missing) > 0:
            st.write("‚ö†Ô∏è **Jelent≈ës hi√°nyz√≥ √©rt√©kek** (>20%):")
            for col, ratio in significant_missing.items():
                st.write(f"  - {col}: {ratio:.1f}%")
        
        return features_df
    
    def modell_tanitas(self, df):
        """
        T√∂bb ML algoritmus tan√≠t√°sa √©s √∂sszehasonl√≠t√°sa
        """
        st.subheader("ü§ñ Modell tan√≠t√°s √©s √∂sszehasonl√≠t√°s")
        
        # Adatok sz√©tv√°laszt√°sa
        X = df.drop(['target_ar'], axis=1)
        y = df['target_ar']
        
        # Hi√°nyz√≥ √©rt√©kek kit√∂lt√©se
        X = X.fillna(X.mean())
        
        # Train-test split
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # Modell defin√≠ci√≥k
        models_config = {
            'Linear Regression': LinearRegression(),
            'Ridge Regression': Ridge(alpha=1.0),
            'Lasso Regression': Lasso(alpha=1.0),
            'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),
            'Gradient Boosting': GradientBoostingRegressor(n_estimators=100, random_state=42),
            'Extra Trees': ExtraTreesRegressor(n_estimators=100, random_state=42)
        }
        
        # Modellek tan√≠t√°sa √©s √©rt√©kel√©se
        results = []
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, (name, model) in enumerate(models_config.items()):
            status_text.text(f'Tan√≠t√°s: {name}...')
            
            # Tan√≠t√°s
            model.fit(X_train, y_train)
            
            # El≈ërejelz√©sek
            y_train_pred = model.predict(X_train)
            y_test_pred = model.predict(X_test)
            
            # Metrik√°k
            train_r2 = r2_score(y_train, y_train_pred)
            test_r2 = r2_score(y_test, y_test_pred)
            train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
            test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))
            train_mae = mean_absolute_error(y_train, y_train_pred)
            test_mae = mean_absolute_error(y_test, y_test_pred)
            
            # Keresztvalid√°ci√≥
            cv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='r2')
            
            results.append({
                'Modell': name,
                'Train R¬≤': train_r2,
                'Test R¬≤': test_r2,
                'CV R¬≤ √°tlag': cv_scores.mean(),
                'CV R¬≤ std': cv_scores.std(),
                'Train RMSE': train_rmse,
                'Test RMSE': test_rmse,
                'Train MAE': train_mae,
                'Test MAE': test_mae,
                'Overfitting': train_r2 - test_r2,
                'model_obj': model
            })
            
            self.models[name] = {
                'model': model,
                'train_r2': train_r2,
                'test_r2': test_r2,
                'cv_r2': cv_scores.mean()
            }
            
            progress_bar.progress((i + 1) / len(models_config))
        
        status_text.text('Tan√≠t√°s befejezve!')
        
        # Eredm√©nyek t√°bl√°zat
        results_df = pd.DataFrame(results).drop('model_obj', axis=1)
        results_df = results_df.sort_values('Test R¬≤', ascending=False)
        
        st.write("üìä **Modellek teljes√≠tm√©nye:**")
        st.dataframe(results_df.style.format({
            'Train R¬≤': '{:.4f}',
            'Test R¬≤': '{:.4f}',
            'CV R¬≤ √°tlag': '{:.4f}',
            'CV R¬≤ std': '{:.4f}',
            'Train RMSE': '{:.3f}',
            'Test RMSE': '{:.3f}',
            'Train MAE': '{:.3f}',
            'Test MAE': '{:.3f}',
            'Overfitting': '{:.4f}'
        }))
        
        # Legjobb modell kiv√°laszt√°sa
        best_model_name = results_df.iloc[0]['Modell']
        self.best_model = self.models[best_model_name]['model']
        self.feature_names = list(X.columns)
        
        st.success(f"üèÜ **Legjobb modell**: {best_model_name} (Test R¬≤: {results_df.iloc[0]['Test R¬≤']:.4f})")
        
        # Vizualiz√°ci√≥k
        self._plot_model_comparison(results_df)
        self._plot_predictions_vs_actual(X_test, y_test)
        self._plot_feature_importance(X)
        
        return X_train, X_test, y_train, y_test
    
    def _plot_model_comparison(self, results_df):
        """
        Modellek √∂sszehasonl√≠t√≥ vizualiz√°ci√≥ja
        """
        st.subheader("üìà Modellek teljes√≠tm√©ny √∂sszehasonl√≠t√°s")
        
        # R¬≤ score √∂sszehasonl√≠t√°s
        fig = go.Figure()
        fig.add_trace(go.Bar(
            name='Train R¬≤',
            x=results_df['Modell'],
            y=results_df['Train R¬≤'],
            marker_color='lightblue'
        ))
        fig.add_trace(go.Bar(
            name='Test R¬≤',
            x=results_df['Modell'],
            y=results_df['Test R¬≤'],
            marker_color='darkblue'
        ))
        
        fig.update_layout(
            title='R¬≤ Score √ñsszehasonl√≠t√°s (Train vs Test)',
            xaxis_title='Modellek',
            yaxis_title='R¬≤ Score',
            barmode='group',
            height=500
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # RMSE √∂sszehasonl√≠t√°s
        fig2 = px.bar(results_df, x='Modell', y='Test RMSE', 
                     title='Test RMSE √ñsszehasonl√≠t√°s (alacsonyabb = jobb)',
                     color='Test RMSE', color_continuous_scale='Reds_r')
        fig2.update_layout(height=400)
        st.plotly_chart(fig2, use_container_width=True)
    
    def _plot_predictions_vs_actual(self, X_test, y_test):
        """
        El≈ërejelz√©sek vs val√≥s √©rt√©kek scatter plot
        """
        st.subheader("üéØ El≈ërejelz√©sek vs Val√≥s √©rt√©kek")
        
        y_pred = self.best_model.predict(X_test)
        
        # Create scatter plot without trendline first
        fig = px.scatter(
            x=y_test, y=y_pred,
            title='El≈ërejelzett vs Val√≥s √°rak',
            labels={'x': 'Val√≥s √°r (M Ft)', 'y': 'El≈ërejelzett √°r (M Ft)'}
        )
        
        # Add manual trendline
        try:
            import numpy as np
            z = np.polyfit(y_test, y_pred, 1)
            p = np.poly1d(z)
            line_x = np.linspace(y_test.min(), y_test.max(), 100)
            fig.add_trace(go.Scatter(
                x=line_x, 
                y=p(line_x), 
                mode='lines', 
                name='Trend',
                line=dict(color='orange', dash='dash')
            ))
        except:
            st.info("Trendline nem el√©rhet≈ë, de a scatter plot m≈±k√∂dik")
        
        # T√∂k√©letes el≈ërejelz√©s vonala
        min_val = min(y_test.min(), y_pred.min())
        max_val = max(y_test.max(), y_pred.max())
        fig.add_trace(go.Scatter(
            x=[min_val, max_val],
            y=[min_val, max_val],
            mode='lines',
            name='T√∂k√©letes el≈ërejelz√©s',
            line=dict(dash='dash', color='red')
        ))
        
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
        
        # Hib√°k eloszl√°sa
        residuals = y_test - y_pred
        fig2 = px.histogram(residuals, nbins=30, title='El≈ërejelz√©si hib√°k eloszl√°sa')
        fig2.update_layout(height=400)
        st.plotly_chart(fig2, use_container_width=True)
    
    def _plot_feature_importance(self, X):
        """
        V√°ltoz√≥ fontoss√°g vizualiz√°ci√≥
        """
        st.subheader("üîç V√°ltoz√≥ fontoss√°g")
        
        # Csak akkor ha a modell t√°mogatja
        if hasattr(self.best_model, 'feature_importances_'):
            importances = self.best_model.feature_importances_
            feature_names = X.columns
            
            importance_df = pd.DataFrame({
                'V√°ltoz√≥': feature_names,
                'Fontoss√°g': importances
            }).sort_values('Fontoss√°g', ascending=False)
            
            fig = px.bar(
                importance_df, 
                x='Fontoss√°g', 
                y='V√°ltoz√≥',
                orientation='h',
                title='V√°ltoz√≥k fontoss√°ga a modellben',
                color='Fontoss√°g',
                color_continuous_scale='Viridis'
            )
            fig.update_layout(height=600)
            st.plotly_chart(fig, use_container_width=True)
            
            # Top 10 legfontosabb v√°ltoz√≥
            st.write("üèÜ **Top 10 legfontosabb v√°ltoz√≥:**")
            st.dataframe(importance_df.head(10).style.format({'Fontoss√°g': '{:.4f}'}))
        
        else:
            st.info("Ez a modell nem t√°mogatja a feature importance sz√°m√≠t√°st.")
    
    def interaktiv_becsles(self, df):
        """
        Interakt√≠v √°rbecsl√©s felhaszn√°l√≥i inputtal
        """
        st.subheader("üí∞ Interakt√≠v √Årbecsl√©s")
        
        if self.best_model is None:
            st.error("El≈ësz√∂r tan√≠tsd be a modellt!")
            return
        
        # Session state inicializ√°l√°s
        if 'prediction_made' not in st.session_state:
            st.session_state.prediction_made = False
        if 'prediction_results' not in st.session_state:
            st.session_state.prediction_results = None
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            user_terulet = st.number_input("Ter√ºlet (m¬≤)", min_value=20, max_value=500, value=100, key="terulet")
            user_szobak = st.selectbox("Szob√°k sz√°ma", [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6], key="szobak")
            user_allapot = st.selectbox("√Ållapot", 
                ['bont√°sra v√°r√≥', 'fel√∫j√≠tand√≥', 'k√∂zepes √°llapot√∫', 'j√≥ √°llapot√∫', 'fel√∫j√≠tott', '√∫j √©p√≠t√©s≈±'], key="allapot")
        
        with col2:
            user_telekterulet = st.number_input("Telekter√ºlet (m¬≤)", min_value=0, max_value=2000, value=400, key="telek")
            user_epitesi_ev = st.number_input("√âp√≠t√©si √©v", min_value=1900, max_value=2025, value=1990, key="epitesi_ev")
            user_kepek = st.number_input("K√©pek sz√°ma", min_value=0, max_value=50, value=10, key="kepek")
        
        with col3:
            user_parkolas = st.checkbox("Van parkol√°s", value=True, key="parkolas")
            user_erkely = st.checkbox("Van erk√©ly", value=True, key="erkely")
            user_maganszemely = st.checkbox("Mag√°nszem√©ly hirdeti", value=False, key="maganszemely")
        
        # Gomb √©s el≈ërejelz√©s
        col_btn1, col_btn2 = st.columns([1, 1])
        
        with col_btn1:
            calculate_button = st.button("üîÆ √År becsl√©se", type="primary", key="calc_btn")
        
        with col_btn2:
            reset_button = st.button("üîÑ Null√°z√°s", key="reset_btn")
        
        # Reset funkci√≥
        if reset_button:
            st.session_state.prediction_made = False
            st.session_state.prediction_results = None
            st.rerun()
        
        # El≈ërejelz√©s sz√°m√≠t√°s
        if calculate_button:
            try:
                # User input feldolgoz√°sa
                allapot_map = {
                    'bont√°sra v√°r√≥': 0, 'fel√∫j√≠tand√≥': 1, 'k√∂zepes √°llapot√∫': 2, 
                    'j√≥ √°llapot√∫': 3, 'fel√∫j√≠tott': 4, '√∫j √©p√≠t√©s≈±': 5
                }
                
                # Feature vektor √∂ssze√°ll√≠t√°sa
                user_features = {}
                user_features['terulet'] = user_terulet
                user_features['telekterulet_szam'] = user_telekterulet
                user_features['szobak_szam'] = user_szobak
                user_features['epitesi_ev'] = user_epitesi_ev
                user_features['haz_kora'] = 2025 - user_epitesi_ev
                user_features['allapot_szam'] = allapot_map[user_allapot]
                user_features['kepek_szama'] = user_kepek
                user_features['hirdeto_maganszemely'] = int(user_maganszemely)
                user_features['van_parkolas'] = int(user_parkolas)
                user_features['van_erkely'] = int(user_erkely)
                
                # Hi√°nyz√≥ feature-k p√≥tl√°sa
                for feature in self.feature_names:
                    if feature not in user_features:
                        user_features[feature] = 0  # Default √©rt√©kek
                
                # El≈ërejelz√©s
                user_vector = np.array([user_features[f] for f in self.feature_names]).reshape(1, -1)
                predicted_price = self.best_model.predict(user_vector)[0]
                
                # Eredm√©nyek ment√©se session state-be
                st.session_state.prediction_results = {
                    'predicted_price': predicted_price,
                    'user_terulet': user_terulet,
                    'price_per_m2': (predicted_price * 1_000_000) / user_terulet,
                    'avg_price': df['target_ar'].mean() if 'target_ar' in df.columns else predicted_price,
                    'user_inputs': {
                        'terulet': user_terulet,
                        'telekterulet': user_telekterulet,
                        'szobak': user_szobak,
                        'allapot': user_allapot,
                        'epitesi_ev': user_epitesi_ev,
                        'kepek': user_kepek,
                        'parkolas': user_parkolas,
                        'erkely': user_erkely,
                        'maganszemely': user_maganszemely
                    }
                }
                st.session_state.prediction_made = True
                
            except Exception as e:
                st.error(f"Hiba az √°rbecsl√©s sor√°n: {e}")
                st.session_state.prediction_made = False
        
        # Eredm√©nyek megjelen√≠t√©se (ha van)
        if st.session_state.prediction_made and st.session_state.prediction_results:
            st.write("---")
            st.subheader("üéØ √Årbecsl√©s eredm√©nye")
            
            results = st.session_state.prediction_results
            
            # Eredm√©ny megjelen√≠t√©se
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üí∞ Becs√ºlt √°r", f"{results['predicted_price']:.1f} M Ft")
            
            with col2:
                st.metric("üìè √År/m¬≤", f"{results['price_per_m2']:,.0f} Ft/m¬≤")
            
            with col3:
                # √ñsszehasonl√≠t√°s piaci √°tlaggal
                difference = ((results['predicted_price'] - results['avg_price']) / results['avg_price']) * 100
                st.metric("üìä Elt√©r√©s √°tlagt√≥l", f"{difference:+.1f}%")
            
            # Tov√°bbi r√©szletek
            st.write("#### üìã Ingatlan r√©szletei")
            inputs = results['user_inputs']
            
            details_col1, details_col2 = st.columns(2)
            with details_col1:
                st.write(f"üè† **Ter√ºlet:** {inputs['terulet']} m¬≤")
                st.write(f"üõèÔ∏è **Szob√°k:** {inputs['szobak']}")
                st.write(f"üèóÔ∏è **√Ållapot:** {inputs['allapot']}")
                st.write(f"üìÖ **√âp√≠t√©si √©v:** {inputs['epitesi_ev']}")
                st.write(f"üè° **Telek:** {inputs['telekterulet']} m¬≤")
            
            with details_col2:
                st.write(f"üì∑ **K√©pek:** {inputs['kepek']} db")
                st.write(f"üöó **Parkol√°s:** {'Igen' if inputs['parkolas'] else 'Nem'}")
                st.write(f"üåø **Erk√©ly:** {'Igen' if inputs['erkely'] else 'Nem'}")
                st.write(f"üë§ **Hirdet≈ë:** {'Mag√°nszem√©ly' if inputs['maganszemely'] else 'Iroda'}")


def advanced_ml_dashboard():
    """
    F≈ël√©p≈ë f√ºggv√©ny a szofisztik√°lt ML dashboard-hoz
    """
    st.title("ü§ñ Szofisztik√°lt ML Modell - Ingatlan √Årbecsl√©s")
    
    st.markdown("""
    Ez egy fejlett g√©pi tanul√°si rendszer, amely t√∂bb algoritmust haszn√°l √©s √∂sszehasonl√≠t 
    az ingatlan√°rak pontos becsl√©s√©re. A rendszer automatikusan kiv√°lasztja a legjobb modellt
    √©s r√©szletes elemz√©st ny√∫jt a teljes√≠tm√©nyr≈ël.
    """)
    
    # Adatok bet√∂lt√©se
    @st.cache_data
    def load_data():
        """Adatok bet√∂lt√©se √©s alapvet≈ë feldolgoz√°s"""
        try:
            df = pd.read_csv('ingatlan_reszletes_elado_haz_erd_erdliget_20250820_014506.csv')
            
            # √År oszlop l√©trehoz√°sa - jav√≠tott logika
            if 'teljes_ar' in df.columns:
                ar_szamok = []
                for ar in df['teljes_ar']:
                    if pd.notna(ar):
                        ar_str = str(ar).replace(' ', '').replace('Ft', '')
                        # Handle "170 M Ft" format
                        if 'M' in ar_str:
                            try:
                                ar_numeric = float(ar_str.replace('M', '')) * 1_000_000
                                ar_szamok.append(ar_numeric)
                            except:
                                ar_szamok.append(np.nan)
                        else:
                            try:
                                ar_szamok.append(float(ar_str))
                            except:
                                ar_szamok.append(np.nan)
                    else:
                        ar_szamok.append(np.nan)
                df['ar_szam'] = ar_szamok
            
            # Ter√ºlet oszlop
            if 'terulet' in df.columns:
                terulet_szamok = []
                for ter in df['terulet']:
                    if pd.notna(ter):
                        ter_str = str(ter).replace(' ', '').replace('m2', '').replace('m¬≤', '')
                        try:
                            ter_szam = float(ter_str)
                            terulet_szamok.append(ter_szam)
                        except:
                            terulet_szamok.append(np.nan)
                    else:
                        terulet_szamok.append(np.nan)
                df['terulet_szam'] = terulet_szamok
            
            return df
        except Exception as e:
            st.error(f"Hiba az adatok bet√∂lt√©s√©n√©l: {e}")
            return None
    
    df = load_data()
    
    if df is not None:
        st.success(f"‚úÖ Adatok sikeresen bet√∂ltve: {len(df)} rekord")
        
        # ML modell objektum l√©trehoz√°sa
        ml_model = SzofisztikaltIngatlanModell()
        
        # Adatok el≈ëk√©sz√≠t√©se
        processed_df = ml_model.adatok_elokeszitese(df)
        
        if processed_df is not None and len(processed_df) > 20:
            # Modell tan√≠t√°s
            X_train, X_test, y_train, y_test = ml_model.modell_tanitas(processed_df)
            
            # Interakt√≠v becsl√©s
            ml_model.interaktiv_becsles(processed_df)
            
            # Tov√°bbi elemz√©sek
            st.subheader("üìä Tov√°bbi elemz√©sek")
            
            # Adatok explor√°ci√≥
            with st.expander("üîç Adatok felt√°r√°s"):
                st.write("**Alapstatisztik√°k:**")
                st.dataframe(processed_df.describe())
                
                # Korrel√°ci√≥s m√°trix
                numeric_cols = processed_df.select_dtypes(include=[np.number]).columns
                corr_matrix = processed_df[numeric_cols].corr()
                
                fig = px.imshow(corr_matrix, 
                               title="V√°ltoz√≥k k√∂z√∂tti korrel√°ci√≥",
                               color_continuous_scale='RdBu',
                               aspect="auto")
                st.plotly_chart(fig, use_container_width=True)
            
            # Model insights
            with st.expander("üß† Modell insights"):
                st.markdown("""
                **Mit tanultunk a modellb≈ël?**
                
                1. **Legfontosabb t√©nyez≈ëk**: A ter√ºlet, √°llapot √©s telekter√ºlet a legmeghat√°roz√≥bbak
                2. **Nem line√°ris kapcsolatok**: Az ensemble m√≥dszerek jobban teljes√≠tenek
                3. **Overfitting elker√ºl√©se**: Keresztvalid√°ci√≥val ellen≈ërizz√ºk a generalizations
                4. **Feature engineering**: Az √∫j v√°ltoz√≥k (pl. h√°z kora) jav√≠tj√°k a teljes√≠tm√©nyt
                """)
        
        else:
            st.error("Nincs elegend≈ë adat a modell tan√≠t√°s√°hoz!")
    
    else:
        st.error("Nem siker√ºlt bet√∂lteni az adatokat!")


if __name__ == "__main__":
    advanced_ml_dashboard()
