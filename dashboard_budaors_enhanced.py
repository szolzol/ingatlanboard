"""
STREAMLIT DASHBOARD - BUDA√ñRS INGATLAN ELEMZ√âS (GPS koordin√°t√°kkal + Iskolak√∂rzet sz≈±r≈ë)
========================================================================================

üéØ Egyedi dashboard Buda√∂rsi ingatlanokhoz koordin√°ta alap√∫ t√©rk√©ppel + 1-es sz√°m√∫ iskola k√∂rzeti sz≈±r≈ëvel
üìä Adatforr√°s: ingatlan_reszletes_budaors_20250822_220240_koordinatak_20250822_221556.csv
üè´ Iskolak√∂rzet: iskola_budaors_cimek.txt alapj√°n
‚ö° Template alapj√°n gener√°lva - dinamikus id≈ëb√©lyeg + fix lok√°ci√≥
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import folium
from streamlit_folium import st_folium
import glob
import re
import warnings
import os
from datetime import datetime

warnings.filterwarnings('ignore')

# FIX lok√°ci√≥ √©s timestamp
def get_location_from_filename():
    """Fix location n√©v visszaad√°sa"""
    return "BUDA√ñRS"

location_name = get_location_from_filename()
timestamp = datetime.now().strftime("%Y.%m.%d %H:%M")

# Streamlit konfigur√°ci√≥
st.set_page_config(
    page_title=f"Ingatlan Dashboard - {location_name} - {timestamp}",
    page_icon="üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_school_streets():
    """1-es sz√°m√∫ iskola k√∂rzeti utc√°inak bet√∂lt√©se - JAV√çTOTT multi-street parsing"""
    try:
        with open('iskola_budaors_cimek.txt', 'r', encoding='utf-8') as f:
            school_addresses = f.readlines()
        
        # Utcanevek kinyer√©se - MULTI-STREET support
        school_streets = set()
        for address in school_addresses:
            address = address.strip()
            if address:
                # El≈ëfeldolgoz√°s: p√°ratlan/p√°ros/sz√°mok elt√°vol√≠t√°sa
                cleaned = re.sub(r'\s+(p√°ratlan|p√°ros).*$', '', address)
                cleaned = re.sub(r'\s+\d+.*$', '', cleaned)
                cleaned = re.sub(r'\s+-t≈ël.*$', '', cleaned)
                
                # Multi-street parsing: "D√âZSMA UTCA DI√ìFA UTCA" -> ["d√©zsma utca", "di√≥fa utca"]
                parts = re.split(r'(UTCA|K√ñZ|√öT|T√âR|D≈∞L≈ê)', cleaned, flags=re.IGNORECASE)
                
                if len(parts) > 3:  # Multi-street detected
                    # P√°ronk√©nt feldolgozzuk: n√©v + t√≠pus
                    for i in range(0, len(parts)-1, 2):
                        if i+1 < len(parts):
                            street_name = parts[i].strip()
                            street_type = parts[i+1].strip()
                            if street_name and street_type:
                                full_street = f'{street_name} {street_type}'.strip()
                                normalized = ' '.join(full_street.lower().split())
                                if len(normalized) > 2:
                                    school_streets.add(normalized)
                else:
                    # Single street
                    normalized_street = ' '.join(cleaned.strip().lower().split())
                    if normalized_street and len(normalized_street) > 2:
                        school_streets.add(normalized_street)
        
        st.sidebar.info(f"üè´ Bet√∂lt√∂tt iskolak√∂rzeti utc√°k: {len(school_streets)} db")
        
        # Debug: els≈ë 5 utca megjelen√≠t√©se
        if school_streets:
            sample_streets = sorted(list(school_streets))[:5]
            st.sidebar.info(f"üîç Minta utc√°k: {', '.join(sample_streets)}")
            
        return school_streets
        
    except FileNotFoundError:
        st.sidebar.error("‚ùå Iskola c√≠mek f√°jl nem tal√°lhat√≥: iskola_budaors_cimek.txt")
        return set()
    except Exception as e:
        st.sidebar.error(f"‚ùå Iskola c√≠mek bet√∂lt√©si hiba: {e}")
        return set()

def is_in_school_district(property_address, school_streets):
    """Ellen≈ërzi, hogy az ingatlan c√≠me iskolak√∂rzeti utc√°ban van-e - JAV√çTOTT matching"""
    if not property_address or not school_streets:
        return False
    
    # Ingatlan c√≠m normaliz√°l√°sa
    property_address_clean = str(property_address).lower()
    # Extra sz√≥k√∂z√∂k elt√°vol√≠t√°sa √©s normaliz√°l√°s
    property_address_clean = ' '.join(property_address_clean.split())
    
    # Direkte utcan√©v egyez√©s keres√©se
    for school_street in school_streets:
        if school_street in property_address_clean:
            return True
    
    # Alternat√≠v keres√©s: kulcsszavak alapj√°n
    # pl. "buda√∂rs, di√≥fa utca" -> "di√≥fa utca" kikeres√©se
    for school_street in school_streets:
        # Utcan√©v f≈ëbb r√©szei (els≈ë 2-3 sz√≥)
        street_words = school_street.split()
        if len(street_words) >= 2:
            main_part = ' '.join(street_words[:2])  # pl. "di√≥fa utca"
            if main_part in property_address_clean:
                return True
    
    return False

def load_and_process_data():
    """Adatok bet√∂lt√©se √©s feldolgoz√°sa - Buda√∂rs koordin√°t√°s CSV"""
    try:
        # Koordin√°t√°s CSV pattern keres√©s - Buda√∂rs specifikus
        location_patterns = [
            "ingatlan_reszletes_budaors_*_koordinatak_*.csv",  # Koordin√°t√°s v√°ltozat priorit√°s
            "ingatlan_reszletes_budaors_*.csv",                # Fallback basic
            "ingatlan_*budaors*.csv"                           # Wildcard fallback
        ]
        
        # Fix lok√°ci√≥ pattern keres√©s - mindig a legfrissebb koordin√°t√°s CSV-t v√°lasztja
        for pattern in location_patterns:
            matching_files = glob.glob(pattern)
            if matching_files:
                latest_file = max(matching_files, key=lambda x: os.path.getmtime(x))
                st.info(f"üìÇ Bet√∂lt√∂tt adatforr√°s: **{latest_file}** ({len(matching_files)} tal√°lat k√∂z√ºl)")
                
                # CSV bet√∂lt√©s pipe elv√°laszt√≥val
                df = pd.read_csv(latest_file, sep='|', encoding='utf-8')
                
                # Iskolak√∂rzeti utc√°k bet√∂lt√©se
                school_streets = load_school_streets()
                
                # Adatfeldolgoz√°s
                df['teljes_ar_milli√≥'] = df['teljes_ar'].apply(parse_million_ft)
                df['terulet_szam'] = df['terulet'].apply(parse_area)
                df['szobak_szam'] = df['szobak'].apply(parse_rooms)
                
                # Csal√°dbar√°t pontsz√°m sz√°m√≠t√°sa
                df['csaladbarati_pontszam'] = df.apply(create_family_score, axis=1)
                
                # Modern pontsz√°m hozz√°ad√°sa ha l√©tezik
                if 'netto_szoveg_pont' in df.columns:
                    df['modern_netto_pont'] = df['netto_szoveg_pont']
                else:
                    df['modern_netto_pont'] = 0
                
                # üè´ ISKOLAK√ñRZETI SZ≈∞R≈ê HOZZ√ÅAD√ÅSA
                df['iskola_korzetben'] = df['cim'].apply(lambda x: is_in_school_district(x, school_streets))
                
                # Statisztika megjelen√≠t√©se
                iskola_count = df['iskola_korzetben'].sum()
                total_count = len(df)
                st.info(f"üè´ Iskolak√∂rzeti ingatlanok: **{iskola_count}/{total_count}** ({iskola_count/total_count*100:.1f}%)")
                
                return df
        
        # Ha egyik pattern sem m≈±k√∂d√∂tt
        st.error("HIBA: Nincs tal√°lhat√≥ Buda√∂rsi CSV f√°jl!")
        return pd.DataFrame()
        
    except Exception as e:
        st.error(f"Adatbet√∂lt√©si hiba: {e}")
        return pd.DataFrame()

def parse_million_ft(text):
    """Milli√≥ Ft konvert√°l√°sa sz√°mra"""
    if pd.isna(text):
        return None
    text_str = str(text).replace(',', '.')
    # "159 M Ft" -> 159, "263,80 M Ft" -> 263.80
    match = re.search(r'(\d+(?:\.\d+)?)\s*M', text_str)
    return float(match.group(1)) if match else None

def parse_area(text):
    """Ter√ºlet konvert√°l√°sa sz√°mra"""
    if pd.isna(text):
        return None
    text_str = str(text)
    # "133 m2" -> 133
    match = re.search(r'(\d+)', text_str)
    return int(match.group(1)) if match else None

def parse_rooms(text):
    """Szobasz√°m konvert√°l√°sa sz√°mra"""
    if pd.isna(text):
        return None
    text_str = str(text)
    # "5 + 1 f√©l" -> 5, "4 + 1 f√©l" -> 4, "3" -> 3
    match = re.search(r'(\d+)', text_str)
    return int(match.group(1)) if match else None

def create_family_score(row):
    """Csal√°dbar√°t pontsz√°m sz√°m√≠t√°sa (0-100)"""
    score = 0
    
    # Ter√ºlet pontsz√°m (max 25 pont)
    if pd.notna(row.get('terulet_szam')):
        area = row['terulet_szam']
        if area >= 200:
            score += 25
        elif area >= 150:
            score += 20
        elif area >= 120:
            score += 15
        elif area >= 100:
            score += 10
        else:
            score += 5
    
    # Szobasz√°m pontsz√°m (max 25 pont)
    if pd.notna(row.get('szobak_szam')):
        rooms = row['szobak_szam']
        if rooms >= 5:
            score += 25
        elif rooms >= 4:
            score += 20
        elif rooms >= 3:
            score += 15
        else:
            score += 10
    else:
        # Ha nincs szobasz√°m adat, √°tlag pontot adunk (15 pont)
        score += 15
    
    # √Ållapot pontsz√°m (max 25 pont)
    condition_raw = row.get('ingatlan_allapota', '')
    condition = str(condition_raw).lower() if pd.notna(condition_raw) else ''
    if '√∫j' in condition or '√∫j√©p√≠t√©s≈±' in condition:
        score += 25
    elif 'fel√∫j√≠tott' in condition or 'kit≈±n≈ë' in condition:
        score += 20
    elif 'j√≥' in condition:
        score += 15
    elif 'k√∂zepes' in condition:
        score += 10
    else:
        score += 5
    
    # Modern funkci√≥k pontsz√°m (max 25 pont)
    modern_score = 0
    modern_features = ['van_zold_energia', 'van_wellness_luxury', 'van_smart_tech', 'van_premium_design']
    for feature in modern_features:
        if row.get(feature, False):
            modern_score += 6.25
    score += modern_score
    
    return min(100, max(0, score))

def generate_ingatlan_url(row):
    """Ingatlan.com URL kinyer√©se a link oszlopb√≥l"""
    try:
        # Pr√≥b√°ljuk meg a link oszlopb√≥l
        if pd.notna(row.get('link')):
            return str(row['link'])
        # Fallback: gener√°lt URL (de ez nem lesz pontos)
        elif pd.notna(row.get('id')):
            return f"https://ingatlan.com/elado+haz/{int(row['id'])}"
        return None
    except (KeyError, AttributeError, TypeError):
        # Ha valami hiba lenne, fallback
        if pd.notna(row.get('id')):
            return f"https://ingatlan.com/elado+haz/{int(row['id'])}"
        return None

def main():
    """F≈ëalkalmaz√°s"""
    
    # Fejl√©c
    st.title(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ingatlan Dashboard - {location_name} - {timestamp}")
    st.markdown("**3 gyerekes csal√°dok sz√°m√°ra optimaliz√°lt ingatlankeres√©s - GPS t√©rk√©ppel + Iskolak√∂rzet sz≈±r≈ë**")
    st.markdown("*Nagy m√©ret, remek √°llapot, modern funkci√≥k, iskolak√∂rzet, m√©gis j√≥ √°r/√©rt√©k ar√°ny*")
    
    # Adatok bet√∂lt√©se
    df = load_and_process_data()
    if df.empty:
        return
    
    # Sidebar filterek
    st.sidebar.header("üéØ Sz≈±r≈ëk")
    
    # üè´ ISKOLAK√ñRZETI SZ≈∞R≈ê (els≈ëk√©nt)
    st.sidebar.subheader("üè´ Iskolak√∂rzet")
    filter_school_district = st.sidebar.checkbox(
        "1-es sz√°m√∫ iskola k√∂rzet√©ben", 
        value=False,
        help="Csak azok az ingatlanok, amelyek az 1-es sz√°m√∫ √°ltal√°nos iskola k√∂rzet√©ben vannak"
    )
    
    # √År sz≈±r≈ë
    if 'teljes_ar_milli√≥' in df.columns and df['teljes_ar_milli√≥'].notna().any():
        min_price = float(df['teljes_ar_milli√≥'].min())
        max_price = float(df['teljes_ar_milli√≥'].max())
        
        # Ha min √©s max azonos, akkor nem csin√°lunk slider-t
        if min_price == max_price:
            st.sidebar.write(f"üí∞ **√År:** {min_price:.1f} M Ft")
            price_range = (min_price, max_price)
        else:
            price_range = st.sidebar.slider(
                "üí∞ √År (M Ft)", 
                min_value=min_price, 
                max_value=max_price, 
                value=(min_price, max_price),
                step=5.0
            )
    else:
        price_range = None
    
    # Ter√ºlet sz≈±r≈ë
    if 'terulet_szam' in df.columns and df['terulet_szam'].notna().any():
        min_area = int(df['terulet_szam'].min())
        max_area = int(df['terulet_szam'].max())
        
        # Ha min √©s max azonos, akkor nem csin√°lunk slider-t
        if min_area == max_area:
            st.sidebar.write(f"üìê **Ter√ºlet:** {min_area} m¬≤")
            area_range = (min_area, max_area)
        else:
            area_range = st.sidebar.slider(
                "üìê Ter√ºlet (m¬≤)", 
                min_value=min_area, 
                max_value=max_area, 
                value=(min_area, max_area),
                step=10
            )
    else:
        area_range = None
    
    # Szobasz√°m sz≈±r≈ë
    if 'szobak_szam' in df.columns and df['szobak_szam'].notna().any():
        min_rooms = int(df['szobak_szam'].min())
        max_rooms = int(df['szobak_szam'].max())
        
        # Ha min √©s max azonos, akkor nem csin√°lunk slider-t
        if min_rooms == max_rooms:
            st.sidebar.write(f"üè† **Szobasz√°m:** {min_rooms}")
            rooms_range = (min_rooms, max_rooms)
        else:
            rooms_range = st.sidebar.slider(
                "üè† Szobasz√°m", 
                min_value=min_rooms, 
                max_value=max_rooms, 
                value=(min_rooms, max_rooms)
            )
    else:
        rooms_range = None
    
    # √Ållapot sz≈±r≈ë
    if 'ingatlan_allapota' in df.columns:
        conditions = df['ingatlan_allapota'].dropna().unique()
        selected_conditions = st.sidebar.multiselect(
            "üîß √Ållapot",
            options=conditions,
            default=conditions
        )
    else:
        selected_conditions = None
    
    # Modern funkci√≥k sz≈±r≈ë
    st.sidebar.subheader("‚≠ê Modern Funkci√≥k")
    filter_green = st.sidebar.checkbox("üåû Z√∂ld energia", value=False)
    filter_wellness = st.sidebar.checkbox("üèä Wellness & Luxury", value=False)
    filter_smart = st.sidebar.checkbox("üè† Smart Technology", value=False)
    filter_premium = st.sidebar.checkbox("üíé Premium Design", value=False)
    
    # Sz≈±r√©s alkalmaz√°sa
    filtered_df = df.copy()
    
    # üè´ Iskolak√∂rzeti sz≈±r√©s
    if filter_school_district:
        filtered_df = filtered_df[filtered_df['iskola_korzetben'] == True]
    
    if price_range:
        filtered_df = filtered_df[
            (filtered_df['teljes_ar_milli√≥'].isna()) |
            ((filtered_df['teljes_ar_milli√≥'] >= price_range[0]) &
             (filtered_df['teljes_ar_milli√≥'] <= price_range[1]))
        ]
    
    if area_range:
        filtered_df = filtered_df[
            (filtered_df['terulet_szam'].isna()) |
            ((filtered_df['terulet_szam'] >= area_range[0]) &
             (filtered_df['terulet_szam'] <= area_range[1]))
        ]
    
    if rooms_range:
        # Csak azokat sz≈±rj√ºk, amelyekn√©l van szobasz√°m adat
        filtered_df = filtered_df[
            (filtered_df['szobak_szam'].isna()) |  # Megtartjuk a NaN √©rt√©keket
            ((filtered_df['szobak_szam'] >= rooms_range[0]) &
             (filtered_df['szobak_szam'] <= rooms_range[1]))
        ]
    
    if selected_conditions:
        filtered_df = filtered_df[filtered_df['ingatlan_allapota'].isin(selected_conditions)]
    
    if filter_green:
        filtered_df = filtered_df[filtered_df.get('van_zold_energia', False) == True]
    if filter_wellness:
        filtered_df = filtered_df[filtered_df.get('van_wellness_luxury', False) == True]
    if filter_smart:
        filtered_df = filtered_df[filtered_df.get('van_smart_tech', False) == True]
    if filter_premium:
        filtered_df = filtered_df[filtered_df.get('van_premium_design', False) == True]
    
    # Eredm√©nyek megjelen√≠t√©se
    st.header(f"üè† Tal√°latok: {len(filtered_df)} ingatlan")
    
    # Iskolak√∂rzeti statisztika megjelen√≠t√©se ha akt√≠v a sz≈±r≈ë
    if filter_school_district:
        st.success(f"üè´ **Iskolak√∂rzeti sz≈±r√©s akt√≠v:** {len(filtered_df)} ingatlan az 1-es sz√°m√∫ iskola k√∂rzet√©ben")
    
    if len(filtered_df) == 0:
        st.warning("Nincs a sz≈±r≈ëknek megfelel≈ë ingatlan. Pr√≥b√°ljon laz√≠tani a felt√©teleken!")
        return
    
    # √Åltal√°nos statisztik√°k
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        avg_price = filtered_df['teljes_ar_milli√≥'].mean()
        st.metric("üí∞ √Åtlag√°r", f"{avg_price:.1f} M Ft")
    
    with col2:
        avg_area = filtered_df['terulet_szam'].mean()
        st.metric("üìê √Åtlag ter√ºlet", f"{avg_area:.0f} m¬≤")
    
    with col3:
        avg_rooms = filtered_df['szobak_szam'].mean()
        st.metric("üè† √Åtlag szobasz√°m", f"{avg_rooms:.1f}")
    
    with col4:
        avg_family_score = filtered_df['csaladbarati_pontszam'].mean()
        st.metric("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ √Åtlag csal√°dbar√°t pont", f"{avg_family_score:.1f}")
    
    # Top 5 legjobb ingatlan
    st.header("üèÜ TOP 5 Legcsal√°dbar√°tabb Ingatlan")
    
    top_5 = filtered_df.nlargest(5, 'csaladbarati_pontszam')
    
    for idx, (_, row) in enumerate(top_5.iterrows(), 1):
        # URL gener√°l√°sa
        ingatlan_url = generate_ingatlan_url(row)
        
        # Iskolak√∂rzeti jel√∂l√©s hozz√°ad√°sa
        school_icon = "üè´" if row.get('iskola_korzetben', False) else ""
        title_text = f"#{idx} {school_icon} {row.get('cim', 'C√≠m hi√°nyzik')} - {row['csaladbarati_pontszam']:.1f} pont"
        
        # Link hozz√°ad√°sa ha van URL
        if ingatlan_url:
            title_with_link = f"{title_text} | [üîó Megtekint√©s]({ingatlan_url})"
        else:
            title_with_link = title_text
            
        with st.expander(title_with_link):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"üí∞ **√År:** {row.get('teljes_ar', 'N/A')}")
                st.write(f"üìê **Ter√ºlet:** {row.get('terulet', 'N/A')}")
                st.write(f"üè† **Szob√°k:** {row.get('szobak', 'N/A')}")
                st.write(f"üîß **√Ållapot:** {row.get('ingatlan_allapota', 'N/A')}")
            
            with col2:
                st.write(f"üìä **Csal√°dbar√°t pont:** {row['csaladbarati_pontszam']:.1f}")
                if 'modern_netto_pont' in row.index and pd.notna(row['modern_netto_pont']):
                    st.write(f"‚≠ê **Modern pont:** {row['modern_netto_pont']:.1f}")
                
                # Iskolak√∂rzeti inform√°ci√≥
                if row.get('iskola_korzetben', False):
                    st.success("üè´ **1-es sz√°m√∫ iskola k√∂rzet√©ben**")
                
                # GPS koordin√°t√°k megjelen√≠t√©se ha vannak
                if 'geo_latitude' in row.index and pd.notna(row['geo_latitude']):
                    st.write(f"üó∫Ô∏è **GPS:** ({row['geo_latitude']:.4f}, {row['geo_longitude']:.4f})")

    # üó∫Ô∏è INTERAKT√çV T√âRK√âP - sz≈±rt adatokkal
    create_interactive_map(filtered_df, location_name)
    
    # Vizualiz√°ci√≥k
    st.header("üìä Vizualiz√°ci√≥k")
    
    # √År vs Ter√ºlet scatter plot csal√°dbar√°t pontsz√°m szerint + iskolak√∂rzet jel√∂l√©s
    fig1 = px.scatter(
        filtered_df, 
        x='terulet_szam', 
        y='teljes_ar_milli√≥',
        color='csaladbarati_pontszam',
        symbol='iskola_korzetben',
        hover_data=['cim', 'ingatlan_allapota'],
        title="√År vs Ter√ºlet (sz√≠nk√≥d: csal√°dbar√°t pont, szimb√≥lum: iskolak√∂rzet)",
        labels={
            'terulet_szam': 'Ter√ºlet (m¬≤)', 
            'teljes_ar_milli√≥': '√År (M Ft)',
            'iskola_korzetben': 'Iskola k√∂rzetben'
        }
    )
    st.plotly_chart(fig1, use_container_width=True)
    
    # Iskolak√∂rzeti eloszl√°s
    if 'iskola_korzetben' in filtered_df.columns:
        school_stats = {
            'Iskola k√∂rzetben': filtered_df['iskola_korzetben'].sum(),
            'Nem iskola k√∂rzetben': (~filtered_df['iskola_korzetben']).sum()
        }
        
        fig2 = px.pie(
            values=list(school_stats.values()),
            names=list(school_stats.keys()),
            title="Ingatlanok eloszl√°sa iskolak√∂rzet szerint"
        )
        st.plotly_chart(fig2, use_container_width=True)
    
    # Modern funkci√≥k eloszl√°s
    if all(col in filtered_df.columns for col in ['van_zold_energia', 'van_wellness_luxury', 'van_smart_tech', 'van_premium_design']):
        modern_stats = {
            'Z√∂ld Energia': filtered_df['van_zold_energia'].sum(),
            'Wellness & Luxury': filtered_df['van_wellness_luxury'].sum(),
            'Smart Technology': filtered_df['van_smart_tech'].sum(),
            'Premium Design': filtered_df['van_premium_design'].sum()
        }
        
        fig3 = px.bar(
            x=list(modern_stats.keys()),
            y=list(modern_stats.values()),
            title="Modern Funkci√≥k Gyakoris√°ga a Sz≈±rt Ingatlanokn√°l"
        )
        st.plotly_chart(fig3, use_container_width=True)
    
    # R√©szletes adatt√°bla
    st.header("üìã R√©szletes Lista")
    st.markdown("**Minden sz≈±rt ingatlan r√©szletei kattinthat√≥ linkekkel √©s iskolak√∂rzeti jel√∂l√©ssel:**")
    
    display_columns = [
        'cim', 'teljes_ar', 'terulet', 'szobak', 'ingatlan_allapota', 'csaladbarati_pontszam', 'modern_netto_pont', 'iskola_korzetben', 'link'
    ]
    
    available_columns = [col for col in display_columns if col in filtered_df.columns]
    
    display_df = filtered_df[available_columns].copy()
    display_df = display_df.sort_values('csaladbarati_pontszam', ascending=False)
    
    # Val√≥di ingatlan.com ID kinyer√©se a linkb≈ël + URL gener√°l√°s
    def extract_ingatlan_id(link):
        """Val√≥di ingatlan.com ID kinyer√©se a linkb≈ël"""
        try:
            if pd.notna(link) and 'ingatlan.com' in str(link):
                match = re.search(r'/(\d+)/?$', str(link))
                return match.group(1) if match else 'N/A'
            return 'N/A'
        except:
            return 'N/A'
    
    # Hozz√°adjuk a val√≥di ID-t - JAV√çTOTT verzi√≥ Streamlit-kompatibilis
    display_df_with_links = []
    for idx, (_, row) in enumerate(display_df.iterrows(), 1):
        # URL gener√°l√°sa ugyan√∫gy, mint a TOP 5-ben
        ingatlan_url = generate_ingatlan_url(row)
        ingatlan_id = extract_ingatlan_id(row.get('link'))
        
        row_data = {
            'Ingatlan ID': ingatlan_id,
            'URL': ingatlan_url if ingatlan_url else 'N/A',
            'C√≠m': row.get('cim', 'N/A'),
            '√År': row.get('teljes_ar', 'N/A'),
            'Ter√ºlet': row.get('terulet', 'N/A'),
            'Szob√°k': row.get('szobak', 'N/A'),
            '√Ållapot': row.get('ingatlan_allapota', 'N/A'),
            'Csal√°dbar√°t Pont': f"{row.get('csaladbarati_pontszam', 0):.1f}",
            'üè´ Iskola k√∂rzetben': "‚úÖ" if row.get('iskola_korzetben', False) else "‚ùå"
        }
        
        # Modern pont hozz√°ad√°sa, ha l√©tezik
        if 'modern_netto_pont' in row.index and pd.notna(row['modern_netto_pont']):
            row_data['Modern Pont'] = f"{row['modern_netto_pont']:.1f}"
            
        display_df_with_links.append(row_data)
    
    # DataFrame l√©trehoz√°sa
    final_display_df = pd.DataFrame(display_df_with_links)
    
    # Dataframe megjelen√≠t√©se
    st.dataframe(final_display_df, use_container_width=True, hide_index=True)
    
    # Z√°r√≥ inform√°ci√≥k
    st.markdown("---")
    st.markdown("**üìù Csal√°dbar√°t Pontsz√°m Sz√°m√≠t√°si M√≥dszer:**")
    st.markdown("""
    A **Csal√°dbar√°t Pontsz√°m** 0-100 pontos sk√°l√°n √©rt√©keli az ingatlanokat, n√©gy f≈ë kateg√≥ri√°ban:
    
    **üè† Ter√ºlet pontsz√°m (max 25 pont):**
    - 200+ m¬≤: 25 pont
    - 150-199 m¬≤: 20 pont  
    - 120-149 m¬≤: 15 pont
    - 100-119 m¬≤: 10 pont
    - 100 m¬≤ alatt: 5 pont
    
    **üõèÔ∏è Szobasz√°m pontsz√°m (max 25 pont):**
    - 5+ szoba: 25 pont
    - 4 szoba: 20 pont
    - 3 szoba: 15 pont
    - 2 vagy kevesebb szoba: 10 pont
    - Hi√°nyz√≥ adat eset√©n: 15 pont (√°tlag)
    
    **üîß √Ållapot pontsz√°m (max 25 pont):**
    - √öj/√öj√©p√≠t√©s≈±: 25 pont
    - Fel√∫j√≠tott/Kit≈±n≈ë: 20 pont
    - J√≥: 15 pont
    - K√∂zepes: 10 pont
    - Egy√©b/Rossz: 5 pont
    
    **‚ö° Modern funkci√≥k pontsz√°m (max 25 pont):**
    - Minden modern funkci√≥ 6,25 pontot √©r:
      - üåû Z√∂ld energia (napelem, h≈ëszivatty√∫)
      - üèä Wellness & Luxury (medence, szauna)
      - üè† Smart Technology (okos otthon)
      - üíé Premium Design (modern diz√°jn)
    """)
    st.markdown("---")
    st.markdown("**üè´ Iskolak√∂rzeti Sz≈±r≈ë Inform√°ci√≥:**")
    st.markdown(f"- Az **1-es sz√°m√∫ iskola k√∂rzete** az `iskola_budaors_cimek.txt` f√°jl alapj√°n ker√ºlt meghat√°roz√°sra")
    st.markdown(f"- A sz≈±r≈ë utcan√©v alap√∫ string matching-et haszn√°l")
    st.markdown(f"- **Akt√≠v iskolak√∂rzeti sz≈±r≈ë:** {'‚úÖ IGEN' if filter_school_district else '‚ùå NEM'}")
    st.markdown("---")
    st.markdown("**üìä Tov√°bbi Megjegyz√©sek:**")
    st.markdown("- A csal√°dbar√°t pontsz√°m 3 gyerekes csal√°dok ig√©nyeit figyelembe v√©ve k√©sz√ºlt")
    st.markdown("- 150+ m¬≤ √©s 4+ szoba ide√°lis nagyobb csal√°dok sz√°m√°ra")  
    st.markdown("- A modern pontsz√°m tov√°bbi k√©nyelmi √©s technol√≥giai elemeket √©rt√©kel")
    st.markdown(f"- Az adatok GPS koordin√°t√°kkal b≈ëv√≠tve: {timestamp} √°llapot szerint friss√ºltek")

def create_interactive_map(df, location_name):
    """üó∫Ô∏è INTERAKT√çV T√âRK√âP - GPS koordin√°t√°k alapj√°n + iskolak√∂rzeti jel√∂l√©s"""
    
    # Koordin√°ta oszlopok ellen≈ërz√©se
    has_coordinates = all(col in df.columns for col in ['geo_latitude', 'geo_longitude'])
    
    if not has_coordinates:
        st.warning("üó∫Ô∏è T√©rk√©pes megjelen√≠t√©s nem el√©rhet≈ë - nincs GPS koordin√°ta az adatokban")
        return
    
    # Koordin√°t√°kkal rendelkez≈ë rekordok sz≈±r√©se
    map_df = df.dropna(subset=['geo_latitude', 'geo_longitude']).copy()
    
    if map_df.empty:
        st.warning("üó∫Ô∏è T√©rk√©pes megjelen√≠t√©s nem el√©rhet≈ë - nincs GPS adat a rekordokban")
        return
    
    st.markdown("---")
    st.markdown("## üó∫Ô∏è **INTERAKT√çV T√âRK√âP**")
    st.markdown(f"**üìç Lok√°ci√≥:** {location_name} | **üè† Ingatlanok:** {len(map_df)} db GPS koordin√°t√°val")
    
    # Iskolak√∂rzeti statisztika a t√©rk√©pn√©l
    school_count = map_df['iskola_korzetben'].sum()
    st.markdown(f"**üè´ Iskolak√∂rzeti ingatlanok:** {school_count}/{len(map_df)} ({school_count/len(map_df)*100:.1f}%)")
    
    # T√©rk√©p alapbe√°ll√≠t√°sok
    center_lat = map_df['geo_latitude'].mean()
    center_lng = map_df['geo_longitude'].mean()
    
    # Folium t√©rk√©p l√©trehoz√°sa
    m = folium.Map(
        location=[center_lat, center_lng],
        zoom_start=12,
        tiles='OpenStreetMap'
    )
    
    # Sz√≠nk√≥dol√°s √°r szerint
    def get_price_color(price):
        """√År alap√∫ sz√≠nk√≥dol√°s"""
        if pd.isna(price):
            return 'gray'
        elif price <= 100:
            return 'green'
        elif price <= 200:
            return 'orange'
        elif price <= 300:
            return 'red'
        else:
            return 'purple'
    
    # Marker ikon kiv√°laszt√°sa iskolak√∂rzet szerint
    def get_marker_icon(is_in_school_district):
        """Marker ikon iskolak√∂rzet alapj√°n"""
        return 'graduation-cap' if is_in_school_district else 'home'
    
    # Markerek hozz√°ad√°sa
    for idx, row in map_df.iterrows():
        try:
            lat = row['geo_latitude']
            lng = row['geo_longitude']
            is_school = row.get('iskola_korzetben', False)
            
            # Popup tartalma
            school_text = "üè´ Iskola k√∂rzetben" if is_school else ""
            popup_content = f"""
            <b>{row.get('cim', 'C√≠m hi√°nyzik')}</b><br>
            üí∞ √År: {row.get('teljes_ar', 'N/A')}<br>
            üìê Ter√ºlet: {row.get('terulet', 'N/A')}<br>
            üè† Szob√°k: {row.get('szobak', 'N/A')}<br>
            üîß √Ållapot: {row.get('ingatlan_allapota', 'N/A')}<br>
            üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Csal√°dbar√°t pont: {row.get('csaladbarati_pontszam', 0):.1f}<br>
            {school_text}<br>
            üó∫Ô∏è GPS: ({lat:.4f}, {lng:.4f})
            """
            
            # URL hozz√°ad√°sa ha van
            ingatlan_url = generate_ingatlan_url(row)
            if ingatlan_url:
                popup_content += f"<br><a href='{ingatlan_url}' target='_blank'>üîó Megtekint√©s</a>"
            
            folium.Marker(
                [lat, lng],
                popup=folium.Popup(popup_content, max_width=300),
                icon=folium.Icon(
                    color=get_price_color(row.get('teljes_ar_milli√≥')), 
                    icon=get_marker_icon(is_school),
                    prefix='fa'
                )
            ).add_to(m)
            
        except Exception as e:
            continue
    
    # Legenda hozz√°ad√°sa - √°r alap√∫ sz√≠nk√≥dol√°s + iskolak√∂rzet
    legend_html = f"""
    <div style='position: fixed; 
                top: 10px; right: 10px; width: 200px; height: auto; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:12px; padding: 10px'>
    <h4 style='margin-top:0;'>üè† T√©rk√©pi jelek</h4>
    <p style='margin: 3px 0; font-weight: bold;'>√Årsz√≠nk√≥dol√°s:</p>
    <p style='margin: 3px 0;'>
        <span style='color:#2ECC71; font-size: 16px;'>‚óè</span> 
        ‚â§100 M Ft: olcs√≥
    </p>
    <p style='margin: 3px 0;'>
        <span style='color:#F39C12; font-size: 16px;'>‚óè</span> 
        101-200 M Ft: k√∂zepes
    </p>
    <p style='margin: 3px 0;'>
        <span style='color:#E74C3C; font-size: 16px;'>‚óè</span> 
        201-300 M Ft: dr√°ga
    </p>
    <p style='margin: 3px 0;'>
        <span style='color:#8E44AD; font-size: 16px;'>‚óè</span> 
        300+ M Ft: nagyon dr√°ga
    </p>
    <hr style='margin: 8px 0;'>
    <p style='margin: 3px 0; font-weight: bold;'>Ikonok:</p>
    <p style='margin: 3px 0;'>üéì Iskola k√∂rzetben</p>
    <p style='margin: 3px 0;'>üè† Nem iskola k√∂rzetben</p>
    <hr style='margin: 8px 0;'>
    <p style='margin: 3px 0; font-size: 10px;'>
        üîó Kattints a markerekre<br/>r√©szletes inform√°ci√≥k√©rt
    </p>
    </div>
    """
    
    m.get_root().html.add_child(folium.Element(legend_html))
    
    # T√©rk√©p megjelen√≠t√©se Streamlit-ben
    st_folium(m, width=900, height=500, key=f"map_{location_name.lower().replace(' ', '_').replace('.', '')}")

if __name__ == "__main__":
    main()
